
Proyecto_2-Videojuego.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089b4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00031574  08008b84  08008b84  00009b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803a0f8  0803a0f8  00047980  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0803a0f8  0803a0f8  0003b0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803a100  0803a100  00047980  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803a100  0803a100  0003b100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803a104  0803a104  0003b104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000b980  20000000  0803a108  0003c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fb8  2000b980  08045a88  00047980  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d938  08045a88  00048938  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00047980  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000daa1  00000000  00000000  000479b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f72  00000000  00000000  00055451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  000573c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000219d1  00000000  00000000  00057fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000ee6e  00000000  00000000  00079971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000cd9e0  00000000  00000000  000887df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001561bf  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000925  00000000  00000000  00156202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000036bc  00000000  00000000  00156b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0015a1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000b980 	.word	0x2000b980
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008b6c 	.word	0x08008b6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000b984 	.word	0x2000b984
 800020c:	08008b6c 	.word	0x08008b6c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <LCD_Init>:
extern const uint16_t bigFont[1520];
extern SPI_HandleTypeDef hspi1;
//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	2101      	movs	r1, #1
 8000614:	4878      	ldr	r0, [pc, #480]	@ (80007f8 <LCD_Init+0x1ec>)
 8000616:	f005 fb29 	bl	8005c6c <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	//HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,GPIO_PIN_SET);
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin,GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	2110      	movs	r1, #16
 800061e:	4877      	ldr	r0, [pc, #476]	@ (80007fc <LCD_Init+0x1f0>)
 8000620:	f005 fb24 	bl	8005c6c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	2102      	movs	r1, #2
 8000628:	4875      	ldr	r0, [pc, #468]	@ (8000800 <LCD_Init+0x1f4>)
 800062a:	f005 fb1f 	bl	8005c6c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800062e:	2005      	movs	r0, #5
 8000630:	f004 ffc0 	bl	80055b4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	2102      	movs	r1, #2
 8000638:	4871      	ldr	r0, [pc, #452]	@ (8000800 <LCD_Init+0x1f4>)
 800063a:	f005 fb17 	bl	8005c6c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800063e:	2014      	movs	r0, #20
 8000640:	f004 ffb8 	bl	80055b4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8000644:	2201      	movs	r2, #1
 8000646:	2102      	movs	r1, #2
 8000648:	486d      	ldr	r0, [pc, #436]	@ (8000800 <LCD_Init+0x1f4>)
 800064a:	f005 fb0f 	bl	8005c6c <HAL_GPIO_WritePin>
	HAL_Delay(150);
 800064e:	2096      	movs	r0, #150	@ 0x96
 8000650:	f004 ffb0 	bl	80055b4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	2101      	movs	r1, #1
 8000658:	4867      	ldr	r0, [pc, #412]	@ (80007f8 <LCD_Init+0x1ec>)
 800065a:	f005 fb07 	bl	8005c6c <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 800065e:	20e9      	movs	r0, #233	@ 0xe9
 8000660:	f000 f8d0 	bl	8000804 <LCD_CMD>
	LCD_DATA(0x20);
 8000664:	2020      	movs	r0, #32
 8000666:	f000 f8f3 	bl	8000850 <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 800066a:	2011      	movs	r0, #17
 800066c:	f000 f8ca 	bl	8000804 <LCD_CMD>
	HAL_Delay(100);
 8000670:	2064      	movs	r0, #100	@ 0x64
 8000672:	f004 ff9f 	bl	80055b4 <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 8000676:	20d1      	movs	r0, #209	@ 0xd1
 8000678:	f000 f8c4 	bl	8000804 <LCD_CMD>
	LCD_DATA(0x00);
 800067c:	2000      	movs	r0, #0
 800067e:	f000 f8e7 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x71);
 8000682:	2071      	movs	r0, #113	@ 0x71
 8000684:	f000 f8e4 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x19);
 8000688:	2019      	movs	r0, #25
 800068a:	f000 f8e1 	bl	8000850 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 800068e:	20d0      	movs	r0, #208	@ 0xd0
 8000690:	f000 f8b8 	bl	8000804 <LCD_CMD>
	LCD_DATA(0x07);
 8000694:	2007      	movs	r0, #7
 8000696:	f000 f8db 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x01);
 800069a:	2001      	movs	r0, #1
 800069c:	f000 f8d8 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x08);
 80006a0:	2008      	movs	r0, #8
 80006a2:	f000 f8d5 	bl	8000850 <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 80006a6:	2036      	movs	r0, #54	@ 0x36
 80006a8:	f000 f8ac 	bl	8000804 <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 80006ac:	20e8      	movs	r0, #232	@ 0xe8
 80006ae:	f000 f8cf 	bl	8000850 <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 80006b2:	203a      	movs	r0, #58	@ 0x3a
 80006b4:	f000 f8a6 	bl	8000804 <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 80006b8:	2005      	movs	r0, #5
 80006ba:	f000 f8c9 	bl	8000850 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 80006be:	20c1      	movs	r0, #193	@ 0xc1
 80006c0:	f000 f8a0 	bl	8000804 <LCD_CMD>
	LCD_DATA(0x10);
 80006c4:	2010      	movs	r0, #16
 80006c6:	f000 f8c3 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x10);
 80006ca:	2010      	movs	r0, #16
 80006cc:	f000 f8c0 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x02);
 80006d0:	2002      	movs	r0, #2
 80006d2:	f000 f8bd 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x02);
 80006d6:	2002      	movs	r0, #2
 80006d8:	f000 f8ba 	bl	8000850 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 80006dc:	20c0      	movs	r0, #192	@ 0xc0
 80006de:	f000 f891 	bl	8000804 <LCD_CMD>
	LCD_DATA(0x00);
 80006e2:	2000      	movs	r0, #0
 80006e4:	f000 f8b4 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x35);
 80006e8:	2035      	movs	r0, #53	@ 0x35
 80006ea:	f000 f8b1 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x00);
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 f8ae 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x00);
 80006f4:	2000      	movs	r0, #0
 80006f6:	f000 f8ab 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x01);
 80006fa:	2001      	movs	r0, #1
 80006fc:	f000 f8a8 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x02);
 8000700:	2002      	movs	r0, #2
 8000702:	f000 f8a5 	bl	8000850 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 8000706:	20c5      	movs	r0, #197	@ 0xc5
 8000708:	f000 f87c 	bl	8000804 <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 800070c:	2004      	movs	r0, #4
 800070e:	f000 f89f 	bl	8000850 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 8000712:	20d2      	movs	r0, #210	@ 0xd2
 8000714:	f000 f876 	bl	8000804 <LCD_CMD>
	LCD_DATA(0x01);
 8000718:	2001      	movs	r0, #1
 800071a:	f000 f899 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x44);
 800071e:	2044      	movs	r0, #68	@ 0x44
 8000720:	f000 f896 	bl	8000850 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 8000724:	20c8      	movs	r0, #200	@ 0xc8
 8000726:	f000 f86d 	bl	8000804 <LCD_CMD>
	LCD_DATA(0x04);
 800072a:	2004      	movs	r0, #4
 800072c:	f000 f890 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x67);
 8000730:	2067      	movs	r0, #103	@ 0x67
 8000732:	f000 f88d 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x35);
 8000736:	2035      	movs	r0, #53	@ 0x35
 8000738:	f000 f88a 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x04);
 800073c:	2004      	movs	r0, #4
 800073e:	f000 f887 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x08);
 8000742:	2008      	movs	r0, #8
 8000744:	f000 f884 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x06);
 8000748:	2006      	movs	r0, #6
 800074a:	f000 f881 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x24);
 800074e:	2024      	movs	r0, #36	@ 0x24
 8000750:	f000 f87e 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x01);
 8000754:	2001      	movs	r0, #1
 8000756:	f000 f87b 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x37);
 800075a:	2037      	movs	r0, #55	@ 0x37
 800075c:	f000 f878 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x40);
 8000760:	2040      	movs	r0, #64	@ 0x40
 8000762:	f000 f875 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x03);
 8000766:	2003      	movs	r0, #3
 8000768:	f000 f872 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x10);
 800076c:	2010      	movs	r0, #16
 800076e:	f000 f86f 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x08);
 8000772:	2008      	movs	r0, #8
 8000774:	f000 f86c 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x80);
 8000778:	2080      	movs	r0, #128	@ 0x80
 800077a:	f000 f869 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x00);
 800077e:	2000      	movs	r0, #0
 8000780:	f000 f866 	bl	8000850 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 8000784:	202a      	movs	r0, #42	@ 0x2a
 8000786:	f000 f83d 	bl	8000804 <LCD_CMD>
	LCD_DATA(0x00);
 800078a:	2000      	movs	r0, #0
 800078c:	f000 f860 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x00);
 8000790:	2000      	movs	r0, #0
 8000792:	f000 f85d 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x01);
 8000796:	2001      	movs	r0, #1
 8000798:	f000 f85a 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x3F);
 800079c:	203f      	movs	r0, #63	@ 0x3f
 800079e:	f000 f857 	bl	8000850 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 80007a2:	202b      	movs	r0, #43	@ 0x2b
 80007a4:	f000 f82e 	bl	8000804 <LCD_CMD>
	LCD_DATA(0x00);
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 f851 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x00);
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 f84e 	bl	8000850 <LCD_DATA>
	LCD_DATA(0x01);
 80007b4:	2001      	movs	r0, #1
 80007b6:	f000 f84b 	bl	8000850 <LCD_DATA>
	LCD_DATA(0xE0);
 80007ba:	20e0      	movs	r0, #224	@ 0xe0
 80007bc:	f000 f848 	bl	8000850 <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 80007c0:	2029      	movs	r0, #41	@ 0x29
 80007c2:	f000 f81f 	bl	8000804 <LCD_CMD>
	LCD_CMD(0x2C); //display on
 80007c6:	202c      	movs	r0, #44	@ 0x2c
 80007c8:	f000 f81c 	bl	8000804 <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 80007cc:	2020      	movs	r0, #32
 80007ce:	f000 f819 	bl	8000804 <LCD_CMD>
	HAL_Delay(120);
 80007d2:	2078      	movs	r0, #120	@ 0x78
 80007d4:	f004 feee 	bl	80055b4 <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 80007d8:	2011      	movs	r0, #17
 80007da:	f000 f813 	bl	8000804 <LCD_CMD>
	HAL_Delay(120);
 80007de:	2078      	movs	r0, #120	@ 0x78
 80007e0:	f004 fee8 	bl	80055b4 <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 80007e4:	2029      	movs	r0, #41	@ 0x29
 80007e6:	f000 f80d 	bl	8000804 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	2101      	movs	r1, #1
 80007ee:	4802      	ldr	r0, [pc, #8]	@ (80007f8 <LCD_Init+0x1ec>)
 80007f0:	f005 fa3c 	bl	8005c6c <HAL_GPIO_WritePin>
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40020400 	.word	0x40020400
 80007fc:	40020000 	.word	0x40020000
 8000800:	40020800 	.word	0x40020800

08000804 <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2101      	movs	r1, #1
 8000812:	480c      	ldr	r0, [pc, #48]	@ (8000844 <LCD_CMD+0x40>)
 8000814:	f005 fa2a 	bl	8005c6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2110      	movs	r1, #16
 800081c:	480a      	ldr	r0, [pc, #40]	@ (8000848 <LCD_CMD+0x44>)
 800081e:	f005 fa25 	bl	8005c6c <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);

	HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000822:	1df9      	adds	r1, r7, #7
 8000824:	f04f 33ff 	mov.w	r3, #4294967295
 8000828:	2201      	movs	r2, #1
 800082a:	4808      	ldr	r0, [pc, #32]	@ (800084c <LCD_CMD+0x48>)
 800082c:	f006 f8a9 	bl	8006982 <HAL_SPI_Transmit>
	//HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2101      	movs	r1, #1
 8000834:	4803      	ldr	r0, [pc, #12]	@ (8000844 <LCD_CMD+0x40>)
 8000836:	f005 fa19 	bl	8005c6c <HAL_GPIO_WritePin>


}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40020400 	.word	0x40020400
 8000848:	40020000 	.word	0x40020000
 800084c:	2000b99c 	.word	0x2000b99c

08000850 <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2101      	movs	r1, #1
 800085e:	480c      	ldr	r0, [pc, #48]	@ (8000890 <LCD_DATA+0x40>)
 8000860:	f005 fa04 	bl	8005c6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	2110      	movs	r1, #16
 8000868:	480a      	ldr	r0, [pc, #40]	@ (8000894 <LCD_DATA+0x44>)
 800086a:	f005 f9ff 	bl	8005c6c <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);

	HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 800086e:	1df9      	adds	r1, r7, #7
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	2201      	movs	r2, #1
 8000876:	4808      	ldr	r0, [pc, #32]	@ (8000898 <LCD_DATA+0x48>)
 8000878:	f006 f883 	bl	8006982 <HAL_SPI_Transmit>
	//HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2101      	movs	r1, #1
 8000880:	4803      	ldr	r0, [pc, #12]	@ (8000890 <LCD_DATA+0x40>)
 8000882:	f005 f9f3 	bl	8005c6c <HAL_GPIO_WritePin>

}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40020400 	.word	0x40020400
 8000894:	40020000 	.word	0x40020000
 8000898:	2000b99c 	.word	0x2000b99c

0800089c <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
 80008a8:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 80008aa:	202a      	movs	r0, #42	@ 0x2a
 80008ac:	f7ff ffaa 	bl	8000804 <LCD_CMD>
	LCD_DATA(x1 >> 8);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	0a1b      	lsrs	r3, r3, #8
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ffca 	bl	8000850 <LCD_DATA>
	LCD_DATA(x1);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ffc5 	bl	8000850 <LCD_DATA>
	LCD_DATA(x2 >> 8);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ffbf 	bl	8000850 <LCD_DATA>
	LCD_DATA(x2);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff ffba 	bl	8000850 <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 80008dc:	202b      	movs	r0, #43	@ 0x2b
 80008de:	f7ff ff91 	bl	8000804 <LCD_CMD>
	LCD_DATA(y1 >> 8);
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	0a1b      	lsrs	r3, r3, #8
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ffb1 	bl	8000850 <LCD_DATA>
	LCD_DATA(y1);
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ffac 	bl	8000850 <LCD_DATA>
	LCD_DATA(y2 >> 8);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	0a1b      	lsrs	r3, r3, #8
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ffa6 	bl	8000850 <LCD_DATA>
	LCD_DATA(y2);
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ffa1 	bl	8000850 <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 800090e:	202c      	movs	r0, #44	@ 0x2c
 8000910:	f7ff ff78 	bl	8000804 <LCD_CMD>
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <LCD_Clear>:
//***************************************************************************************************************************************
// Función para borrar la pantalla - parámetros (color)
//***************************************************************************************************************************************
void LCD_Clear(unsigned int c) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	unsigned int x, y;
	LCD_CMD(0x02c); // write_memory_start
 8000924:	202c      	movs	r0, #44	@ 0x2c
 8000926:	f7ff ff6d 	bl	8000804 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800092a:	2201      	movs	r2, #1
 800092c:	2110      	movs	r1, #16
 800092e:	481b      	ldr	r0, [pc, #108]	@ (800099c <LCD_Clear+0x80>)
 8000930:	f005 f99c 	bl	8005c6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	2101      	movs	r1, #1
 8000938:	4819      	ldr	r0, [pc, #100]	@ (80009a0 <LCD_Clear+0x84>)
 800093a:	f005 f997 	bl	8005c6c <HAL_GPIO_WritePin>
	SetWindows(0, 0, 319, 239); // 479, 319);
 800093e:	23ef      	movs	r3, #239	@ 0xef
 8000940:	f240 123f 	movw	r2, #319	@ 0x13f
 8000944:	2100      	movs	r1, #0
 8000946:	2000      	movs	r0, #0
 8000948:	f7ff ffa8 	bl	800089c <SetWindows>
	for (x = 0; x < 320; x++)
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	e016      	b.n	8000980 <LCD_Clear+0x64>
		for (y = 0; y < 240; y++) {
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	e00d      	b.n	8000974 <LCD_Clear+0x58>
			LCD_DATA(c >> 8);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	0a1b      	lsrs	r3, r3, #8
 800095c:	b2db      	uxtb	r3, r3
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ff76 	bl	8000850 <LCD_DATA>
			LCD_DATA(c);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	b2db      	uxtb	r3, r3
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff ff71 	bl	8000850 <LCD_DATA>
		for (y = 0; y < 240; y++) {
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	3301      	adds	r3, #1
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	2bef      	cmp	r3, #239	@ 0xef
 8000978:	d9ee      	bls.n	8000958 <LCD_Clear+0x3c>
	for (x = 0; x < 320; x++)
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	3301      	adds	r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000986:	d3e4      	bcc.n	8000952 <LCD_Clear+0x36>
		}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2101      	movs	r1, #1
 800098c:	4804      	ldr	r0, [pc, #16]	@ (80009a0 <LCD_Clear+0x84>)
 800098e:	f005 f96d 	bl	8005c6c <HAL_GPIO_WritePin>
}
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40020000 	.word	0x40020000
 80009a0:	40020400 	.word	0x40020400

080009a4 <FillRect>:
 }
 }
 */

void FillRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	@ 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
 80009b0:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 80009b2:	202c      	movs	r0, #44	@ 0x2c
 80009b4:	f7ff ff26 	bl	8000804 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2110      	movs	r1, #16
 80009bc:	4824      	ldr	r0, [pc, #144]	@ (8000a50 <FillRect+0xac>)
 80009be:	f005 f955 	bl	8005c6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2101      	movs	r1, #1
 80009c6:	4823      	ldr	r0, [pc, #140]	@ (8000a54 <FillRect+0xb0>)
 80009c8:	f005 f950 	bl	8005c6c <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + w;
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	61bb      	str	r3, [r7, #24]
	y2 = y + h;
 80009d4:	68ba      	ldr	r2, [r7, #8]
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	4413      	add	r3, r2
 80009da:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	1e5a      	subs	r2, r3, #1
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	68b9      	ldr	r1, [r7, #8]
 80009e6:	68f8      	ldr	r0, [r7, #12]
 80009e8:	f7ff ff58 	bl	800089c <SetWindows>
	unsigned int k = w * h * 2 - 1;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	683a      	ldr	r2, [r7, #0]
 80009f0:	fb02 f303 	mul.w	r3, r2, r3
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	3b01      	subs	r3, #1
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < w; i++) {
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
 80009fe:	e01a      	b.n	8000a36 <FillRect+0x92>
		for (int j = 0; j < h; j++) {
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
 8000a04:	e010      	b.n	8000a28 <FillRect+0x84>
			LCD_DATA(c >> 8);
 8000a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff1f 	bl	8000850 <LCD_DATA>
			LCD_DATA(c);
 8000a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ff1a 	bl	8000850 <LCD_DATA>

			//LCD_DATA(bitmap[k]);
			k = k - 2;
 8000a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a1e:	3b02      	subs	r3, #2
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < h; j++) {
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3301      	adds	r3, #1
 8000a26:	61fb      	str	r3, [r7, #28]
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d8ea      	bhi.n	8000a06 <FillRect+0x62>
	for (int i = 0; i < w; i++) {
 8000a30:	6a3b      	ldr	r3, [r7, #32]
 8000a32:	3301      	adds	r3, #1
 8000a34:	623b      	str	r3, [r7, #32]
 8000a36:	6a3b      	ldr	r3, [r7, #32]
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d8e0      	bhi.n	8000a00 <FillRect+0x5c>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2101      	movs	r1, #1
 8000a42:	4804      	ldr	r0, [pc, #16]	@ (8000a54 <FillRect+0xb0>)
 8000a44:	f005 f912 	bl	8005c6c <HAL_GPIO_WritePin>
}
 8000a48:	bf00      	nop
 8000a4a:	3728      	adds	r7, #40	@ 0x28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40020000 	.word	0x40020000
 8000a54:	40020400 	.word	0x40020400

08000a58 <LCD_Bitmap>:
}
//***************************************************************************************************************************************
// Función para dibujar una imagen a partir de un arreglo de colores (Bitmap) Formato (Color 16bit R 5bits G 6bits B 5bits)
//***************************************************************************************************************************************
void LCD_Bitmap(unsigned int x, unsigned int y, unsigned int width,
		unsigned int height, unsigned char bitmap[]) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	@ 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
 8000a64:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000a66:	202c      	movs	r0, #44	@ 0x2c
 8000a68:	f7ff fecc 	bl	8000804 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2110      	movs	r1, #16
 8000a70:	4824      	ldr	r0, [pc, #144]	@ (8000b04 <LCD_Bitmap+0xac>)
 8000a72:	f005 f8fb 	bl	8005c6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2101      	movs	r1, #1
 8000a7a:	4823      	ldr	r0, [pc, #140]	@ (8000b08 <LCD_Bitmap+0xb0>)
 8000a7c:	f005 f8f6 	bl	8005c6c <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8000a88:	68ba      	ldr	r2, [r7, #8]
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	1e5a      	subs	r2, r3, #1
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	68b9      	ldr	r1, [r7, #8]
 8000a9a:	68f8      	ldr	r0, [r7, #12]
 8000a9c:	f7ff fefe 	bl	800089c <SetWindows>
	unsigned int k = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24

	for (int i = 0; i < width; i++) {
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
 8000aa8:	e01e      	b.n	8000ae8 <LCD_Bitmap+0x90>
		for (int j = 0; j < height; j++) {
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
 8000aae:	e014      	b.n	8000ada <LCD_Bitmap+0x82>
			LCD_DATA(bitmap[k]);
 8000ab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab4:	4413      	add	r3, r2
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fec9 	bl	8000850 <LCD_DATA>
			LCD_DATA(bitmap[k + 1]);
 8000abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ac4:	4413      	add	r3, r2
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fec1 	bl	8000850 <LCD_DATA>
			//LCD_DATA(bitmap[k]);
			k = k + 2;
 8000ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < height; j++) {
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	61fb      	str	r3, [r7, #28]
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d8e6      	bhi.n	8000ab0 <LCD_Bitmap+0x58>
	for (int i = 0; i < width; i++) {
 8000ae2:	6a3b      	ldr	r3, [r7, #32]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	623b      	str	r3, [r7, #32]
 8000ae8:	6a3b      	ldr	r3, [r7, #32]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d8dc      	bhi.n	8000aaa <LCD_Bitmap+0x52>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2101      	movs	r1, #1
 8000af4:	4804      	ldr	r0, [pc, #16]	@ (8000b08 <LCD_Bitmap+0xb0>)
 8000af6:	f005 f8b9 	bl	8005c6c <HAL_GPIO_WritePin>
}
 8000afa:	bf00      	nop
 8000afc:	3728      	adds	r7, #40	@ 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40020000 	.word	0x40020000
 8000b08:	40020400 	.word	0x40020400

08000b0c <LCD_Sprite>:
//***************************************************************************************************************************************
// Función para dibujar una imagen sprite - los parámetros columns = número de imagenes en el sprite, index = cual desplegar, flip = darle vuelta
//***************************************************************************************************************************************
void LCD_Sprite(int x, int y, int width, int height, unsigned char bitmap[],
		int columns, int index, char flip, char offset) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	@ 0x30
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
 8000b18:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000b1a:	202c      	movs	r0, #44	@ 0x2c
 8000b1c:	f7ff fe72 	bl	8000804 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2110      	movs	r1, #16
 8000b24:	484d      	ldr	r0, [pc, #308]	@ (8000c5c <LCD_Sprite+0x150>)
 8000b26:	f005 f8a1 	bl	8005c6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	484c      	ldr	r0, [pc, #304]	@ (8000c60 <LCD_Sprite+0x154>)
 8000b30:	f005 f89c 	bl	8005c6c <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8000b34:	68fa      	ldr	r2, [r7, #12]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8000b3c:	68ba      	ldr	r2, [r7, #8]
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	4413      	add	r3, r2
 8000b42:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000b44:	68f8      	ldr	r0, [r7, #12]
 8000b46:	68b9      	ldr	r1, [r7, #8]
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	1e5a      	subs	r2, r3, #1
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	f7ff fea4 	bl	800089c <SetWindows>
	int k = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int ancho = ((width * columns));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000b5c:	fb02 f303 	mul.w	r3, r2, r3
 8000b60:	613b      	str	r3, [r7, #16]
	if (flip) {
 8000b62:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d03a      	beq.n	8000be0 <LCD_Sprite+0xd4>
		for (int j = 0; j < height; j++) {
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b6e:	e032      	b.n	8000bd6 <LCD_Sprite+0xca>
			k = (j * (ancho) + index * width - 1 - offset) * 2;
 8000b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	fb03 f202 	mul.w	r2, r3, r2
 8000b78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	fb01 f303 	mul.w	r3, r1, r3
 8000b80:	4413      	add	r3, r2
 8000b82:	1e5a      	subs	r2, r3, #1
 8000b84:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			k = k + width * 2;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b94:	4413      	add	r3, r2
 8000b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b9c:	e014      	b.n	8000bc8 <LCD_Sprite+0xbc>
				LCD_DATA(bitmap[k]);
 8000b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ba0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ba2:	4413      	add	r3, r2
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fe52 	bl	8000850 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8000bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bae:	3301      	adds	r3, #1
 8000bb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000bb2:	4413      	add	r3, r2
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fe4a 	bl	8000850 <LCD_DATA>
				k = k - 2;
 8000bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bbe:	3b02      	subs	r3, #2
 8000bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	dbe6      	blt.n	8000b9e <LCD_Sprite+0x92>
		for (int j = 0; j < height; j++) {
 8000bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000bd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	dbc8      	blt.n	8000b70 <LCD_Sprite+0x64>
 8000bde:	e034      	b.n	8000c4a <LCD_Sprite+0x13e>
			}
		}
	} else {
		for (int j = 0; j < height; j++) {
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
 8000be4:	e02d      	b.n	8000c42 <LCD_Sprite+0x136>
			k = (j * (ancho) + index * width + 1 + offset) * 2;
 8000be6:	6a3b      	ldr	r3, [r7, #32]
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	fb03 f202 	mul.w	r2, r3, r2
 8000bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bf0:	6879      	ldr	r1, [r7, #4]
 8000bf2:	fb01 f303 	mul.w	r3, r1, r3
 8000bf6:	4413      	add	r3, r2
 8000bf8:	1c5a      	adds	r2, r3, #1
 8000bfa:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000bfe:	4413      	add	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
 8000c08:	e014      	b.n	8000c34 <LCD_Sprite+0x128>
				LCD_DATA(bitmap[k]);
 8000c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000c0e:	4413      	add	r3, r2
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fe1c 	bl	8000850 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8000c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000c1e:	4413      	add	r3, r2
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fe14 	bl	8000850 <LCD_DATA>
				k = k + 2;
 8000c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c2a:	3302      	adds	r3, #2
 8000c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3301      	adds	r3, #1
 8000c32:	61fb      	str	r3, [r7, #28]
 8000c34:	69fa      	ldr	r2, [r7, #28]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	dbe6      	blt.n	8000c0a <LCD_Sprite+0xfe>
		for (int j = 0; j < height; j++) {
 8000c3c:	6a3b      	ldr	r3, [r7, #32]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	623b      	str	r3, [r7, #32]
 8000c42:	6a3a      	ldr	r2, [r7, #32]
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	dbcd      	blt.n	8000be6 <LCD_Sprite+0xda>
			}
		}

	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	4804      	ldr	r0, [pc, #16]	@ (8000c60 <LCD_Sprite+0x154>)
 8000c50:	f005 f80c 	bl	8005c6c <HAL_GPIO_WritePin>
}
 8000c54:	bf00      	nop
 8000c56:	3730      	adds	r7, #48	@ 0x30
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	40020400 	.word	0x40020400

08000c64 <DebugPC>:
static MusicTrack g_music_current = MUS_NONE;

static uint8_t game_initialized = 0;

static void DebugPC(const char* s)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)s, (uint16_t)strlen(s), HAL_MAX_DELAY);
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff fad9 	bl	8000224 <strlen>
 8000c72:	4603      	mov	r3, r0
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	4803      	ldr	r0, [pc, #12]	@ (8000c8c <DebugPC+0x28>)
 8000c7e:	f006 fa0f 	bl	80070a0 <HAL_UART_Transmit>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000ba3c 	.word	0x2000ba3c

08000c90 <StartUart1RxIT>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void StartUart1RxIT(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart1, &uart1_rx_byte, 1);
 8000c94:	2201      	movs	r2, #1
 8000c96:	4903      	ldr	r1, [pc, #12]	@ (8000ca4 <StartUart1RxIT+0x14>)
 8000c98:	4803      	ldr	r0, [pc, #12]	@ (8000ca8 <StartUart1RxIT+0x18>)
 8000c9a:	f006 fa8c 	bl	80071b6 <HAL_UART_Receive_IT>
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	2000ba84 	.word	0x2000ba84
 8000ca8:	2000b9f4 	.word	0x2000b9f4

08000cac <RectsOverlap>:



// ======= UTIL =======
static inline uint8_t RectsOverlap(int ax,int ay,int aw,int ah, int bx,int by,int bw,int bh)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
 8000cb8:	603b      	str	r3, [r7, #0]
  return (ax < bx + bw) && (ax + aw > bx) && (ay < by + bh) && (ay + ah > by);
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	6a3b      	ldr	r3, [r7, #32]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	da13      	bge.n	8000cee <RectsOverlap+0x42>
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4413      	add	r3, r2
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	da0d      	bge.n	8000cee <RectsOverlap+0x42>
 8000cd2:	69fa      	ldr	r2, [r7, #28]
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd6:	4413      	add	r3, r2
 8000cd8:	68ba      	ldr	r2, [r7, #8]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	da07      	bge.n	8000cee <RectsOverlap+0x42>
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	69fa      	ldr	r2, [r7, #28]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	da01      	bge.n	8000cee <RectsOverlap+0x42>
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <RectsOverlap+0x44>
 8000cee:	2300      	movs	r3, #0
 8000cf0:	b2db      	uxtb	r3, r3
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <Audio_SendLine>:

static void Audio_SendLine(const char* line)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b098      	sub	sp, #96	@ 0x60
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if (!line || !*line) return;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d024      	beq.n	8000d58 <Audio_SendLine+0x58>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d020      	beq.n	8000d58 <Audio_SendLine+0x58>
  HAL_UART_Transmit(&huart1, (uint8_t*)line, (uint16_t)strlen(line), 50);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff fa84 	bl	8000224 <strlen>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	2332      	movs	r3, #50	@ 0x32
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	480e      	ldr	r0, [pc, #56]	@ (8000d60 <Audio_SendLine+0x60>)
 8000d26:	f006 f9bb 	bl	80070a0 <HAL_UART_Transmit>
  const char nl = '\n';
 8000d2a:	230a      	movs	r3, #10
 8000d2c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  HAL_UART_Transmit(&huart1, (uint8_t*)&nl, 1, 50);
 8000d30:	f107 015f 	add.w	r1, r7, #95	@ 0x5f
 8000d34:	2332      	movs	r3, #50	@ 0x32
 8000d36:	2201      	movs	r2, #1
 8000d38:	4809      	ldr	r0, [pc, #36]	@ (8000d60 <Audio_SendLine+0x60>)
 8000d3a:	f006 f9b1 	bl	80070a0 <HAL_UART_Transmit>

  char dbg[80];
  snprintf(dbg, sizeof(dbg), "[AUDIO->ESP32] %s\r\n", line);
 8000d3e:	f107 000c 	add.w	r0, r7, #12
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a07      	ldr	r2, [pc, #28]	@ (8000d64 <Audio_SendLine+0x64>)
 8000d46:	2150      	movs	r1, #80	@ 0x50
 8000d48:	f007 fa4e 	bl	80081e8 <sniprintf>
  DebugPC(dbg);
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff87 	bl	8000c64 <DebugPC>
 8000d56:	e000      	b.n	8000d5a <Audio_SendLine+0x5a>
  if (!line || !*line) return;
 8000d58:	bf00      	nop
}
 8000d5a:	3760      	adds	r7, #96	@ 0x60
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	2000b9f4 	.word	0x2000b9f4
 8000d64:	08008b84 	.word	0x08008b84

08000d68 <Audio_Play>:

static void Audio_Play(MusicTrack t)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  if (g_music_current == t) return;
 8000d72:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <Audio_Play+0x54>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	79fa      	ldrb	r2, [r7, #7]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d01a      	beq.n	8000db2 <Audio_Play+0x4a>

  switch (t) {
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d00e      	beq.n	8000da0 <Audio_Play+0x38>
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	dc10      	bgt.n	8000da8 <Audio_Play+0x40>
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d002      	beq.n	8000d90 <Audio_Play+0x28>
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d004      	beq.n	8000d98 <Audio_Play+0x30>
    case MUS_INTRO: Audio_SendLine(AUD_CMD_INTRO); break;
    case MUS_MAP1:  Audio_SendLine(AUD_CMD_MAP1);  break;
    case MUS_MAP2:  Audio_SendLine(AUD_CMD_MAP2);  break;
    default: break;
 8000d8e:	e00b      	b.n	8000da8 <Audio_Play+0x40>
    case MUS_INTRO: Audio_SendLine(AUD_CMD_INTRO); break;
 8000d90:	480b      	ldr	r0, [pc, #44]	@ (8000dc0 <Audio_Play+0x58>)
 8000d92:	f7ff ffb5 	bl	8000d00 <Audio_SendLine>
 8000d96:	e008      	b.n	8000daa <Audio_Play+0x42>
    case MUS_MAP1:  Audio_SendLine(AUD_CMD_MAP1);  break;
 8000d98:	480a      	ldr	r0, [pc, #40]	@ (8000dc4 <Audio_Play+0x5c>)
 8000d9a:	f7ff ffb1 	bl	8000d00 <Audio_SendLine>
 8000d9e:	e004      	b.n	8000daa <Audio_Play+0x42>
    case MUS_MAP2:  Audio_SendLine(AUD_CMD_MAP2);  break;
 8000da0:	4809      	ldr	r0, [pc, #36]	@ (8000dc8 <Audio_Play+0x60>)
 8000da2:	f7ff ffad 	bl	8000d00 <Audio_SendLine>
 8000da6:	e000      	b.n	8000daa <Audio_Play+0x42>
    default: break;
 8000da8:	bf00      	nop
  }
  g_music_current = t;
 8000daa:	4a04      	ldr	r2, [pc, #16]	@ (8000dbc <Audio_Play+0x54>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	7013      	strb	r3, [r2, #0]
 8000db0:	e000      	b.n	8000db4 <Audio_Play+0x4c>
  if (g_music_current == t) return;
 8000db2:	bf00      	nop
}
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	2000d7e1 	.word	0x2000d7e1
 8000dc0:	08008b98 	.word	0x08008b98
 8000dc4:	08008ba4 	.word	0x08008ba4
 8000dc8:	08008bb0 	.word	0x08008bb0

08000dcc <Explo_Spawn>:
  Audio_SendLine(AUD_CMD_STOP);
}

// ======= EXPLOSIONES =======
static void Explo_Spawn(int x, int y)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	@ 0x28
 8000dd0:	af06      	add	r7, sp, #24
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  for (int i=0;i<MAX_EXPLOSIONS;i++){
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	e03f      	b.n	8000e5c <Explo_Spawn+0x90>
    if (!g_explosions[i].active){
 8000ddc:	4a22      	ldr	r2, [pc, #136]	@ (8000e68 <Explo_Spawn+0x9c>)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	011b      	lsls	r3, r3, #4
 8000de2:	4413      	add	r3, r2
 8000de4:	3309      	adds	r3, #9
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d134      	bne.n	8000e56 <Explo_Spawn+0x8a>
      g_explosions[i].active = 1;
 8000dec:	4a1e      	ldr	r2, [pc, #120]	@ (8000e68 <Explo_Spawn+0x9c>)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	011b      	lsls	r3, r3, #4
 8000df2:	4413      	add	r3, r2
 8000df4:	3309      	adds	r3, #9
 8000df6:	2201      	movs	r2, #1
 8000df8:	701a      	strb	r2, [r3, #0]
      g_explosions[i].frame = 0;
 8000dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8000e68 <Explo_Spawn+0x9c>)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	011b      	lsls	r3, r3, #4
 8000e00:	4413      	add	r3, r2
 8000e02:	3308      	adds	r3, #8
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
      g_explosions[i].x = x;
 8000e08:	4a17      	ldr	r2, [pc, #92]	@ (8000e68 <Explo_Spawn+0x9c>)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	011b      	lsls	r3, r3, #4
 8000e0e:	4413      	add	r3, r2
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	601a      	str	r2, [r3, #0]
      g_explosions[i].y = y;
 8000e14:	4a14      	ldr	r2, [pc, #80]	@ (8000e68 <Explo_Spawn+0x9c>)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	011b      	lsls	r3, r3, #4
 8000e1a:	4413      	add	r3, r2
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	683a      	ldr	r2, [r7, #0]
 8000e20:	601a      	str	r2, [r3, #0]
      g_explosions[i].last_ms = HAL_GetTick();
 8000e22:	f004 fbbb 	bl	800559c <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	490f      	ldr	r1, [pc, #60]	@ (8000e68 <Explo_Spawn+0x9c>)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	011b      	lsls	r3, r3, #4
 8000e2e:	440b      	add	r3, r1
 8000e30:	330c      	adds	r3, #12
 8000e32:	601a      	str	r2, [r3, #0]
      // dibuja frame 0 de una
      LCD_Sprite(x, y, EXPLOSION_W, EXPLOSION_H, explosion_tanque, EXPLOSION_COLS, 0, 0, 0);
 8000e34:	2300      	movs	r3, #0
 8000e36:	9304      	str	r3, [sp, #16]
 8000e38:	2300      	movs	r3, #0
 8000e3a:	9303      	str	r3, [sp, #12]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	9302      	str	r3, [sp, #8]
 8000e40:	2303      	movs	r3, #3
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <Explo_Spawn+0xa0>)
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2310      	movs	r3, #16
 8000e4a:	2210      	movs	r2, #16
 8000e4c:	6839      	ldr	r1, [r7, #0]
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff fe5c 	bl	8000b0c <LCD_Sprite>
      return;
 8000e54:	e005      	b.n	8000e62 <Explo_Spawn+0x96>
  for (int i=0;i<MAX_EXPLOSIONS;i++){
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	ddbc      	ble.n	8000ddc <Explo_Spawn+0x10>
    }
  }
}
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	2000d7a0 	.word	0x2000d7a0
 8000e6c:	20002000 	.word	0x20002000

08000e70 <Explo_Kill>:

static void Explo_Kill(Explosion* e)
{
 8000e70:	b5b0      	push	{r4, r5, r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af04      	add	r7, sp, #16
 8000e76:	6078      	str	r0, [r7, #4]
  // Limpiar el área de la explosión
  FillRect(e->x, e->y, EXPLOSION_W, EXPLOSION_H, BG_COLOR);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	4619      	mov	r1, r3
 8000e84:	2300      	movs	r3, #0
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	2310      	movs	r3, #16
 8000e8a:	2210      	movs	r2, #16
 8000e8c:	f7ff fd8a 	bl	80009a4 <FillRect>

  // Redibujar tiles que crucen esa zona
  for (uint16_t i = 0; i < g_current_map.tile_count; i++) {
 8000e90:	2300      	movs	r3, #0
 8000e92:	81fb      	strh	r3, [r7, #14]
 8000e94:	e03b      	b.n	8000f0e <Explo_Kill+0x9e>
    MapTile* t = &g_current_map.tiles[i];
 8000e96:	89fa      	ldrh	r2, [r7, #14]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	1a9b      	subs	r3, r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4a22      	ldr	r2, [pc, #136]	@ (8000f2c <Explo_Kill+0xbc>)
 8000ea2:	4413      	add	r3, r2
 8000ea4:	60bb      	str	r3, [r7, #8]
    if (!t->bitmap) continue;
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d02b      	beq.n	8000f06 <Explo_Kill+0x96>
    if (RectsOverlap(e->x, e->y, EXPLOSION_W, EXPLOSION_H, t->x, t->y, t->w, t->h)) {
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681c      	ldr	r4, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685d      	ldr	r5, [r3, #4]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	6852      	ldr	r2, [r2, #4]
 8000ebe:	68b9      	ldr	r1, [r7, #8]
 8000ec0:	6889      	ldr	r1, [r1, #8]
 8000ec2:	68b8      	ldr	r0, [r7, #8]
 8000ec4:	68c0      	ldr	r0, [r0, #12]
 8000ec6:	9003      	str	r0, [sp, #12]
 8000ec8:	9102      	str	r1, [sp, #8]
 8000eca:	9201      	str	r2, [sp, #4]
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2310      	movs	r3, #16
 8000ed0:	2210      	movs	r2, #16
 8000ed2:	4629      	mov	r1, r5
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	f7ff fee9 	bl	8000cac <RectsOverlap>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d013      	beq.n	8000f08 <Explo_Kill+0x98>
      LCD_Bitmap(t->x, t->y, t->w, t->h, t->bitmap);
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	4619      	mov	r1, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	461c      	mov	r4, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	4623      	mov	r3, r4
 8000f00:	f7ff fdaa 	bl	8000a58 <LCD_Bitmap>
 8000f04:	e000      	b.n	8000f08 <Explo_Kill+0x98>
    if (!t->bitmap) continue;
 8000f06:	bf00      	nop
  for (uint16_t i = 0; i < g_current_map.tile_count; i++) {
 8000f08:	89fb      	ldrh	r3, [r7, #14]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	81fb      	strh	r3, [r7, #14]
 8000f0e:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <Explo_Kill+0xbc>)
 8000f10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f14:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 8000f18:	89fa      	ldrh	r2, [r7, #14]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d3bb      	bcc.n	8000e96 <Explo_Kill+0x26>
    }
  }

  e->active = 0;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	725a      	strb	r2, [r3, #9]
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f2c:	2000bb2c 	.word	0x2000bb2c

08000f30 <Explo_KillAll>:

static void Explo_KillAll(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
  for (int i = 0; i < MAX_EXPLOSIONS; i++) {
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	e011      	b.n	8000f60 <Explo_KillAll+0x30>
    if (g_explosions[i].active) {
 8000f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000f70 <Explo_KillAll+0x40>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	011b      	lsls	r3, r3, #4
 8000f42:	4413      	add	r3, r2
 8000f44:	3309      	adds	r3, #9
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d006      	beq.n	8000f5a <Explo_KillAll+0x2a>
      Explo_Kill(&g_explosions[i]);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	4a07      	ldr	r2, [pc, #28]	@ (8000f70 <Explo_KillAll+0x40>)
 8000f52:	4413      	add	r3, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff8b 	bl	8000e70 <Explo_Kill>
  for (int i = 0; i < MAX_EXPLOSIONS; i++) {
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b03      	cmp	r3, #3
 8000f64:	ddea      	ble.n	8000f3c <Explo_KillAll+0xc>
    }
  }
}
 8000f66:	bf00      	nop
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2000d7a0 	.word	0x2000d7a0

08000f74 <Explo_UpdateAndDrawAll>:


static void Explo_UpdateAndDrawAll(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	@ 0x28
 8000f78:	af06      	add	r7, sp, #24
  uint32_t now = HAL_GetTick();
 8000f7a:	f004 fb0f 	bl	800559c <HAL_GetTick>
 8000f7e:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < MAX_EXPLOSIONS; i++) {
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	e041      	b.n	800100a <Explo_UpdateAndDrawAll+0x96>
    Explosion* e = &g_explosions[i];
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	011b      	lsls	r3, r3, #4
 8000f8a:	4a24      	ldr	r2, [pc, #144]	@ (800101c <Explo_UpdateAndDrawAll+0xa8>)
 8000f8c:	4413      	add	r3, r2
 8000f8e:	607b      	str	r3, [r7, #4]
    if (!e->active) continue;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	7a5b      	ldrb	r3, [r3, #9]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d034      	beq.n	8001002 <Explo_UpdateAndDrawAll+0x8e>

    // Avanzar frames cada EXPLOSION_ANIM_MS hasta el 2 (último)
    if (e->frame < 2 && (now - e->last_ms) >= EXPLOSION_ANIM_MS) {
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	7a1b      	ldrb	r3, [r3, #8]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d80e      	bhi.n	8000fbe <Explo_UpdateAndDrawAll+0x4a>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b45      	cmp	r3, #69	@ 0x45
 8000faa:	d908      	bls.n	8000fbe <Explo_UpdateAndDrawAll+0x4a>
      e->frame++;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	7a1b      	ldrb	r3, [r3, #8]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	721a      	strb	r2, [r3, #8]
      e->last_ms = now; // marca inicio del frame actual
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
    }

    // Dibujar frame actual
    LCD_Sprite(e->x, e->y, EXPLOSION_W, EXPLOSION_H,
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6818      	ldr	r0, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6859      	ldr	r1, [r3, #4]
               explosion_tanque, EXPLOSION_COLS, e->frame, 0, 0);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	7a1b      	ldrb	r3, [r3, #8]
    LCD_Sprite(e->x, e->y, EXPLOSION_W, EXPLOSION_H,
 8000fca:	461a      	mov	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	9304      	str	r3, [sp, #16]
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	9303      	str	r3, [sp, #12]
 8000fd4:	9202      	str	r2, [sp, #8]
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <Explo_UpdateAndDrawAll+0xac>)
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2310      	movs	r3, #16
 8000fe0:	2210      	movs	r2, #16
 8000fe2:	f7ff fd93 	bl	8000b0c <LCD_Sprite>

    // Al llegar al último frame, sostenerlo un ratito y luego limpiar
    if (e->frame == 2 && (now - e->last_ms) >= EXPLOSION_HOLD_MS) {
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7a1b      	ldrb	r3, [r3, #8]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d10a      	bne.n	8001004 <Explo_UpdateAndDrawAll+0x90>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b77      	cmp	r3, #119	@ 0x77
 8000ff8:	d904      	bls.n	8001004 <Explo_UpdateAndDrawAll+0x90>
      Explo_Kill(e);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ff38 	bl	8000e70 <Explo_Kill>
 8001000:	e000      	b.n	8001004 <Explo_UpdateAndDrawAll+0x90>
    if (!e->active) continue;
 8001002:	bf00      	nop
  for (int i = 0; i < MAX_EXPLOSIONS; i++) {
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3301      	adds	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2b03      	cmp	r3, #3
 800100e:	ddba      	ble.n	8000f86 <Explo_UpdateAndDrawAll+0x12>
    }
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000d7a0 	.word	0x2000d7a0
 8001020:	20002000 	.word	0x20002000

08001024 <Bullet_Start>:


// ======= BALAS =============================================
static void Bullet_Start(Bullet* b, int x, int y, Direction dir, uint8_t owner)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	70fb      	strb	r3, [r7, #3]
  b->x = b->prev_x = x;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	68ba      	ldr	r2, [r7, #8]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	601a      	str	r2, [r3, #0]
  b->y = b->prev_y = y;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	605a      	str	r2, [r3, #4]
  b->dir = dir;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	78fa      	ldrb	r2, [r7, #3]
 8001052:	741a      	strb	r2, [r3, #16]
  b->active = 1;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2201      	movs	r2, #1
 8001058:	745a      	strb	r2, [r3, #17]
  b->owner_id = owner;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	7e3a      	ldrb	r2, [r7, #24]
 800105e:	749a      	strb	r2, [r3, #18]
  b->speed = BULLET_SPEED;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2204      	movs	r2, #4
 8001064:	615a      	str	r2, [r3, #20]
  // primer draw
  Bullet_Draw(b);
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f000 f8c2 	bl	80011f0 <Bullet_Draw>
  Bullet_RedrawBushes(b);
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f000 f8e3 	bl	8001238 <Bullet_RedrawBushes>
}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <Bullet_SpawnFromTank>:

static void Bullet_SpawnFromTank(PlayerTank* tank)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af02      	add	r7, sp, #8
 8001082:	6078      	str	r0, [r7, #4]
  Bullet* b = (tank->player_id == 1) ? &g_bullet_p1 : &g_bullet_p2;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7cdb      	ldrb	r3, [r3, #19]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d101      	bne.n	8001090 <Bullet_SpawnFromTank+0x14>
 800108c:	4b21      	ldr	r3, [pc, #132]	@ (8001114 <Bullet_SpawnFromTank+0x98>)
 800108e:	e000      	b.n	8001092 <Bullet_SpawnFromTank+0x16>
 8001090:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <Bullet_SpawnFromTank+0x9c>)
 8001092:	60fb      	str	r3, [r7, #12]
  if (b->active) return; // una bala a la vez por jugador
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	7c5b      	ldrb	r3, [r3, #17]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d137      	bne.n	800110c <Bullet_SpawnFromTank+0x90>

  // salida desde el “cañón” centrado sobre la cara del tanque
  int bx = tank->x + (TANK_SPRITE_SIZE - BULLET_SIZE)/2;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	3305      	adds	r3, #5
 80010a2:	617b      	str	r3, [r7, #20]
  int by = tank->y + (TANK_SPRITE_SIZE - BULLET_SIZE)/2;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	3305      	adds	r3, #5
 80010aa:	613b      	str	r3, [r7, #16]

  switch (tank->dir){
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	7c1b      	ldrb	r3, [r3, #16]
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d81f      	bhi.n	80010f4 <Bullet_SpawnFromTank+0x78>
 80010b4:	a201      	add	r2, pc, #4	@ (adr r2, 80010bc <Bullet_SpawnFromTank+0x40>)
 80010b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ba:	bf00      	nop
 80010bc:	080010cd 	.word	0x080010cd
 80010c0:	080010e1 	.word	0x080010e1
 80010c4:	080010d7 	.word	0x080010d7
 80010c8:	080010eb 	.word	0x080010eb
    case DIR_UP:    by = tank->y - BULLET_SIZE + 1; break;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	3b04      	subs	r3, #4
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	e00e      	b.n	80010f4 <Bullet_SpawnFromTank+0x78>
    case DIR_DOWN:  by = tank->y + TANK_SPRITE_SIZE - 1; break;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	330f      	adds	r3, #15
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	e009      	b.n	80010f4 <Bullet_SpawnFromTank+0x78>
    case DIR_LEFT:  bx = tank->x - BULLET_SIZE + 1; break;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3b04      	subs	r3, #4
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	e004      	b.n	80010f4 <Bullet_SpawnFromTank+0x78>
    case DIR_RIGHT: bx = tank->x + TANK_SPRITE_SIZE - 1; break;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	330f      	adds	r3, #15
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	bf00      	nop
  }

  Bullet_Start(b, bx, by, tank->dir, tank->player_id);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	7c1a      	ldrb	r2, [r3, #16]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7cdb      	ldrb	r3, [r3, #19]
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	4613      	mov	r3, r2
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	6979      	ldr	r1, [r7, #20]
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f7ff ff8d 	bl	8001024 <Bullet_Start>
 800110a:	e000      	b.n	800110e <Bullet_SpawnFromTank+0x92>
  if (b->active) return; // una bala a la vez por jugador
 800110c:	bf00      	nop
}
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000d770 	.word	0x2000d770
 8001118:	2000d788 	.word	0x2000d788

0800111c <Bullet_Erase>:

static void Bullet_Erase(Bullet* b)
{
 800111c:	b5b0      	push	{r4, r5, r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af04      	add	r7, sp, #16
 8001122:	6078      	str	r0, [r7, #4]
  if (b->prev_x==b->x && b->prev_y==b->y) return;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	429a      	cmp	r2, r3
 800112e:	d105      	bne.n	800113c <Bullet_Erase+0x20>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68da      	ldr	r2, [r3, #12]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	429a      	cmp	r2, r3
 800113a:	d053      	beq.n	80011e4 <Bullet_Erase+0xc8>

  FillRect(b->prev_x, b->prev_y, BULLET_SIZE, BULLET_SIZE, BG_COLOR);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	4618      	mov	r0, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	4619      	mov	r1, r3
 8001148:	2300      	movs	r3, #0
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2305      	movs	r3, #5
 800114e:	2205      	movs	r2, #5
 8001150:	f7ff fc28 	bl	80009a4 <FillRect>

  // Redibujar tiles debajo (igual que Tank_Erase)
  for (uint16_t i=0; i<g_current_map.tile_count; i++){
 8001154:	2300      	movs	r3, #0
 8001156:	81fb      	strh	r3, [r7, #14]
 8001158:	e03b      	b.n	80011d2 <Bullet_Erase+0xb6>
    MapTile* t = &g_current_map.tiles[i];
 800115a:	89fa      	ldrh	r2, [r7, #14]
 800115c:	4613      	mov	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	1a9b      	subs	r3, r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4a21      	ldr	r2, [pc, #132]	@ (80011ec <Bullet_Erase+0xd0>)
 8001166:	4413      	add	r3, r2
 8001168:	60bb      	str	r3, [r7, #8]
    if (t->bitmap==NULL) continue;
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d02b      	beq.n	80011ca <Bullet_Erase+0xae>
    if (RectsOverlap(b->prev_x, b->prev_y, BULLET_SIZE, BULLET_SIZE,
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689c      	ldr	r4, [r3, #8]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68dd      	ldr	r5, [r3, #12]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	6852      	ldr	r2, [r2, #4]
 8001182:	68b9      	ldr	r1, [r7, #8]
 8001184:	6889      	ldr	r1, [r1, #8]
 8001186:	68b8      	ldr	r0, [r7, #8]
 8001188:	68c0      	ldr	r0, [r0, #12]
 800118a:	9003      	str	r0, [sp, #12]
 800118c:	9102      	str	r1, [sp, #8]
 800118e:	9201      	str	r2, [sp, #4]
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2305      	movs	r3, #5
 8001194:	2205      	movs	r2, #5
 8001196:	4629      	mov	r1, r5
 8001198:	4620      	mov	r0, r4
 800119a:	f7ff fd87 	bl	8000cac <RectsOverlap>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d013      	beq.n	80011cc <Bullet_Erase+0xb0>
                     t->x, t->y, t->w, t->h)){
      LCD_Bitmap(t->x, t->y, t->w, t->h, t->bitmap);
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	4619      	mov	r1, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	461a      	mov	r2, r3
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	461c      	mov	r4, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	4623      	mov	r3, r4
 80011c4:	f7ff fc48 	bl	8000a58 <LCD_Bitmap>
 80011c8:	e000      	b.n	80011cc <Bullet_Erase+0xb0>
    if (t->bitmap==NULL) continue;
 80011ca:	bf00      	nop
  for (uint16_t i=0; i<g_current_map.tile_count; i++){
 80011cc:	89fb      	ldrh	r3, [r7, #14]
 80011ce:	3301      	adds	r3, #1
 80011d0:	81fb      	strh	r3, [r7, #14]
 80011d2:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <Bullet_Erase+0xd0>)
 80011d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011d8:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 80011dc:	89fa      	ldrh	r2, [r7, #14]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d3bb      	bcc.n	800115a <Bullet_Erase+0x3e>
 80011e2:	e000      	b.n	80011e6 <Bullet_Erase+0xca>
  if (b->prev_x==b->x && b->prev_y==b->y) return;
 80011e4:	bf00      	nop
    }
  }
}
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bdb0      	pop	{r4, r5, r7, pc}
 80011ec:	2000bb2c 	.word	0x2000bb2c

080011f0 <Bullet_Draw>:

static void Bullet_Draw(Bullet* b)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af06      	add	r7, sp, #24
 80011f6:	6078      	str	r0, [r7, #4]
  if (!b->active) return;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7c5b      	ldrb	r3, [r3, #17]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d014      	beq.n	800122a <Bullet_Draw+0x3a>
  LCD_Sprite(b->x, b->y, BULLET_SIZE, BULLET_SIZE, bala, 4, (uint8_t)b->dir, 0, 0);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6859      	ldr	r1, [r3, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	7c1b      	ldrb	r3, [r3, #16]
 800120c:	461a      	mov	r2, r3
 800120e:	2300      	movs	r3, #0
 8001210:	9304      	str	r3, [sp, #16]
 8001212:	2300      	movs	r3, #0
 8001214:	9303      	str	r3, [sp, #12]
 8001216:	9202      	str	r2, [sp, #8]
 8001218:	2304      	movs	r3, #4
 800121a:	9301      	str	r3, [sp, #4]
 800121c:	4b05      	ldr	r3, [pc, #20]	@ (8001234 <Bullet_Draw+0x44>)
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2305      	movs	r3, #5
 8001222:	2205      	movs	r2, #5
 8001224:	f7ff fc72 	bl	8000b0c <LCD_Sprite>
 8001228:	e000      	b.n	800122c <Bullet_Draw+0x3c>
  if (!b->active) return;
 800122a:	bf00      	nop
}
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000b824 	.word	0x2000b824

08001238 <Bullet_RedrawBushes>:

static void Bullet_RedrawBushes(Bullet* b)
{
 8001238:	b5b0      	push	{r4, r5, r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af04      	add	r7, sp, #16
 800123e:	6078      	str	r0, [r7, #4]
  for (uint16_t i=0; i<g_current_map.tile_count; i++){
 8001240:	2300      	movs	r3, #0
 8001242:	81fb      	strh	r3, [r7, #14]
 8001244:	e039      	b.n	80012ba <Bullet_RedrawBushes+0x82>
    MapTile* t = &g_current_map.tiles[i];
 8001246:	89fa      	ldrh	r2, [r7, #14]
 8001248:	4613      	mov	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	1a9b      	subs	r3, r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4a20      	ldr	r2, [pc, #128]	@ (80012d4 <Bullet_RedrawBushes+0x9c>)
 8001252:	4413      	add	r3, r2
 8001254:	60bb      	str	r3, [r7, #8]
    if (t->type == TILE_BUSH){
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	7c1b      	ldrb	r3, [r3, #16]
 800125a:	2b03      	cmp	r3, #3
 800125c:	d12a      	bne.n	80012b4 <Bullet_RedrawBushes+0x7c>
      if (RectsOverlap(b->x, b->y, BULLET_SIZE, BULLET_SIZE, t->x, t->y, t->w, t->h)){
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681c      	ldr	r4, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685d      	ldr	r5, [r3, #4]
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	6852      	ldr	r2, [r2, #4]
 800126e:	68b9      	ldr	r1, [r7, #8]
 8001270:	6889      	ldr	r1, [r1, #8]
 8001272:	68b8      	ldr	r0, [r7, #8]
 8001274:	68c0      	ldr	r0, [r0, #12]
 8001276:	9003      	str	r0, [sp, #12]
 8001278:	9102      	str	r1, [sp, #8]
 800127a:	9201      	str	r2, [sp, #4]
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2305      	movs	r3, #5
 8001280:	2205      	movs	r2, #5
 8001282:	4629      	mov	r1, r5
 8001284:	4620      	mov	r0, r4
 8001286:	f7ff fd11 	bl	8000cac <RectsOverlap>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d011      	beq.n	80012b4 <Bullet_RedrawBushes+0x7c>
        LCD_Bitmap(t->x, t->y, t->w, t->h, t->bitmap);
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	4619      	mov	r1, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	461a      	mov	r2, r3
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	461c      	mov	r4, r3
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	4623      	mov	r3, r4
 80012b0:	f7ff fbd2 	bl	8000a58 <LCD_Bitmap>
  for (uint16_t i=0; i<g_current_map.tile_count; i++){
 80012b4:	89fb      	ldrh	r3, [r7, #14]
 80012b6:	3301      	adds	r3, #1
 80012b8:	81fb      	strh	r3, [r7, #14]
 80012ba:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <Bullet_RedrawBushes+0x9c>)
 80012bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012c0:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 80012c4:	89fa      	ldrh	r2, [r7, #14]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d3bd      	bcc.n	8001246 <Bullet_RedrawBushes+0xe>
      }
    }
  }
}
 80012ca:	bf00      	nop
 80012cc:	bf00      	nop
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bdb0      	pop	{r4, r5, r7, pc}
 80012d4:	2000bb2c 	.word	0x2000bb2c

080012d8 <Bullet_Kill>:

// Mata la bala y limpia rastro en pantalla (previo y actual) y restaura tiles tapados
static void Bullet_Kill(Bullet* b)
{
 80012d8:	b5b0      	push	{r4, r5, r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af04      	add	r7, sp, #16
 80012de:	6078      	str	r0, [r7, #4]
  // Limpia sprite previo y actual
  FillRect(b->prev_x, b->prev_y, BULLET_SIZE, BULLET_SIZE, BG_COLOR);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	4618      	mov	r0, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	4619      	mov	r1, r3
 80012ec:	2300      	movs	r3, #0
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2305      	movs	r3, #5
 80012f2:	2205      	movs	r2, #5
 80012f4:	f7ff fb56 	bl	80009a4 <FillRect>
  FillRect(b->x,      b->y,      BULLET_SIZE, BULLET_SIZE, BG_COLOR);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	4619      	mov	r1, r3
 8001304:	2300      	movs	r3, #0
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2305      	movs	r3, #5
 800130a:	2205      	movs	r2, #5
 800130c:	f7ff fb4a 	bl	80009a4 <FillRect>

  // Redibuja cualquier tile que cruce estas zonas (como en Bullet_Erase)
  for (uint16_t i=0; i<g_current_map.tile_count; i++){
 8001310:	2300      	movs	r3, #0
 8001312:	81fb      	strh	r3, [r7, #14]
 8001314:	e054      	b.n	80013c0 <Bullet_Kill+0xe8>
    MapTile* t = &g_current_map.tiles[i];
 8001316:	89fa      	ldrh	r2, [r7, #14]
 8001318:	4613      	mov	r3, r2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	1a9b      	subs	r3, r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4a2f      	ldr	r2, [pc, #188]	@ (80013e0 <Bullet_Kill+0x108>)
 8001322:	4413      	add	r3, r2
 8001324:	60bb      	str	r3, [r7, #8]
    if (!t->bitmap) continue;
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d044      	beq.n	80013b8 <Bullet_Kill+0xe0>

    if (RectsOverlap(b->prev_x, b->prev_y, BULLET_SIZE, BULLET_SIZE, t->x, t->y, t->w, t->h) ||
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689c      	ldr	r4, [r3, #8]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68dd      	ldr	r5, [r3, #12]
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	6852      	ldr	r2, [r2, #4]
 800133e:	68b9      	ldr	r1, [r7, #8]
 8001340:	6889      	ldr	r1, [r1, #8]
 8001342:	68b8      	ldr	r0, [r7, #8]
 8001344:	68c0      	ldr	r0, [r0, #12]
 8001346:	9003      	str	r0, [sp, #12]
 8001348:	9102      	str	r1, [sp, #8]
 800134a:	9201      	str	r2, [sp, #4]
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2305      	movs	r3, #5
 8001350:	2205      	movs	r2, #5
 8001352:	4629      	mov	r1, r5
 8001354:	4620      	mov	r0, r4
 8001356:	f7ff fca9 	bl	8000cac <RectsOverlap>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d118      	bne.n	8001392 <Bullet_Kill+0xba>
        RectsOverlap(b->x,      b->y,      BULLET_SIZE, BULLET_SIZE, t->x, t->y, t->w, t->h)) {
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681c      	ldr	r4, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685d      	ldr	r5, [r3, #4]
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	6852      	ldr	r2, [r2, #4]
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	6889      	ldr	r1, [r1, #8]
 8001374:	68b8      	ldr	r0, [r7, #8]
 8001376:	68c0      	ldr	r0, [r0, #12]
 8001378:	9003      	str	r0, [sp, #12]
 800137a:	9102      	str	r1, [sp, #8]
 800137c:	9201      	str	r2, [sp, #4]
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	2305      	movs	r3, #5
 8001382:	2205      	movs	r2, #5
 8001384:	4629      	mov	r1, r5
 8001386:	4620      	mov	r0, r4
 8001388:	f7ff fc90 	bl	8000cac <RectsOverlap>
 800138c:	4603      	mov	r3, r0
    if (RectsOverlap(b->prev_x, b->prev_y, BULLET_SIZE, BULLET_SIZE, t->x, t->y, t->w, t->h) ||
 800138e:	2b00      	cmp	r3, #0
 8001390:	d013      	beq.n	80013ba <Bullet_Kill+0xe2>
      LCD_Bitmap(t->x, t->y, t->w, t->h, t->bitmap);
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	4619      	mov	r1, r3
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	461a      	mov	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	461c      	mov	r4, r3
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	4623      	mov	r3, r4
 80013b2:	f7ff fb51 	bl	8000a58 <LCD_Bitmap>
 80013b6:	e000      	b.n	80013ba <Bullet_Kill+0xe2>
    if (!t->bitmap) continue;
 80013b8:	bf00      	nop
  for (uint16_t i=0; i<g_current_map.tile_count; i++){
 80013ba:	89fb      	ldrh	r3, [r7, #14]
 80013bc:	3301      	adds	r3, #1
 80013be:	81fb      	strh	r3, [r7, #14]
 80013c0:	4b07      	ldr	r3, [pc, #28]	@ (80013e0 <Bullet_Kill+0x108>)
 80013c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013c6:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 80013ca:	89fa      	ldrh	r2, [r7, #14]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d3a2      	bcc.n	8001316 <Bullet_Kill+0x3e>
    }
  }

  b->active = 0;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	745a      	strb	r2, [r3, #17]
}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bdb0      	pop	{r4, r5, r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000bb2c 	.word	0x2000bb2c

080013e4 <Bullet_CheckHitTank>:


static uint8_t Bullet_CheckHitTank(Bullet* b, PlayerTank* target)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b087      	sub	sp, #28
 80013e8:	af04      	add	r7, sp, #16
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  if (!target->alive) return 0;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	7d1b      	ldrb	r3, [r3, #20]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <Bullet_CheckHitTank+0x16>
 80013f6:	2300      	movs	r3, #0
 80013f8:	e038      	b.n	800146c <Bullet_CheckHitTank+0x88>

  if (RectsOverlap(b->x, b->y, BULLET_SIZE, BULLET_SIZE,
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6818      	ldr	r0, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6859      	ldr	r1, [r3, #4]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	6852      	ldr	r2, [r2, #4]
 800140a:	2410      	movs	r4, #16
 800140c:	9403      	str	r4, [sp, #12]
 800140e:	2410      	movs	r4, #16
 8001410:	9402      	str	r4, [sp, #8]
 8001412:	9201      	str	r2, [sp, #4]
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2305      	movs	r3, #5
 8001418:	2205      	movs	r2, #5
 800141a:	f7ff fc47 	bl	8000cac <RectsOverlap>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d022      	beq.n	800146a <Bullet_CheckHitTank+0x86>
                   target->x, target->y, TANK_SPRITE_SIZE, TANK_SPRITE_SIZE)){
    // Explosión sobre el tanque, “muerte”
    Explo_Spawn(target->x, target->y);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4619      	mov	r1, r3
 800142e:	4610      	mov	r0, r2
 8001430:	f7ff fccc 	bl	8000dcc <Explo_Spawn>
    FillRect(target->x, target->y, TANK_SPRITE_SIZE, TANK_SPRITE_SIZE, BG_COLOR);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	4619      	mov	r1, r3
 8001440:	2300      	movs	r3, #0
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	2310      	movs	r3, #16
 8001446:	2210      	movs	r2, #16
 8001448:	f7ff faac 	bl	80009a4 <FillRect>
    target->alive = 0;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2200      	movs	r2, #0
 8001450:	751a      	strb	r2, [r3, #20]

    // Borro la bala ya mismo para no tapar la animación (idempotente si se vuelve a llamar)
    Bullet_Kill(b);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ff40 	bl	80012d8 <Bullet_Kill>

    // Espera corta para que se vea la explosión y luego muestra ganador
    Win_PlayExplosionThenShow(450, b->owner_id);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	7c9b      	ldrb	r3, [r3, #18]
 800145c:	4619      	mov	r1, r3
 800145e:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8001462:	f003 fab7 	bl	80049d4 <Win_PlayExplosionThenShow>

    return 1;
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <Bullet_CheckHitTank+0x88>
  }
  return 0;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bd90      	pop	{r4, r7, pc}

08001474 <Bullet_CheckCollision>:

static uint8_t Bullet_CheckCollision(Bullet* b, MapTile** out_tile)
{
 8001474:	b5b0      	push	{r4, r5, r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af04      	add	r7, sp, #16
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  // Bordes de pantalla
  if (b->x < GAME_MIN_X || b->x + BULLET_SIZE > LCD_W ||
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	db0c      	blt.n	80014a0 <Bullet_CheckCollision+0x2c>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f5b3 7f9e 	cmp.w	r3, #316	@ 0x13c
 800148e:	da07      	bge.n	80014a0 <Bullet_CheckCollision+0x2c>
      b->y < GAME_MIN_Y || b->y + BULLET_SIZE > LCD_H){
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
  if (b->x < GAME_MIN_X || b->x + BULLET_SIZE > LCD_W ||
 8001494:	2b00      	cmp	r3, #0
 8001496:	db03      	blt.n	80014a0 <Bullet_CheckCollision+0x2c>
      b->y < GAME_MIN_Y || b->y + BULLET_SIZE > LCD_H){
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2beb      	cmp	r3, #235	@ 0xeb
 800149e:	dd04      	ble.n	80014aa <Bullet_CheckCollision+0x36>
    *out_tile = NULL;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
    return 1; // colisión con borde
 80014a6:	2301      	movs	r3, #1
 80014a8:	e042      	b.n	8001530 <Bullet_CheckCollision+0xbc>
  }

  // Tiles
  for (uint16_t i=0; i<g_current_map.tile_count; i++){
 80014aa:	2300      	movs	r3, #0
 80014ac:	81fb      	strh	r3, [r7, #14]
 80014ae:	e033      	b.n	8001518 <Bullet_CheckCollision+0xa4>
    MapTile* t = &g_current_map.tiles[i];
 80014b0:	89fa      	ldrh	r2, [r7, #14]
 80014b2:	4613      	mov	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	1a9b      	subs	r3, r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001538 <Bullet_CheckCollision+0xc4>)
 80014bc:	4413      	add	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]

    // arbusto no bloquea bala
    if (t->type == TILE_BUSH) continue;
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	7c1b      	ldrb	r3, [r3, #16]
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	d021      	beq.n	800150c <Bullet_CheckCollision+0x98>
    if (t->type == TILE_EMPTY) continue;
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	7c1b      	ldrb	r3, [r3, #16]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d01f      	beq.n	8001510 <Bullet_CheckCollision+0x9c>

    if (RectsOverlap(b->x, b->y, BULLET_SIZE, BULLET_SIZE,
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681c      	ldr	r4, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685d      	ldr	r5, [r3, #4]
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	6852      	ldr	r2, [r2, #4]
 80014e0:	68b9      	ldr	r1, [r7, #8]
 80014e2:	6889      	ldr	r1, [r1, #8]
 80014e4:	68b8      	ldr	r0, [r7, #8]
 80014e6:	68c0      	ldr	r0, [r0, #12]
 80014e8:	9003      	str	r0, [sp, #12]
 80014ea:	9102      	str	r1, [sp, #8]
 80014ec:	9201      	str	r2, [sp, #4]
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2305      	movs	r3, #5
 80014f2:	2205      	movs	r2, #5
 80014f4:	4629      	mov	r1, r5
 80014f6:	4620      	mov	r0, r4
 80014f8:	f7ff fbd8 	bl	8000cac <RectsOverlap>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d007      	beq.n	8001512 <Bullet_CheckCollision+0x9e>
                     t->x, t->y, t->w, t->h)){

      *out_tile = t;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	601a      	str	r2, [r3, #0]
      return 1;
 8001508:	2301      	movs	r3, #1
 800150a:	e011      	b.n	8001530 <Bullet_CheckCollision+0xbc>
    if (t->type == TILE_BUSH) continue;
 800150c:	bf00      	nop
 800150e:	e000      	b.n	8001512 <Bullet_CheckCollision+0x9e>
    if (t->type == TILE_EMPTY) continue;
 8001510:	bf00      	nop
  for (uint16_t i=0; i<g_current_map.tile_count; i++){
 8001512:	89fb      	ldrh	r3, [r7, #14]
 8001514:	3301      	adds	r3, #1
 8001516:	81fb      	strh	r3, [r7, #14]
 8001518:	4b07      	ldr	r3, [pc, #28]	@ (8001538 <Bullet_CheckCollision+0xc4>)
 800151a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800151e:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 8001522:	89fa      	ldrh	r2, [r7, #14]
 8001524:	429a      	cmp	r2, r3
 8001526:	d3c3      	bcc.n	80014b0 <Bullet_CheckCollision+0x3c>
    }
  }

  *out_tile = NULL;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
  return 0;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bdb0      	pop	{r4, r5, r7, pc}
 8001538:	2000bb2c 	.word	0x2000bb2c

0800153c <Map_DestroyAround>:

static void Map_DestroyAround(int cx, int cy, Direction dir)
{
 800153c:	b590      	push	{r4, r7, lr}
 800153e:	b097      	sub	sp, #92	@ 0x5c
 8001540:	af04      	add	r7, sp, #16
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	4613      	mov	r3, r2
 8001548:	71fb      	strb	r3, [r7, #7]
  // Área base del impacto (puedes ajustar los defines HITBOX_* si quieres)
  int w = (dir==DIR_UP || dir==DIR_DOWN) ? HITBOX_VERT_W : HITBOX_HORZ_W;
 800154a:	2308      	movs	r3, #8
 800154c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int h = (dir==DIR_LEFT || dir==DIR_RIGHT) ? HITBOX_HORZ_H : HITBOX_VERT_H;
 800154e:	2308      	movs	r3, #8
 8001550:	62bb      	str	r3, [r7, #40]	@ 0x28

  int x0 = cx - w/2;
 8001552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001554:	0fda      	lsrs	r2, r3, #31
 8001556:	4413      	add	r3, r2
 8001558:	105b      	asrs	r3, r3, #1
 800155a:	425b      	negs	r3, r3
 800155c:	461a      	mov	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4413      	add	r3, r2
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
  int y0 = cy - h/2;
 8001564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001566:	0fda      	lsrs	r2, r3, #31
 8001568:	4413      	add	r3, r2
 800156a:	105b      	asrs	r3, r3, #1
 800156c:	425b      	negs	r3, r3
 800156e:	461a      	mov	r2, r3
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	4413      	add	r3, r2
 8001574:	623b      	str	r3, [r7, #32]

  // --- Bounding box de TODO lo limpiado (ladrillos impactados + zona base)
  int minx = x0, miny = y0;
 8001576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001578:	647b      	str	r3, [r7, #68]	@ 0x44
 800157a:	6a3b      	ldr	r3, [r7, #32]
 800157c:	643b      	str	r3, [r7, #64]	@ 0x40
  int maxx = x0 + w, maxy = y0 + h;
 800157e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001582:	4413      	add	r3, r2
 8001584:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001586:	6a3a      	ldr	r2, [r7, #32]
 8001588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158a:	4413      	add	r3, r2
 800158c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t any_cleared = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  // 1) Eliminar TODOS los ladrillos que intersecten el área y ampliar la bbox
  for (uint16_t i=0; i<g_current_map.tile_count; i++){
 8001594:	2300      	movs	r3, #0
 8001596:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001598:	e071      	b.n	800167e <Map_DestroyAround+0x142>
    MapTile* t = &g_current_map.tiles[i];
 800159a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800159c:	4613      	mov	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	1a9b      	subs	r3, r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4a7b      	ldr	r2, [pc, #492]	@ (8001794 <Map_DestroyAround+0x258>)
 80015a6:	4413      	add	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
    if (t->type != TILE_BRICK) continue;
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	7c1b      	ldrb	r3, [r3, #16]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d161      	bne.n	8001676 <Map_DestroyAround+0x13a>

    if (RectsOverlap(x0, y0, w, h, t->x, t->y, t->w, t->h)){
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	6852      	ldr	r2, [r2, #4]
 80015ba:	6939      	ldr	r1, [r7, #16]
 80015bc:	6889      	ldr	r1, [r1, #8]
 80015be:	6938      	ldr	r0, [r7, #16]
 80015c0:	68c0      	ldr	r0, [r0, #12]
 80015c2:	9003      	str	r0, [sp, #12]
 80015c4:	9102      	str	r1, [sp, #8]
 80015c6:	9201      	str	r2, [sp, #4]
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015ce:	6a39      	ldr	r1, [r7, #32]
 80015d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015d2:	f7ff fb6b 	bl	8000cac <RectsOverlap>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d04d      	beq.n	8001678 <Map_DestroyAround+0x13c>
      // Limpiar ladrillo
      FillRect(t->x, t->y, t->w, t->h, BG_COLOR);
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4619      	mov	r1, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	461a      	mov	r2, r3
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	461c      	mov	r4, r3
 80015f4:	2300      	movs	r3, #0
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	4623      	mov	r3, r4
 80015fa:	f7ff f9d3 	bl	80009a4 <FillRect>

      // Ampliar la caja envolvente con el rect del ladrillo borrado
      if (t->x < minx) minx = t->x;
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001604:	429a      	cmp	r2, r3
 8001606:	dd02      	ble.n	800160e <Map_DestroyAround+0xd2>
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (t->y < miny) miny = t->y;
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001614:	429a      	cmp	r2, r3
 8001616:	dd02      	ble.n	800161e <Map_DestroyAround+0xe2>
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	643b      	str	r3, [r7, #64]	@ 0x40
      if (t->x + t->w > maxx) maxx = t->x + t->w;
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	4413      	add	r3, r2
 8001628:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800162a:	429a      	cmp	r2, r3
 800162c:	da05      	bge.n	800163a <Map_DestroyAround+0xfe>
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	4413      	add	r3, r2
 8001638:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if (t->y + t->h > maxy) maxy = t->y + t->h;
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	4413      	add	r3, r2
 8001644:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001646:	429a      	cmp	r2, r3
 8001648:	da05      	bge.n	8001656 <Map_DestroyAround+0x11a>
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	4413      	add	r3, r2
 8001654:	63bb      	str	r3, [r7, #56]	@ 0x38

      any_cleared = 1;
 8001656:	2301      	movs	r3, #1
 8001658:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

      // Vaciar el tile en el mapa
      t->type = TILE_EMPTY;
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	2200      	movs	r2, #0
 8001660:	741a      	strb	r2, [r3, #16]
      t->destructible = 0;
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	2200      	movs	r2, #0
 8001666:	745a      	strb	r2, [r3, #17]
      t->passable = 1;
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	2201      	movs	r2, #1
 800166c:	749a      	strb	r2, [r3, #18]
      t->bitmap = NULL;
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
 8001674:	e000      	b.n	8001678 <Map_DestroyAround+0x13c>
    if (t->type != TILE_BRICK) continue;
 8001676:	bf00      	nop
  for (uint16_t i=0; i<g_current_map.tile_count; i++){
 8001678:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800167a:	3301      	adds	r3, #1
 800167c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800167e:	4b45      	ldr	r3, [pc, #276]	@ (8001794 <Map_DestroyAround+0x258>)
 8001680:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001684:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 8001688:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800168a:	429a      	cmp	r2, r3
 800168c:	d385      	bcc.n	800159a <Map_DestroyAround+0x5e>
    }
  }

  // Si no se borró ningún ladrillo, igual consideramos la zona base del impacto.
  // (Esto ayuda en bordes de ladrillos donde el impacto cae casi fuera)
  if (!any_cleared){
 800168e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10b      	bne.n	80016ae <Map_DestroyAround+0x172>
    // Expandimos 1px para cubrir solapes sutiles
    minx -= 1; miny -= 1; maxx += 1; maxy += 1;
 8001696:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001698:	3b01      	subs	r3, #1
 800169a:	647b      	str	r3, [r7, #68]	@ 0x44
 800169c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800169e:	3b01      	subs	r3, #1
 80016a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80016a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016a4:	3301      	adds	r3, #1
 80016a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016aa:	3301      	adds	r3, #1
 80016ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  }

  // Normalizar dimensiones de la bbox
  if (minx < 0) minx = 0;
 80016ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	da01      	bge.n	80016b8 <Map_DestroyAround+0x17c>
 80016b4:	2300      	movs	r3, #0
 80016b6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (miny < 0) miny = 0;
 80016b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	da01      	bge.n	80016c2 <Map_DestroyAround+0x186>
 80016be:	2300      	movs	r3, #0
 80016c0:	643b      	str	r3, [r7, #64]	@ 0x40
  if (maxx > LCD_W) maxx = LCD_W;
 80016c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016c4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80016c8:	dd02      	ble.n	80016d0 <Map_DestroyAround+0x194>
 80016ca:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80016ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (maxy > LCD_H) maxy = LCD_H;
 80016d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016d2:	2bf0      	cmp	r3, #240	@ 0xf0
 80016d4:	dd01      	ble.n	80016da <Map_DestroyAround+0x19e>
 80016d6:	23f0      	movs	r3, #240	@ 0xf0
 80016d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  int rw = (maxx - minx);
 80016da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	61fb      	str	r3, [r7, #28]
  int rh = (maxy - miny);
 80016e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80016e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	61bb      	str	r3, [r7, #24]
  if (rw <= 0 || rh <= 0) return;
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	dd4c      	ble.n	800178a <Map_DestroyAround+0x24e>
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	dd49      	ble.n	800178a <Map_DestroyAround+0x24e>

  // 2) Redibujar cualquier tile NO vacío que cruce la bbox (águila, acero, arbusto, etc.)
  for (uint16_t i=0; i<g_current_map.tile_count; i++){
 80016f6:	2300      	movs	r3, #0
 80016f8:	867b      	strh	r3, [r7, #50]	@ 0x32
 80016fa:	e03d      	b.n	8001778 <Map_DestroyAround+0x23c>
    MapTile* t = &g_current_map.tiles[i];
 80016fc:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80016fe:	4613      	mov	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	1a9b      	subs	r3, r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4a23      	ldr	r2, [pc, #140]	@ (8001794 <Map_DestroyAround+0x258>)
 8001708:	4413      	add	r3, r2
 800170a:	617b      	str	r3, [r7, #20]

    if (t->type == TILE_EMPTY) continue;   // los ladrillos borrados ya no se redibujan
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	7c1b      	ldrb	r3, [r3, #16]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d02b      	beq.n	800176c <Map_DestroyAround+0x230>
    if (!t->bitmap) continue;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d029      	beq.n	8001770 <Map_DestroyAround+0x234>

    if (RectsOverlap(minx, miny, rw, rh, t->x, t->y, t->w, t->h)){
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	6852      	ldr	r2, [r2, #4]
 8001724:	6979      	ldr	r1, [r7, #20]
 8001726:	6889      	ldr	r1, [r1, #8]
 8001728:	6978      	ldr	r0, [r7, #20]
 800172a:	68c0      	ldr	r0, [r0, #12]
 800172c:	9003      	str	r0, [sp, #12]
 800172e:	9102      	str	r1, [sp, #8]
 8001730:	9201      	str	r2, [sp, #4]
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	69fa      	ldr	r2, [r7, #28]
 8001738:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800173a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800173c:	f7ff fab6 	bl	8000cac <RectsOverlap>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d015      	beq.n	8001772 <Map_DestroyAround+0x236>
      // Redibuja el tile completo para evitar “bordes mordidos”
      LCD_Bitmap(t->x, t->y, t->w, t->h, t->bitmap);
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4619      	mov	r1, r3
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	461a      	mov	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	461c      	mov	r4, r3
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	4623      	mov	r3, r4
 8001766:	f7ff f977 	bl	8000a58 <LCD_Bitmap>
 800176a:	e002      	b.n	8001772 <Map_DestroyAround+0x236>
    if (t->type == TILE_EMPTY) continue;   // los ladrillos borrados ya no se redibujan
 800176c:	bf00      	nop
 800176e:	e000      	b.n	8001772 <Map_DestroyAround+0x236>
    if (!t->bitmap) continue;
 8001770:	bf00      	nop
  for (uint16_t i=0; i<g_current_map.tile_count; i++){
 8001772:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001774:	3301      	adds	r3, #1
 8001776:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <Map_DestroyAround+0x258>)
 800177a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800177e:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 8001782:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8001784:	429a      	cmp	r2, r3
 8001786:	d3b9      	bcc.n	80016fc <Map_DestroyAround+0x1c0>
 8001788:	e000      	b.n	800178c <Map_DestroyAround+0x250>
  if (rw <= 0 || rh <= 0) return;
 800178a:	bf00      	nop
    }
  }
}
 800178c:	374c      	adds	r7, #76	@ 0x4c
 800178e:	46bd      	mov	sp, r7
 8001790:	bd90      	pop	{r4, r7, pc}
 8001792:	bf00      	nop
 8001794:	2000bb2c 	.word	0x2000bb2c

08001798 <Bullet_Update>:



static void Bullet_Update(Bullet* b)
{
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b08b      	sub	sp, #44	@ 0x2c
 800179c:	af02      	add	r7, sp, #8
 800179e:	6078      	str	r0, [r7, #4]
  if (!b->active) return;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	7c5b      	ldrb	r3, [r3, #17]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 80be 	beq.w	8001926 <Bullet_Update+0x18e>

  // Borrar rastro anterior
  Bullet_Erase(b);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff fcb6 	bl	800111c <Bullet_Erase>

  // Guardar prev
  b->prev_x = b->x;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	609a      	str	r2, [r3, #8]
  b->prev_y = b->y;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	60da      	str	r2, [r3, #12]

  // Avanzar
  switch (b->dir){
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7c1b      	ldrb	r3, [r3, #16]
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d82b      	bhi.n	8001820 <Bullet_Update+0x88>
 80017c8:	a201      	add	r2, pc, #4	@ (adr r2, 80017d0 <Bullet_Update+0x38>)
 80017ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ce:	bf00      	nop
 80017d0:	080017e1 	.word	0x080017e1
 80017d4:	08001801 	.word	0x08001801
 80017d8:	080017f1 	.word	0x080017f1
 80017dc:	08001811 	.word	0x08001811
    case DIR_UP:    b->y -= b->speed; break;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	1ad2      	subs	r2, r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	e017      	b.n	8001820 <Bullet_Update+0x88>
    case DIR_DOWN:  b->y += b->speed; break;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	441a      	add	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	e00f      	b.n	8001820 <Bullet_Update+0x88>
    case DIR_LEFT:  b->x -= b->speed; break;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	1ad2      	subs	r2, r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	e007      	b.n	8001820 <Bullet_Update+0x88>
    case DIR_RIGHT: b->x += b->speed; break;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	441a      	add	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	bf00      	nop
  }

  // Colisión con tanques (no te mates a ti mismo)
  PlayerTank* enemy = (b->owner_id==1) ? &g_player2_tank : &g_player1_tank;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7c9b      	ldrb	r3, [r3, #18]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d101      	bne.n	800182c <Bullet_Update+0x94>
 8001828:	4b41      	ldr	r3, [pc, #260]	@ (8001930 <Bullet_Update+0x198>)
 800182a:	e000      	b.n	800182e <Bullet_Update+0x96>
 800182c:	4b41      	ldr	r3, [pc, #260]	@ (8001934 <Bullet_Update+0x19c>)
 800182e:	61fb      	str	r3, [r7, #28]
  if (Bullet_CheckHitTank(b, enemy)){
 8001830:	69f9      	ldr	r1, [r7, #28]
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff fdd6 	bl	80013e4 <Bullet_CheckHitTank>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <Bullet_Update+0xae>
    Bullet_Kill(b);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff fd4a 	bl	80012d8 <Bullet_Kill>
    return;
 8001844:	e070      	b.n	8001928 <Bullet_Update+0x190>
  }

  // Colisión con mapa/bordes
  MapTile* hit = NULL;
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
  if (Bullet_CheckCollision(b, &hit)){
 800184a:	f107 030c 	add.w	r3, r7, #12
 800184e:	4619      	mov	r1, r3
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff fe0f 	bl	8001474 <Bullet_CheckCollision>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d05d      	beq.n	8001918 <Bullet_Update+0x180>
    // si pegó al borde o tile
    if (hit == NULL){
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d103      	bne.n	800186a <Bullet_Update+0xd2>
      // borde: solo destruir bala
      Bullet_Kill(b);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff fd38 	bl	80012d8 <Bullet_Kill>
      return;
 8001868:	e05e      	b.n	8001928 <Bullet_Update+0x190>
    }

    if (hit->type == TILE_STEEL){
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	7c1b      	ldrb	r3, [r3, #16]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d103      	bne.n	800187a <Bullet_Update+0xe2>
      // acero: no destruye el bloque
      Bullet_Kill(b);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff fd30 	bl	80012d8 <Bullet_Kill>
      return;
 8001878:	e056      	b.n	8001928 <Bullet_Update+0x190>
    }

    if (hit->type == TILE_BRICK){
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	7c1b      	ldrb	r3, [r3, #16]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d112      	bne.n	80018a8 <Bullet_Update+0x110>
      // ladrillo: destruir área según dirección y eliminar bala
      // centro del impacto ~ centro de la bala
      int cx = b->x + BULLET_SIZE/2;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	3302      	adds	r3, #2
 8001888:	617b      	str	r3, [r7, #20]
      int cy = b->y + BULLET_SIZE/2;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	3302      	adds	r3, #2
 8001890:	613b      	str	r3, [r7, #16]
      Map_DestroyAround(cx, cy, b->dir);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	7c1b      	ldrb	r3, [r3, #16]
 8001896:	461a      	mov	r2, r3
 8001898:	6939      	ldr	r1, [r7, #16]
 800189a:	6978      	ldr	r0, [r7, #20]
 800189c:	f7ff fe4e 	bl	800153c <Map_DestroyAround>
      Bullet_Kill(b);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff fd19 	bl	80012d8 <Bullet_Kill>
      return;
 80018a6:	e03f      	b.n	8001928 <Bullet_Update+0x190>
    }

    if (hit->type == TILE_BASE){
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	7c1b      	ldrb	r3, [r3, #16]
 80018ac:	2b05      	cmp	r3, #5
 80018ae:	d12f      	bne.n	8001910 <Bullet_Update+0x178>
      // águila: explosión y “destruida”
      Explo_Spawn(hit->x, hit->y);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	4619      	mov	r1, r3
 80018ba:	4610      	mov	r0, r2
 80018bc:	f7ff fa86 	bl	8000dcc <Explo_Spawn>
      // Puedes marcarla destruida:
      hit->type = TILE_BASE_DESTROYED;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2206      	movs	r2, #6
 80018c4:	741a      	strb	r2, [r3, #16]
      // limpiar águila (si no tienes sprite destruida)
      FillRect(hit->x, hit->y, hit->w, hit->h, BG_COLOR);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	4619      	mov	r1, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	461c      	mov	r4, r3
 80018de:	2300      	movs	r3, #0
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	4623      	mov	r3, r4
 80018e4:	f7ff f85e 	bl	80009a4 <FillRect>
      Bullet_Kill(b);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff fcf5 	bl	80012d8 <Bullet_Kill>

      // --- VICTORIA POR ÁGUILA ---
      // Si destruye su propia base, gana el otro; si destruye la del otro, gana el tirador.
      uint8_t base_owner = hit->owner_id;          // 1 ó 2
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	7e1b      	ldrb	r3, [r3, #24]
 80018f2:	76fb      	strb	r3, [r7, #27]
      uint8_t winner = (base_owner == 1) ? 2 : 1;  // el contrario
 80018f4:	7efb      	ldrb	r3, [r7, #27]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <Bullet_Update+0x166>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e000      	b.n	8001900 <Bullet_Update+0x168>
 80018fe:	2301      	movs	r3, #1
 8001900:	76bb      	strb	r3, [r7, #26]

      // Pausa breve para que se vea la explosión de la base
      Win_PlayExplosionThenShow(450, winner);
 8001902:	7ebb      	ldrb	r3, [r7, #26]
 8001904:	4619      	mov	r1, r3
 8001906:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 800190a:	f003 f863 	bl	80049d4 <Win_PlayExplosionThenShow>

      return;
 800190e:	e00b      	b.n	8001928 <Bullet_Update+0x190>
    }

    // otros: por seguridad solo destruimos bala
    Bullet_Kill(b);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff fce1 	bl	80012d8 <Bullet_Kill>
    return;
 8001916:	e007      	b.n	8001928 <Bullet_Update+0x190>
  }

  // Sin colisión: dibujar y respetar arbustos al frente
  Bullet_Draw(b);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff fc69 	bl	80011f0 <Bullet_Draw>
  Bullet_RedrawBushes(b);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff fc8a 	bl	8001238 <Bullet_RedrawBushes>
 8001924:	e000      	b.n	8001928 <Bullet_Update+0x190>
  if (!b->active) return;
 8001926:	bf00      	nop
}
 8001928:	3724      	adds	r7, #36	@ 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd90      	pop	{r4, r7, pc}
 800192e:	bf00      	nop
 8001930:	2000d750 	.word	0x2000d750
 8001934:	2000d730 	.word	0x2000d730

08001938 <Map_Clear>:


// ===== FUNCIONES DE MANEJO DE MAPAS =====

static void Map_Clear(GameMap* map)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  map->tile_count = 0;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001946:	2200      	movs	r2, #0
 8001948:	f8a3 2c00 	strh.w	r2, [r3, #3072]	@ 0xc00
  map->map_id = 0;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2c02 	strb.w	r2, [r3, #3074]	@ 0xc02
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <Map_AddTile>:

static void Map_AddTile(GameMap* map, int x, int y, int w, int h,
                        TileType type, uint8_t destructible,
                        uint8_t passable, const uint8_t* bitmap)
{
 8001964:	b480      	push	{r7}
 8001966:	b087      	sub	sp, #28
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
 8001970:	603b      	str	r3, [r7, #0]
  if (map->tile_count >= 256) return;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001978:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 800197c:	2bff      	cmp	r3, #255	@ 0xff
 800197e:	d832      	bhi.n	80019e6 <Map_AddTile+0x82>

  MapTile* t = &map->tiles[map->tile_count++];
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001986:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	b291      	uxth	r1, r2
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001994:	f8a2 1c00 	strh.w	r1, [r2, #3072]	@ 0xc00
 8001998:	461a      	mov	r2, r3
 800199a:	4613      	mov	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	1a9b      	subs	r3, r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	4413      	add	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]
  t->x = x;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	601a      	str	r2, [r3, #0]
  t->y = y;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	605a      	str	r2, [r3, #4]
  t->w = w;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	609a      	str	r2, [r3, #8]
  t->h = h;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	6a3a      	ldr	r2, [r7, #32]
 80019be:	60da      	str	r2, [r3, #12]
  t->type = type;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80019c6:	741a      	strb	r2, [r3, #16]
  t->destructible = destructible;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80019ce:	745a      	strb	r2, [r3, #17]
  t->passable = passable;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80019d6:	749a      	strb	r2, [r3, #18]
  t->bitmap = bitmap;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019dc:	615a      	str	r2, [r3, #20]
  t->owner_id = 0; // por defecto
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	2200      	movs	r2, #0
 80019e2:	761a      	strb	r2, [r3, #24]
 80019e4:	e000      	b.n	80019e8 <Map_AddTile+0x84>
  if (map->tile_count >= 256) return;
 80019e6:	bf00      	nop
}
 80019e8:	371c      	adds	r7, #28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <Map_Draw>:

static void Map_Draw(GameMap* map)
{
 80019f4:	b590      	push	{r4, r7, lr}
 80019f6:	b097      	sub	sp, #92	@ 0x5c
 80019f8:	af02      	add	r7, sp, #8
 80019fa:	6078      	str	r0, [r7, #4]
  char dbg[64];
  snprintf(dbg, sizeof(dbg), "[MAP_DRAW] Iniciando dibujo de %d tiles...\r\n", map->tile_count);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a02:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 8001a06:	f107 0008 	add.w	r0, r7, #8
 8001a0a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b00 <Map_Draw+0x10c>)
 8001a0c:	2140      	movs	r1, #64	@ 0x40
 8001a0e:	f006 fbeb 	bl	80081e8 <sniprintf>
  DebugPC(dbg);
 8001a12:	f107 0308 	add.w	r3, r7, #8
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff f924 	bl	8000c64 <DebugPC>

  if (map->tile_count == 0) {
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a22:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d103      	bne.n	8001a32 <Map_Draw+0x3e>
    DebugPC("[MAP_DRAW ERROR] tile_count es 0!\r\n");
 8001a2a:	4836      	ldr	r0, [pc, #216]	@ (8001b04 <Map_Draw+0x110>)
 8001a2c:	f7ff f91a 	bl	8000c64 <DebugPC>
 8001a30:	e063      	b.n	8001afa <Map_Draw+0x106>
    return;
  }

  for (uint16_t i = 0; i < map->tile_count; i++) {
 8001a32:	2300      	movs	r3, #0
 8001a34:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8001a38:	e053      	b.n	8001ae2 <Map_Draw+0xee>
    MapTile* t = &map->tiles[i];
 8001a3a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8001a3e:	4613      	mov	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	1a9b      	subs	r3, r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	64bb      	str	r3, [r7, #72]	@ 0x48

    if (t->bitmap == NULL) {
 8001a4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d10d      	bne.n	8001a70 <Map_Draw+0x7c>
      snprintf(dbg, sizeof(dbg), "[MAP_DRAW WARN] Tile %d tiene bitmap NULL\r\n", i);
 8001a54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001a58:	f107 0008 	add.w	r0, r7, #8
 8001a5c:	4a2a      	ldr	r2, [pc, #168]	@ (8001b08 <Map_Draw+0x114>)
 8001a5e:	2140      	movs	r1, #64	@ 0x40
 8001a60:	f006 fbc2 	bl	80081e8 <sniprintf>
      DebugPC(dbg);
 8001a64:	f107 0308 	add.w	r3, r7, #8
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff f8fb 	bl	8000c64 <DebugPC>
      continue;
 8001a6e:	e033      	b.n	8001ad8 <Map_Draw+0xe4>
    }

    LCD_Bitmap(t->x, t->y, t->w, t->h, t->bitmap);
 8001a70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	461a      	mov	r2, r3
 8001a82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	461c      	mov	r4, r3
 8001a88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	4623      	mov	r3, r4
 8001a90:	f7fe ffe2 	bl	8000a58 <LCD_Bitmap>

    // Debug cada 10 tiles para no saturar UART
    if (i % 10 == 0) {
 8001a94:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8001a98:	4b1c      	ldr	r3, [pc, #112]	@ (8001b0c <Map_Draw+0x118>)
 8001a9a:	fba3 1302 	umull	r1, r3, r3, r2
 8001a9e:	08d9      	lsrs	r1, r3, #3
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d113      	bne.n	8001ad8 <Map_Draw+0xe4>
      snprintf(dbg, sizeof(dbg), "[MAP_DRAW] Dibujando tile %d/%d\r\n", i, map->tile_count);
 8001ab0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aba:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 8001abe:	f107 0008 	add.w	r0, r7, #8
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	4a12      	ldr	r2, [pc, #72]	@ (8001b10 <Map_Draw+0x11c>)
 8001ac8:	2140      	movs	r1, #64	@ 0x40
 8001aca:	f006 fb8d 	bl	80081e8 <sniprintf>
      DebugPC(dbg);
 8001ace:	f107 0308 	add.w	r3, r7, #8
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff f8c6 	bl	8000c64 <DebugPC>
  for (uint16_t i = 0; i < map->tile_count; i++) {
 8001ad8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001adc:	3301      	adds	r3, #1
 8001ade:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ae8:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 8001aec:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d3a2      	bcc.n	8001a3a <Map_Draw+0x46>
    }
  }

  DebugPC("[MAP_DRAW] Dibujo completado\r\n");
 8001af4:	4807      	ldr	r0, [pc, #28]	@ (8001b14 <Map_Draw+0x120>)
 8001af6:	f7ff f8b5 	bl	8000c64 <DebugPC>
}
 8001afa:	3754      	adds	r7, #84	@ 0x54
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd90      	pop	{r4, r7, pc}
 8001b00:	08008bc8 	.word	0x08008bc8
 8001b04:	08008bf8 	.word	0x08008bf8
 8001b08:	08008c1c 	.word	0x08008c1c
 8001b0c:	cccccccd 	.word	0xcccccccd
 8001b10:	08008c48 	.word	0x08008c48
 8001b14:	08008c6c 	.word	0x08008c6c

08001b18 <Map1_Load>:

static void Map1_Load(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b0b0      	sub	sp, #192	@ 0xc0
 8001b1c:	af06      	add	r7, sp, #24
  char dbg[64];
  DebugPC("[MAP1] Iniciando carga del Mapa 1...\r\n");
 8001b1e:	48b4      	ldr	r0, [pc, #720]	@ (8001df0 <Map1_Load+0x2d8>)
 8001b20:	f7ff f8a0 	bl	8000c64 <DebugPC>

  Map_Clear(&g_current_map);
 8001b24:	48b3      	ldr	r0, [pc, #716]	@ (8001df4 <Map1_Load+0x2dc>)
 8001b26:	f7ff ff07 	bl	8001938 <Map_Clear>
  g_current_map.map_id = MAP_1_ID;
 8001b2a:	4bb2      	ldr	r3, [pc, #712]	@ (8001df4 <Map1_Load+0x2dc>)
 8001b2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2c02 	strb.w	r2, [r3, #3074]	@ 0xc02

  // ===== BASE INFERIOR (Águila) =====
  Map_AddTile(&g_current_map, 144, 208, 32, 16, TILE_STEEL, 0, 0, casita_gris);
 8001b36:	4bb0      	ldr	r3, [pc, #704]	@ (8001df8 <Map1_Load+0x2e0>)
 8001b38:	9304      	str	r3, [sp, #16]
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	9303      	str	r3, [sp, #12]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	9302      	str	r3, [sp, #8]
 8001b42:	2302      	movs	r3, #2
 8001b44:	9301      	str	r3, [sp, #4]
 8001b46:	2310      	movs	r3, #16
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2320      	movs	r3, #32
 8001b4c:	22d0      	movs	r2, #208	@ 0xd0
 8001b4e:	2190      	movs	r1, #144	@ 0x90
 8001b50:	48a8      	ldr	r0, [pc, #672]	@ (8001df4 <Map1_Load+0x2dc>)
 8001b52:	f7ff ff07 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 168, 224, 8, 8, TILE_BRICK, 1, 0, bloqueladrillo_8_8);
 8001b56:	4ba9      	ldr	r3, [pc, #676]	@ (8001dfc <Map1_Load+0x2e4>)
 8001b58:	9304      	str	r3, [sp, #16]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	9303      	str	r3, [sp, #12]
 8001b5e:	2301      	movs	r3, #1
 8001b60:	9302      	str	r3, [sp, #8]
 8001b62:	2301      	movs	r3, #1
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	2308      	movs	r3, #8
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2308      	movs	r3, #8
 8001b6c:	22e0      	movs	r2, #224	@ 0xe0
 8001b6e:	21a8      	movs	r1, #168	@ 0xa8
 8001b70:	48a0      	ldr	r0, [pc, #640]	@ (8001df4 <Map1_Load+0x2dc>)
 8001b72:	f7ff fef7 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 168, 232, 8, 8, TILE_BRICK, 1, 0, bloqueladrillo_8_8);
 8001b76:	4ba1      	ldr	r3, [pc, #644]	@ (8001dfc <Map1_Load+0x2e4>)
 8001b78:	9304      	str	r3, [sp, #16]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	9303      	str	r3, [sp, #12]
 8001b7e:	2301      	movs	r3, #1
 8001b80:	9302      	str	r3, [sp, #8]
 8001b82:	2301      	movs	r3, #1
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	2308      	movs	r3, #8
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2308      	movs	r3, #8
 8001b8c:	22e8      	movs	r2, #232	@ 0xe8
 8001b8e:	21a8      	movs	r1, #168	@ 0xa8
 8001b90:	4898      	ldr	r0, [pc, #608]	@ (8001df4 <Map1_Load+0x2dc>)
 8001b92:	f7ff fee7 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 144, 232, 8, 8, TILE_BRICK, 1, 0, bloqueladrillo_8_8);
 8001b96:	4b99      	ldr	r3, [pc, #612]	@ (8001dfc <Map1_Load+0x2e4>)
 8001b98:	9304      	str	r3, [sp, #16]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	9303      	str	r3, [sp, #12]
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	9302      	str	r3, [sp, #8]
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	2308      	movs	r3, #8
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	2308      	movs	r3, #8
 8001bac:	22e8      	movs	r2, #232	@ 0xe8
 8001bae:	2190      	movs	r1, #144	@ 0x90
 8001bb0:	4890      	ldr	r0, [pc, #576]	@ (8001df4 <Map1_Load+0x2dc>)
 8001bb2:	f7ff fed7 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 144, 224, 8, 8, TILE_BRICK, 1, 0, bloqueladrillo_8_8);
 8001bb6:	4b91      	ldr	r3, [pc, #580]	@ (8001dfc <Map1_Load+0x2e4>)
 8001bb8:	9304      	str	r3, [sp, #16]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	9303      	str	r3, [sp, #12]
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	9302      	str	r3, [sp, #8]
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	9301      	str	r3, [sp, #4]
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	2308      	movs	r3, #8
 8001bcc:	22e0      	movs	r2, #224	@ 0xe0
 8001bce:	2190      	movs	r1, #144	@ 0x90
 8001bd0:	4888      	ldr	r0, [pc, #544]	@ (8001df4 <Map1_Load+0x2dc>)
 8001bd2:	f7ff fec7 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 152, 232, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8001bd6:	4b8a      	ldr	r3, [pc, #552]	@ (8001e00 <Map1_Load+0x2e8>)
 8001bd8:	9304      	str	r3, [sp, #16]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	9303      	str	r3, [sp, #12]
 8001bde:	2301      	movs	r3, #1
 8001be0:	9302      	str	r3, [sp, #8]
 8001be2:	2301      	movs	r3, #1
 8001be4:	9301      	str	r3, [sp, #4]
 8001be6:	2308      	movs	r3, #8
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	2310      	movs	r3, #16
 8001bec:	22e8      	movs	r2, #232	@ 0xe8
 8001bee:	2198      	movs	r1, #152	@ 0x98
 8001bf0:	4880      	ldr	r0, [pc, #512]	@ (8001df4 <Map1_Load+0x2dc>)
 8001bf2:	f7ff feb7 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 152, 216, 16, 16, TILE_BASE, 1, 0, aguila);
 8001bf6:	4b83      	ldr	r3, [pc, #524]	@ (8001e04 <Map1_Load+0x2ec>)
 8001bf8:	9304      	str	r3, [sp, #16]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	9303      	str	r3, [sp, #12]
 8001bfe:	2301      	movs	r3, #1
 8001c00:	9302      	str	r3, [sp, #8]
 8001c02:	2305      	movs	r3, #5
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	2310      	movs	r3, #16
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2310      	movs	r3, #16
 8001c0c:	22d8      	movs	r2, #216	@ 0xd8
 8001c0e:	2198      	movs	r1, #152	@ 0x98
 8001c10:	4878      	ldr	r0, [pc, #480]	@ (8001df4 <Map1_Load+0x2dc>)
 8001c12:	f7ff fea7 	bl	8001964 <Map_AddTile>
  g_current_map.tiles[g_current_map.tile_count-1].owner_id = 1;
 8001c16:	4b77      	ldr	r3, [pc, #476]	@ (8001df4 <Map1_Load+0x2dc>)
 8001c18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c1c:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 8001c20:	1e5a      	subs	r2, r3, #1
 8001c22:	4974      	ldr	r1, [pc, #464]	@ (8001df4 <Map1_Load+0x2dc>)
 8001c24:	4613      	mov	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	1a9b      	subs	r3, r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3318      	adds	r3, #24
 8001c30:	2201      	movs	r2, #1
 8001c32:	701a      	strb	r2, [r3, #0]

  // ===== BASE SUPERIOR (Águila invertida) =====
  Map_AddTile(&g_current_map, 144, 16, 32, 16, TILE_STEEL, 0, 0, casitagris_invertida);
 8001c34:	4b74      	ldr	r3, [pc, #464]	@ (8001e08 <Map1_Load+0x2f0>)
 8001c36:	9304      	str	r3, [sp, #16]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	9303      	str	r3, [sp, #12]
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	9302      	str	r3, [sp, #8]
 8001c40:	2302      	movs	r3, #2
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	2310      	movs	r3, #16
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	2320      	movs	r3, #32
 8001c4a:	2210      	movs	r2, #16
 8001c4c:	2190      	movs	r1, #144	@ 0x90
 8001c4e:	4869      	ldr	r0, [pc, #420]	@ (8001df4 <Map1_Load+0x2dc>)
 8001c50:	f7ff fe88 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 168, 8, 8, 8, TILE_BRICK, 1, 0, bloqueladrillo_8_8);
 8001c54:	4b69      	ldr	r3, [pc, #420]	@ (8001dfc <Map1_Load+0x2e4>)
 8001c56:	9304      	str	r3, [sp, #16]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9303      	str	r3, [sp, #12]
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	9302      	str	r3, [sp, #8]
 8001c60:	2301      	movs	r3, #1
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	2308      	movs	r3, #8
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	2308      	movs	r3, #8
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	21a8      	movs	r1, #168	@ 0xa8
 8001c6e:	4861      	ldr	r0, [pc, #388]	@ (8001df4 <Map1_Load+0x2dc>)
 8001c70:	f7ff fe78 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 168, 0, 8, 8, TILE_BRICK, 1, 0, bloqueladrillo_8_8);
 8001c74:	4b61      	ldr	r3, [pc, #388]	@ (8001dfc <Map1_Load+0x2e4>)
 8001c76:	9304      	str	r3, [sp, #16]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9303      	str	r3, [sp, #12]
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	9302      	str	r3, [sp, #8]
 8001c80:	2301      	movs	r3, #1
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	2308      	movs	r3, #8
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	2308      	movs	r3, #8
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	21a8      	movs	r1, #168	@ 0xa8
 8001c8e:	4859      	ldr	r0, [pc, #356]	@ (8001df4 <Map1_Load+0x2dc>)
 8001c90:	f7ff fe68 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 144, 8, 8, 8, TILE_BRICK, 1, 0, bloqueladrillo_8_8);
 8001c94:	4b59      	ldr	r3, [pc, #356]	@ (8001dfc <Map1_Load+0x2e4>)
 8001c96:	9304      	str	r3, [sp, #16]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9303      	str	r3, [sp, #12]
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	9302      	str	r3, [sp, #8]
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	2308      	movs	r3, #8
 8001caa:	2208      	movs	r2, #8
 8001cac:	2190      	movs	r1, #144	@ 0x90
 8001cae:	4851      	ldr	r0, [pc, #324]	@ (8001df4 <Map1_Load+0x2dc>)
 8001cb0:	f7ff fe58 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 144, 0, 8, 8, TILE_BRICK, 1, 0, bloqueladrillo_8_8);
 8001cb4:	4b51      	ldr	r3, [pc, #324]	@ (8001dfc <Map1_Load+0x2e4>)
 8001cb6:	9304      	str	r3, [sp, #16]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	9303      	str	r3, [sp, #12]
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	9302      	str	r3, [sp, #8]
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	2308      	movs	r3, #8
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	2308      	movs	r3, #8
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2190      	movs	r1, #144	@ 0x90
 8001cce:	4849      	ldr	r0, [pc, #292]	@ (8001df4 <Map1_Load+0x2dc>)
 8001cd0:	f7ff fe48 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 152, 0, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8001cd4:	4b4a      	ldr	r3, [pc, #296]	@ (8001e00 <Map1_Load+0x2e8>)
 8001cd6:	9304      	str	r3, [sp, #16]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9303      	str	r3, [sp, #12]
 8001cdc:	2301      	movs	r3, #1
 8001cde:	9302      	str	r3, [sp, #8]
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	2310      	movs	r3, #16
 8001cea:	2200      	movs	r2, #0
 8001cec:	2198      	movs	r1, #152	@ 0x98
 8001cee:	4841      	ldr	r0, [pc, #260]	@ (8001df4 <Map1_Load+0x2dc>)
 8001cf0:	f7ff fe38 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 152, 8, 16, 16, TILE_BASE, 1, 0, aguila);
 8001cf4:	4b43      	ldr	r3, [pc, #268]	@ (8001e04 <Map1_Load+0x2ec>)
 8001cf6:	9304      	str	r3, [sp, #16]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9303      	str	r3, [sp, #12]
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	9302      	str	r3, [sp, #8]
 8001d00:	2305      	movs	r3, #5
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	2310      	movs	r3, #16
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2310      	movs	r3, #16
 8001d0a:	2208      	movs	r2, #8
 8001d0c:	2198      	movs	r1, #152	@ 0x98
 8001d0e:	4839      	ldr	r0, [pc, #228]	@ (8001df4 <Map1_Load+0x2dc>)
 8001d10:	f7ff fe28 	bl	8001964 <Map_AddTile>
  g_current_map.tiles[g_current_map.tile_count-1].owner_id = 2;
 8001d14:	4b37      	ldr	r3, [pc, #220]	@ (8001df4 <Map1_Load+0x2dc>)
 8001d16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d1a:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 8001d1e:	1e5a      	subs	r2, r3, #1
 8001d20:	4934      	ldr	r1, [pc, #208]	@ (8001df4 <Map1_Load+0x2dc>)
 8001d22:	4613      	mov	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	1a9b      	subs	r3, r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	3318      	adds	r3, #24
 8001d2e:	2202      	movs	r2, #2
 8001d30:	701a      	strb	r2, [r3, #0]

  // ===== COLUMNAS IZQUIERDA =====
  for (int y = 175; y < 216; y += 8) {
 8001d32:	23af      	movs	r3, #175	@ 0xaf
 8001d34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001d38:	e015      	b.n	8001d66 <Map1_Load+0x24e>
    Map_AddTile(&g_current_map, 32, y, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8001d3a:	4b31      	ldr	r3, [pc, #196]	@ (8001e00 <Map1_Load+0x2e8>)
 8001d3c:	9304      	str	r3, [sp, #16]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9303      	str	r3, [sp, #12]
 8001d42:	2301      	movs	r3, #1
 8001d44:	9302      	str	r3, [sp, #8]
 8001d46:	2301      	movs	r3, #1
 8001d48:	9301      	str	r3, [sp, #4]
 8001d4a:	2308      	movs	r3, #8
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	2310      	movs	r3, #16
 8001d50:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001d54:	2120      	movs	r1, #32
 8001d56:	4827      	ldr	r0, [pc, #156]	@ (8001df4 <Map1_Load+0x2dc>)
 8001d58:	f7ff fe04 	bl	8001964 <Map_AddTile>
  for (int y = 175; y < 216; y += 8) {
 8001d5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d60:	3308      	adds	r3, #8
 8001d62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001d66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d6a:	2bd7      	cmp	r3, #215	@ 0xd7
 8001d6c:	dde5      	ble.n	8001d3a <Map1_Load+0x222>
  }

  for (int y = 192; y < 232; y += 8) {
 8001d6e:	23c0      	movs	r3, #192	@ 0xc0
 8001d70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001d74:	e015      	b.n	8001da2 <Map1_Load+0x28a>
    Map_AddTile(&g_current_map, 48, y, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8001d76:	4b22      	ldr	r3, [pc, #136]	@ (8001e00 <Map1_Load+0x2e8>)
 8001d78:	9304      	str	r3, [sp, #16]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	9303      	str	r3, [sp, #12]
 8001d7e:	2301      	movs	r3, #1
 8001d80:	9302      	str	r3, [sp, #8]
 8001d82:	2301      	movs	r3, #1
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	2308      	movs	r3, #8
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2310      	movs	r3, #16
 8001d8c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001d90:	2130      	movs	r1, #48	@ 0x30
 8001d92:	4818      	ldr	r0, [pc, #96]	@ (8001df4 <Map1_Load+0x2dc>)
 8001d94:	f7ff fde6 	bl	8001964 <Map_AddTile>
  for (int y = 192; y < 232; y += 8) {
 8001d98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001d9c:	3308      	adds	r3, #8
 8001d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001da2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001da6:	2be7      	cmp	r3, #231	@ 0xe7
 8001da8:	dde5      	ble.n	8001d76 <Map1_Load+0x25e>
  }

  // ===== ESQUINA INFERIOR DERECHA =====
  for (int y = 176; y < 240; y += 16) {
 8001daa:	23b0      	movs	r3, #176	@ 0xb0
 8001dac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001db0:	e016      	b.n	8001de0 <Map1_Load+0x2c8>
    Map_AddTile(&g_current_map, 304, y, 16, 16, TILE_BUSH, 0, 1, monte);
 8001db2:	4b16      	ldr	r3, [pc, #88]	@ (8001e0c <Map1_Load+0x2f4>)
 8001db4:	9304      	str	r3, [sp, #16]
 8001db6:	2301      	movs	r3, #1
 8001db8:	9303      	str	r3, [sp, #12]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	9302      	str	r3, [sp, #8]
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	2310      	movs	r3, #16
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	2310      	movs	r3, #16
 8001dc8:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001dcc:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8001dd0:	4808      	ldr	r0, [pc, #32]	@ (8001df4 <Map1_Load+0x2dc>)
 8001dd2:	f7ff fdc7 	bl	8001964 <Map_AddTile>
  for (int y = 176; y < 240; y += 16) {
 8001dd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001dda:	3310      	adds	r3, #16
 8001ddc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001de0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001de4:	2bef      	cmp	r3, #239	@ 0xef
 8001de6:	dde4      	ble.n	8001db2 <Map1_Load+0x29a>
  }

  for (int y = 208; y < 240; y += 16) {
 8001de8:	23d0      	movs	r3, #208	@ 0xd0
 8001dea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001dee:	e026      	b.n	8001e3e <Map1_Load+0x326>
 8001df0:	08008c8c 	.word	0x08008c8c
 8001df4:	2000bb2c 	.word	0x2000bb2c
 8001df8:	08034284 	.word	0x08034284
 8001dfc:	08033684 	.word	0x08033684
 8001e00:	08034684 	.word	0x08034684
 8001e04:	08033f04 	.word	0x08033f04
 8001e08:	08034784 	.word	0x08034784
 8001e0c:	08033704 	.word	0x08033704
    Map_AddTile(&g_current_map, 288, y, 16, 16, TILE_BUSH, 0, 1, monte);
 8001e10:	4b7a      	ldr	r3, [pc, #488]	@ (8001ffc <Map1_Load+0x4e4>)
 8001e12:	9304      	str	r3, [sp, #16]
 8001e14:	2301      	movs	r3, #1
 8001e16:	9303      	str	r3, [sp, #12]
 8001e18:	2300      	movs	r3, #0
 8001e1a:	9302      	str	r3, [sp, #8]
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	9301      	str	r3, [sp, #4]
 8001e20:	2310      	movs	r3, #16
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	2310      	movs	r3, #16
 8001e26:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001e2a:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8001e2e:	4874      	ldr	r0, [pc, #464]	@ (8002000 <Map1_Load+0x4e8>)
 8001e30:	f7ff fd98 	bl	8001964 <Map_AddTile>
  for (int y = 208; y < 240; y += 16) {
 8001e34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e38:	3310      	adds	r3, #16
 8001e3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001e3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e42:	2bef      	cmp	r3, #239	@ 0xef
 8001e44:	dde4      	ble.n	8001e10 <Map1_Load+0x2f8>
  }

  for (int x = 256; x < 288; x += 16) {
 8001e46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001e4e:	e015      	b.n	8001e7c <Map1_Load+0x364>
    Map_AddTile(&g_current_map, x, 208, 16, 16, TILE_BUSH, 0, 1, monte);
 8001e50:	4b6a      	ldr	r3, [pc, #424]	@ (8001ffc <Map1_Load+0x4e4>)
 8001e52:	9304      	str	r3, [sp, #16]
 8001e54:	2301      	movs	r3, #1
 8001e56:	9303      	str	r3, [sp, #12]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	9302      	str	r3, [sp, #8]
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	9301      	str	r3, [sp, #4]
 8001e60:	2310      	movs	r3, #16
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	2310      	movs	r3, #16
 8001e66:	22d0      	movs	r2, #208	@ 0xd0
 8001e68:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8001e6c:	4864      	ldr	r0, [pc, #400]	@ (8002000 <Map1_Load+0x4e8>)
 8001e6e:	f7ff fd79 	bl	8001964 <Map_AddTile>
  for (int x = 256; x < 288; x += 16) {
 8001e72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e76:	3310      	adds	r3, #16
 8001e78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001e7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e80:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 8001e84:	dbe4      	blt.n	8001e50 <Map1_Load+0x338>
  }

  for (int x = 240; x < 304; x += 16) {
 8001e86:	23f0      	movs	r3, #240	@ 0xf0
 8001e88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e8c:	e026      	b.n	8001edc <Map1_Load+0x3c4>
    Map_AddTile(&g_current_map, x, 192, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8001e8e:	4b5d      	ldr	r3, [pc, #372]	@ (8002004 <Map1_Load+0x4ec>)
 8001e90:	9304      	str	r3, [sp, #16]
 8001e92:	2300      	movs	r3, #0
 8001e94:	9303      	str	r3, [sp, #12]
 8001e96:	2301      	movs	r3, #1
 8001e98:	9302      	str	r3, [sp, #8]
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	2308      	movs	r3, #8
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	2310      	movs	r3, #16
 8001ea4:	22c0      	movs	r2, #192	@ 0xc0
 8001ea6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001eaa:	4855      	ldr	r0, [pc, #340]	@ (8002000 <Map1_Load+0x4e8>)
 8001eac:	f7ff fd5a 	bl	8001964 <Map_AddTile>
    Map_AddTile(&g_current_map, x, 200, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8001eb0:	4b54      	ldr	r3, [pc, #336]	@ (8002004 <Map1_Load+0x4ec>)
 8001eb2:	9304      	str	r3, [sp, #16]
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	9303      	str	r3, [sp, #12]
 8001eb8:	2301      	movs	r3, #1
 8001eba:	9302      	str	r3, [sp, #8]
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	2310      	movs	r3, #16
 8001ec6:	22c8      	movs	r2, #200	@ 0xc8
 8001ec8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001ecc:	484c      	ldr	r0, [pc, #304]	@ (8002000 <Map1_Load+0x4e8>)
 8001ece:	f7ff fd49 	bl	8001964 <Map_AddTile>
  for (int x = 240; x < 304; x += 16) {
 8001ed2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001ed6:	3310      	adds	r3, #16
 8001ed8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001edc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001ee0:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8001ee4:	dbd3      	blt.n	8001e8e <Map1_Load+0x376>
  }

  // ===== BLOQUE INDIVIDUAL =====
  Map_AddTile(&g_current_map, 64, 224, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8001ee6:	4b47      	ldr	r3, [pc, #284]	@ (8002004 <Map1_Load+0x4ec>)
 8001ee8:	9304      	str	r3, [sp, #16]
 8001eea:	2300      	movs	r3, #0
 8001eec:	9303      	str	r3, [sp, #12]
 8001eee:	2301      	movs	r3, #1
 8001ef0:	9302      	str	r3, [sp, #8]
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	2308      	movs	r3, #8
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	2310      	movs	r3, #16
 8001efc:	22e0      	movs	r2, #224	@ 0xe0
 8001efe:	2140      	movs	r1, #64	@ 0x40
 8001f00:	483f      	ldr	r0, [pc, #252]	@ (8002000 <Map1_Load+0x4e8>)
 8001f02:	f7ff fd2f 	bl	8001964 <Map_AddTile>

  // ===== COLUMNAS VERTICALES CENTRO =====
  for (int y = 56; y < 184; y += 8) {
 8001f06:	2338      	movs	r3, #56	@ 0x38
 8001f08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001f0c:	e015      	b.n	8001f3a <Map1_Load+0x422>
    Map_AddTile(&g_current_map, 120, y, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8001f0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002004 <Map1_Load+0x4ec>)
 8001f10:	9304      	str	r3, [sp, #16]
 8001f12:	2300      	movs	r3, #0
 8001f14:	9303      	str	r3, [sp, #12]
 8001f16:	2301      	movs	r3, #1
 8001f18:	9302      	str	r3, [sp, #8]
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	2308      	movs	r3, #8
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	2310      	movs	r3, #16
 8001f24:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001f28:	2178      	movs	r1, #120	@ 0x78
 8001f2a:	4835      	ldr	r0, [pc, #212]	@ (8002000 <Map1_Load+0x4e8>)
 8001f2c:	f7ff fd1a 	bl	8001964 <Map_AddTile>
  for (int y = 56; y < 184; y += 8) {
 8001f30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f34:	3308      	adds	r3, #8
 8001f36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001f3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f3e:	2bb7      	cmp	r3, #183	@ 0xb7
 8001f40:	dde5      	ble.n	8001f0e <Map1_Load+0x3f6>
  }

  for (int y = 56; y < 184; y += 8) {
 8001f42:	2338      	movs	r3, #56	@ 0x38
 8001f44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f48:	e015      	b.n	8001f76 <Map1_Load+0x45e>
    Map_AddTile(&g_current_map, 184, y, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8001f4a:	4b2e      	ldr	r3, [pc, #184]	@ (8002004 <Map1_Load+0x4ec>)
 8001f4c:	9304      	str	r3, [sp, #16]
 8001f4e:	2300      	movs	r3, #0
 8001f50:	9303      	str	r3, [sp, #12]
 8001f52:	2301      	movs	r3, #1
 8001f54:	9302      	str	r3, [sp, #8]
 8001f56:	2301      	movs	r3, #1
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	2308      	movs	r3, #8
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2310      	movs	r3, #16
 8001f60:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001f64:	21b8      	movs	r1, #184	@ 0xb8
 8001f66:	4826      	ldr	r0, [pc, #152]	@ (8002000 <Map1_Load+0x4e8>)
 8001f68:	f7ff fcfc 	bl	8001964 <Map_AddTile>
  for (int y = 56; y < 184; y += 8) {
 8001f6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f70:	3308      	adds	r3, #8
 8001f72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f76:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f7a:	2bb7      	cmp	r3, #183	@ 0xb7
 8001f7c:	dde5      	ble.n	8001f4a <Map1_Load+0x432>
  }

  // ===== ARBUSTOS CENTRO =====
  for (int y = 88; y < 136; y += 16) {
 8001f7e:	2358      	movs	r3, #88	@ 0x58
 8001f80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001f84:	e015      	b.n	8001fb2 <Map1_Load+0x49a>
    Map_AddTile(&g_current_map, 136, y, 16, 16, TILE_BUSH, 0, 1, monte);
 8001f86:	4b1d      	ldr	r3, [pc, #116]	@ (8001ffc <Map1_Load+0x4e4>)
 8001f88:	9304      	str	r3, [sp, #16]
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	9303      	str	r3, [sp, #12]
 8001f8e:	2300      	movs	r3, #0
 8001f90:	9302      	str	r3, [sp, #8]
 8001f92:	2303      	movs	r3, #3
 8001f94:	9301      	str	r3, [sp, #4]
 8001f96:	2310      	movs	r3, #16
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	2310      	movs	r3, #16
 8001f9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001fa0:	2188      	movs	r1, #136	@ 0x88
 8001fa2:	4817      	ldr	r0, [pc, #92]	@ (8002000 <Map1_Load+0x4e8>)
 8001fa4:	f7ff fcde 	bl	8001964 <Map_AddTile>
  for (int y = 88; y < 136; y += 16) {
 8001fa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001fac:	3310      	adds	r3, #16
 8001fae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001fb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001fb6:	2b87      	cmp	r3, #135	@ 0x87
 8001fb8:	dde5      	ble.n	8001f86 <Map1_Load+0x46e>
  }

  for (int y = 88; y < 136; y += 16) {
 8001fba:	2358      	movs	r3, #88	@ 0x58
 8001fbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001fc0:	e015      	b.n	8001fee <Map1_Load+0x4d6>
    Map_AddTile(&g_current_map, 168, y, 16, 16, TILE_BUSH, 0, 1, monte);
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001ffc <Map1_Load+0x4e4>)
 8001fc4:	9304      	str	r3, [sp, #16]
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	9303      	str	r3, [sp, #12]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	9302      	str	r3, [sp, #8]
 8001fce:	2303      	movs	r3, #3
 8001fd0:	9301      	str	r3, [sp, #4]
 8001fd2:	2310      	movs	r3, #16
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	2310      	movs	r3, #16
 8001fd8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001fdc:	21a8      	movs	r1, #168	@ 0xa8
 8001fde:	4808      	ldr	r0, [pc, #32]	@ (8002000 <Map1_Load+0x4e8>)
 8001fe0:	f7ff fcc0 	bl	8001964 <Map_AddTile>
  for (int y = 88; y < 136; y += 16) {
 8001fe4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001fe8:	3310      	adds	r3, #16
 8001fea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001fee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ff2:	2b87      	cmp	r3, #135	@ 0x87
 8001ff4:	dde5      	ble.n	8001fc2 <Map1_Load+0x4aa>
  }

  for (int y = 104; y < 152; y += 16) {
 8001ff6:	2368      	movs	r3, #104	@ 0x68
 8001ff8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001ffa:	e018      	b.n	800202e <Map1_Load+0x516>
 8001ffc:	08033704 	.word	0x08033704
 8002000:	2000bb2c 	.word	0x2000bb2c
 8002004:	08034684 	.word	0x08034684
    Map_AddTile(&g_current_map, 152, y, 16, 16, TILE_BUSH, 0, 1, monte);
 8002008:	4b9c      	ldr	r3, [pc, #624]	@ (800227c <Map1_Load+0x764>)
 800200a:	9304      	str	r3, [sp, #16]
 800200c:	2301      	movs	r3, #1
 800200e:	9303      	str	r3, [sp, #12]
 8002010:	2300      	movs	r3, #0
 8002012:	9302      	str	r3, [sp, #8]
 8002014:	2303      	movs	r3, #3
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	2310      	movs	r3, #16
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	2310      	movs	r3, #16
 800201e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002020:	2198      	movs	r1, #152	@ 0x98
 8002022:	4897      	ldr	r0, [pc, #604]	@ (8002280 <Map1_Load+0x768>)
 8002024:	f7ff fc9e 	bl	8001964 <Map_AddTile>
  for (int y = 104; y < 152; y += 16) {
 8002028:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800202a:	3310      	adds	r3, #16
 800202c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800202e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002030:	2b97      	cmp	r3, #151	@ 0x97
 8002032:	dde9      	ble.n	8002008 <Map1_Load+0x4f0>
  }

  // ===== BLOQUES HORIZONTALES CENTRO =====
  Map_AddTile(&g_current_map, 136, 184, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002034:	4b93      	ldr	r3, [pc, #588]	@ (8002284 <Map1_Load+0x76c>)
 8002036:	9304      	str	r3, [sp, #16]
 8002038:	2300      	movs	r3, #0
 800203a:	9303      	str	r3, [sp, #12]
 800203c:	2301      	movs	r3, #1
 800203e:	9302      	str	r3, [sp, #8]
 8002040:	2301      	movs	r3, #1
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	2308      	movs	r3, #8
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2310      	movs	r3, #16
 800204a:	22b8      	movs	r2, #184	@ 0xb8
 800204c:	2188      	movs	r1, #136	@ 0x88
 800204e:	488c      	ldr	r0, [pc, #560]	@ (8002280 <Map1_Load+0x768>)
 8002050:	f7ff fc88 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 168, 184, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002054:	4b8b      	ldr	r3, [pc, #556]	@ (8002284 <Map1_Load+0x76c>)
 8002056:	9304      	str	r3, [sp, #16]
 8002058:	2300      	movs	r3, #0
 800205a:	9303      	str	r3, [sp, #12]
 800205c:	2301      	movs	r3, #1
 800205e:	9302      	str	r3, [sp, #8]
 8002060:	2301      	movs	r3, #1
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	2308      	movs	r3, #8
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	2310      	movs	r3, #16
 800206a:	22b8      	movs	r2, #184	@ 0xb8
 800206c:	21a8      	movs	r1, #168	@ 0xa8
 800206e:	4884      	ldr	r0, [pc, #528]	@ (8002280 <Map1_Load+0x768>)
 8002070:	f7ff fc78 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 136, 48, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002074:	4b83      	ldr	r3, [pc, #524]	@ (8002284 <Map1_Load+0x76c>)
 8002076:	9304      	str	r3, [sp, #16]
 8002078:	2300      	movs	r3, #0
 800207a:	9303      	str	r3, [sp, #12]
 800207c:	2301      	movs	r3, #1
 800207e:	9302      	str	r3, [sp, #8]
 8002080:	2301      	movs	r3, #1
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	2308      	movs	r3, #8
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	2310      	movs	r3, #16
 800208a:	2230      	movs	r2, #48	@ 0x30
 800208c:	2188      	movs	r1, #136	@ 0x88
 800208e:	487c      	ldr	r0, [pc, #496]	@ (8002280 <Map1_Load+0x768>)
 8002090:	f7ff fc68 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 168, 48, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002094:	4b7b      	ldr	r3, [pc, #492]	@ (8002284 <Map1_Load+0x76c>)
 8002096:	9304      	str	r3, [sp, #16]
 8002098:	2300      	movs	r3, #0
 800209a:	9303      	str	r3, [sp, #12]
 800209c:	2301      	movs	r3, #1
 800209e:	9302      	str	r3, [sp, #8]
 80020a0:	2301      	movs	r3, #1
 80020a2:	9301      	str	r3, [sp, #4]
 80020a4:	2308      	movs	r3, #8
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	2310      	movs	r3, #16
 80020aa:	2230      	movs	r2, #48	@ 0x30
 80020ac:	21a8      	movs	r1, #168	@ 0xa8
 80020ae:	4874      	ldr	r0, [pc, #464]	@ (8002280 <Map1_Load+0x768>)
 80020b0:	f7ff fc58 	bl	8001964 <Map_AddTile>

  // ===== COLUMNA CENTRO (MIXTA) =====
  Map_AddTile(&g_current_map, 152, 104, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 80020b4:	4b73      	ldr	r3, [pc, #460]	@ (8002284 <Map1_Load+0x76c>)
 80020b6:	9304      	str	r3, [sp, #16]
 80020b8:	2300      	movs	r3, #0
 80020ba:	9303      	str	r3, [sp, #12]
 80020bc:	2301      	movs	r3, #1
 80020be:	9302      	str	r3, [sp, #8]
 80020c0:	2301      	movs	r3, #1
 80020c2:	9301      	str	r3, [sp, #4]
 80020c4:	2308      	movs	r3, #8
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	2310      	movs	r3, #16
 80020ca:	2268      	movs	r2, #104	@ 0x68
 80020cc:	2198      	movs	r1, #152	@ 0x98
 80020ce:	486c      	ldr	r0, [pc, #432]	@ (8002280 <Map1_Load+0x768>)
 80020d0:	f7ff fc48 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 152, 96, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 80020d4:	4b6b      	ldr	r3, [pc, #428]	@ (8002284 <Map1_Load+0x76c>)
 80020d6:	9304      	str	r3, [sp, #16]
 80020d8:	2300      	movs	r3, #0
 80020da:	9303      	str	r3, [sp, #12]
 80020dc:	2301      	movs	r3, #1
 80020de:	9302      	str	r3, [sp, #8]
 80020e0:	2301      	movs	r3, #1
 80020e2:	9301      	str	r3, [sp, #4]
 80020e4:	2308      	movs	r3, #8
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2310      	movs	r3, #16
 80020ea:	2260      	movs	r2, #96	@ 0x60
 80020ec:	2198      	movs	r1, #152	@ 0x98
 80020ee:	4864      	ldr	r0, [pc, #400]	@ (8002280 <Map1_Load+0x768>)
 80020f0:	f7ff fc38 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 152, 88, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 80020f4:	4b63      	ldr	r3, [pc, #396]	@ (8002284 <Map1_Load+0x76c>)
 80020f6:	9304      	str	r3, [sp, #16]
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	2301      	movs	r3, #1
 80020fe:	9302      	str	r3, [sp, #8]
 8002100:	2301      	movs	r3, #1
 8002102:	9301      	str	r3, [sp, #4]
 8002104:	2308      	movs	r3, #8
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	2310      	movs	r3, #16
 800210a:	2258      	movs	r2, #88	@ 0x58
 800210c:	2198      	movs	r1, #152	@ 0x98
 800210e:	485c      	ldr	r0, [pc, #368]	@ (8002280 <Map1_Load+0x768>)
 8002110:	f7ff fc28 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 152, 80, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 8002114:	4b5c      	ldr	r3, [pc, #368]	@ (8002288 <Map1_Load+0x770>)
 8002116:	9304      	str	r3, [sp, #16]
 8002118:	2300      	movs	r3, #0
 800211a:	9303      	str	r3, [sp, #12]
 800211c:	2300      	movs	r3, #0
 800211e:	9302      	str	r3, [sp, #8]
 8002120:	2302      	movs	r3, #2
 8002122:	9301      	str	r3, [sp, #4]
 8002124:	2308      	movs	r3, #8
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	2310      	movs	r3, #16
 800212a:	2250      	movs	r2, #80	@ 0x50
 800212c:	2198      	movs	r1, #152	@ 0x98
 800212e:	4854      	ldr	r0, [pc, #336]	@ (8002280 <Map1_Load+0x768>)
 8002130:	f7ff fc18 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 152, 72, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 8002134:	4b54      	ldr	r3, [pc, #336]	@ (8002288 <Map1_Load+0x770>)
 8002136:	9304      	str	r3, [sp, #16]
 8002138:	2300      	movs	r3, #0
 800213a:	9303      	str	r3, [sp, #12]
 800213c:	2300      	movs	r3, #0
 800213e:	9302      	str	r3, [sp, #8]
 8002140:	2302      	movs	r3, #2
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	2308      	movs	r3, #8
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	2310      	movs	r3, #16
 800214a:	2248      	movs	r2, #72	@ 0x48
 800214c:	2198      	movs	r1, #152	@ 0x98
 800214e:	484c      	ldr	r0, [pc, #304]	@ (8002280 <Map1_Load+0x768>)
 8002150:	f7ff fc08 	bl	8001964 <Map_AddTile>

  // ===== BLOQUES GRISES LATERALES =====
  for (int y = 104; y < 132; y += 8) {
 8002154:	2368      	movs	r3, #104	@ 0x68
 8002156:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002158:	e012      	b.n	8002180 <Map1_Load+0x668>
    Map_AddTile(&g_current_map, 0, y, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 800215a:	4b4b      	ldr	r3, [pc, #300]	@ (8002288 <Map1_Load+0x770>)
 800215c:	9304      	str	r3, [sp, #16]
 800215e:	2300      	movs	r3, #0
 8002160:	9303      	str	r3, [sp, #12]
 8002162:	2300      	movs	r3, #0
 8002164:	9302      	str	r3, [sp, #8]
 8002166:	2302      	movs	r3, #2
 8002168:	9301      	str	r3, [sp, #4]
 800216a:	2308      	movs	r3, #8
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	2310      	movs	r3, #16
 8002170:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002172:	2100      	movs	r1, #0
 8002174:	4842      	ldr	r0, [pc, #264]	@ (8002280 <Map1_Load+0x768>)
 8002176:	f7ff fbf5 	bl	8001964 <Map_AddTile>
  for (int y = 104; y < 132; y += 8) {
 800217a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800217c:	3308      	adds	r3, #8
 800217e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002180:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002182:	2b83      	cmp	r3, #131	@ 0x83
 8002184:	dde9      	ble.n	800215a <Map1_Load+0x642>
  }

  for (int y = 104; y < 132; y += 8) {
 8002186:	2368      	movs	r3, #104	@ 0x68
 8002188:	677b      	str	r3, [r7, #116]	@ 0x74
 800218a:	e013      	b.n	80021b4 <Map1_Load+0x69c>
    Map_AddTile(&g_current_map, 304, y, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 800218c:	4b3e      	ldr	r3, [pc, #248]	@ (8002288 <Map1_Load+0x770>)
 800218e:	9304      	str	r3, [sp, #16]
 8002190:	2300      	movs	r3, #0
 8002192:	9303      	str	r3, [sp, #12]
 8002194:	2300      	movs	r3, #0
 8002196:	9302      	str	r3, [sp, #8]
 8002198:	2302      	movs	r3, #2
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	2308      	movs	r3, #8
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	2310      	movs	r3, #16
 80021a2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80021a4:	f44f 7198 	mov.w	r1, #304	@ 0x130
 80021a8:	4835      	ldr	r0, [pc, #212]	@ (8002280 <Map1_Load+0x768>)
 80021aa:	f7ff fbdb 	bl	8001964 <Map_AddTile>
  for (int y = 104; y < 132; y += 8) {
 80021ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021b0:	3308      	adds	r3, #8
 80021b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80021b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021b6:	2b83      	cmp	r3, #131	@ 0x83
 80021b8:	dde8      	ble.n	800218c <Map1_Load+0x674>
  }

  for (int x = 16; x < 64; x += 16) {
 80021ba:	2310      	movs	r3, #16
 80021bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80021be:	e012      	b.n	80021e6 <Map1_Load+0x6ce>
    Map_AddTile(&g_current_map, x, 128, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 80021c0:	4b31      	ldr	r3, [pc, #196]	@ (8002288 <Map1_Load+0x770>)
 80021c2:	9304      	str	r3, [sp, #16]
 80021c4:	2300      	movs	r3, #0
 80021c6:	9303      	str	r3, [sp, #12]
 80021c8:	2300      	movs	r3, #0
 80021ca:	9302      	str	r3, [sp, #8]
 80021cc:	2302      	movs	r3, #2
 80021ce:	9301      	str	r3, [sp, #4]
 80021d0:	2308      	movs	r3, #8
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2310      	movs	r3, #16
 80021d6:	2280      	movs	r2, #128	@ 0x80
 80021d8:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80021da:	4829      	ldr	r0, [pc, #164]	@ (8002280 <Map1_Load+0x768>)
 80021dc:	f7ff fbc2 	bl	8001964 <Map_AddTile>
  for (int x = 16; x < 64; x += 16) {
 80021e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021e2:	3310      	adds	r3, #16
 80021e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80021e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80021ea:	dde9      	ble.n	80021c0 <Map1_Load+0x6a8>
  }

  for (int x = 256; x < 304; x += 16) {
 80021ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80021f2:	e012      	b.n	800221a <Map1_Load+0x702>
    Map_AddTile(&g_current_map, x, 128, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 80021f4:	4b24      	ldr	r3, [pc, #144]	@ (8002288 <Map1_Load+0x770>)
 80021f6:	9304      	str	r3, [sp, #16]
 80021f8:	2300      	movs	r3, #0
 80021fa:	9303      	str	r3, [sp, #12]
 80021fc:	2300      	movs	r3, #0
 80021fe:	9302      	str	r3, [sp, #8]
 8002200:	2302      	movs	r3, #2
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	2308      	movs	r3, #8
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	2310      	movs	r3, #16
 800220a:	2280      	movs	r2, #128	@ 0x80
 800220c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800220e:	481c      	ldr	r0, [pc, #112]	@ (8002280 <Map1_Load+0x768>)
 8002210:	f7ff fba8 	bl	8001964 <Map_AddTile>
  for (int x = 256; x < 304; x += 16) {
 8002214:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002216:	3310      	adds	r3, #16
 8002218:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800221a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800221c:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8002220:	dbe8      	blt.n	80021f4 <Map1_Load+0x6dc>
  }

  // ===== PLATAFORMAS INFERIORES =====
  for (int x = 16; x < 96; x += 16) {
 8002222:	2310      	movs	r3, #16
 8002224:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002226:	e022      	b.n	800226e <Map1_Load+0x756>
    Map_AddTile(&g_current_map, x, 112, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002228:	4b16      	ldr	r3, [pc, #88]	@ (8002284 <Map1_Load+0x76c>)
 800222a:	9304      	str	r3, [sp, #16]
 800222c:	2300      	movs	r3, #0
 800222e:	9303      	str	r3, [sp, #12]
 8002230:	2301      	movs	r3, #1
 8002232:	9302      	str	r3, [sp, #8]
 8002234:	2301      	movs	r3, #1
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	2308      	movs	r3, #8
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	2310      	movs	r3, #16
 800223e:	2270      	movs	r2, #112	@ 0x70
 8002240:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002242:	480f      	ldr	r0, [pc, #60]	@ (8002280 <Map1_Load+0x768>)
 8002244:	f7ff fb8e 	bl	8001964 <Map_AddTile>
    Map_AddTile(&g_current_map, x, 120, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002248:	4b0e      	ldr	r3, [pc, #56]	@ (8002284 <Map1_Load+0x76c>)
 800224a:	9304      	str	r3, [sp, #16]
 800224c:	2300      	movs	r3, #0
 800224e:	9303      	str	r3, [sp, #12]
 8002250:	2301      	movs	r3, #1
 8002252:	9302      	str	r3, [sp, #8]
 8002254:	2301      	movs	r3, #1
 8002256:	9301      	str	r3, [sp, #4]
 8002258:	2308      	movs	r3, #8
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	2310      	movs	r3, #16
 800225e:	2278      	movs	r2, #120	@ 0x78
 8002260:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002262:	4807      	ldr	r0, [pc, #28]	@ (8002280 <Map1_Load+0x768>)
 8002264:	f7ff fb7e 	bl	8001964 <Map_AddTile>
  for (int x = 16; x < 96; x += 16) {
 8002268:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800226a:	3310      	adds	r3, #16
 800226c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800226e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002270:	2b5f      	cmp	r3, #95	@ 0x5f
 8002272:	ddd9      	ble.n	8002228 <Map1_Load+0x710>
  }

  for (int x = 0; x < 80; x += 16) {
 8002274:	2300      	movs	r3, #0
 8002276:	667b      	str	r3, [r7, #100]	@ 0x64
 8002278:	e02b      	b.n	80022d2 <Map1_Load+0x7ba>
 800227a:	bf00      	nop
 800227c:	08033704 	.word	0x08033704
 8002280:	2000bb2c 	.word	0x2000bb2c
 8002284:	08034684 	.word	0x08034684
 8002288:	08034184 	.word	0x08034184
    Map_AddTile(&g_current_map, x, 72, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 800228c:	4b70      	ldr	r3, [pc, #448]	@ (8002450 <Map1_Load+0x938>)
 800228e:	9304      	str	r3, [sp, #16]
 8002290:	2300      	movs	r3, #0
 8002292:	9303      	str	r3, [sp, #12]
 8002294:	2301      	movs	r3, #1
 8002296:	9302      	str	r3, [sp, #8]
 8002298:	2301      	movs	r3, #1
 800229a:	9301      	str	r3, [sp, #4]
 800229c:	2308      	movs	r3, #8
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	2310      	movs	r3, #16
 80022a2:	2248      	movs	r2, #72	@ 0x48
 80022a4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80022a6:	486b      	ldr	r0, [pc, #428]	@ (8002454 <Map1_Load+0x93c>)
 80022a8:	f7ff fb5c 	bl	8001964 <Map_AddTile>
    Map_AddTile(&g_current_map, x, 80, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 80022ac:	4b68      	ldr	r3, [pc, #416]	@ (8002450 <Map1_Load+0x938>)
 80022ae:	9304      	str	r3, [sp, #16]
 80022b0:	2300      	movs	r3, #0
 80022b2:	9303      	str	r3, [sp, #12]
 80022b4:	2301      	movs	r3, #1
 80022b6:	9302      	str	r3, [sp, #8]
 80022b8:	2301      	movs	r3, #1
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	2308      	movs	r3, #8
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	2310      	movs	r3, #16
 80022c2:	2250      	movs	r2, #80	@ 0x50
 80022c4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80022c6:	4863      	ldr	r0, [pc, #396]	@ (8002454 <Map1_Load+0x93c>)
 80022c8:	f7ff fb4c 	bl	8001964 <Map_AddTile>
  for (int x = 0; x < 80; x += 16) {
 80022cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022ce:	3310      	adds	r3, #16
 80022d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80022d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022d4:	2b4f      	cmp	r3, #79	@ 0x4f
 80022d6:	ddd9      	ble.n	800228c <Map1_Load+0x774>
  }

  for (int x = 224; x < 304; x += 16) {
 80022d8:	23e0      	movs	r3, #224	@ 0xe0
 80022da:	663b      	str	r3, [r7, #96]	@ 0x60
 80022dc:	e022      	b.n	8002324 <Map1_Load+0x80c>
    Map_AddTile(&g_current_map, x, 112, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 80022de:	4b5c      	ldr	r3, [pc, #368]	@ (8002450 <Map1_Load+0x938>)
 80022e0:	9304      	str	r3, [sp, #16]
 80022e2:	2300      	movs	r3, #0
 80022e4:	9303      	str	r3, [sp, #12]
 80022e6:	2301      	movs	r3, #1
 80022e8:	9302      	str	r3, [sp, #8]
 80022ea:	2301      	movs	r3, #1
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	2308      	movs	r3, #8
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	2310      	movs	r3, #16
 80022f4:	2270      	movs	r2, #112	@ 0x70
 80022f6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80022f8:	4856      	ldr	r0, [pc, #344]	@ (8002454 <Map1_Load+0x93c>)
 80022fa:	f7ff fb33 	bl	8001964 <Map_AddTile>
    Map_AddTile(&g_current_map, x, 120, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 80022fe:	4b54      	ldr	r3, [pc, #336]	@ (8002450 <Map1_Load+0x938>)
 8002300:	9304      	str	r3, [sp, #16]
 8002302:	2300      	movs	r3, #0
 8002304:	9303      	str	r3, [sp, #12]
 8002306:	2301      	movs	r3, #1
 8002308:	9302      	str	r3, [sp, #8]
 800230a:	2301      	movs	r3, #1
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	2308      	movs	r3, #8
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	2310      	movs	r3, #16
 8002314:	2278      	movs	r2, #120	@ 0x78
 8002316:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002318:	484e      	ldr	r0, [pc, #312]	@ (8002454 <Map1_Load+0x93c>)
 800231a:	f7ff fb23 	bl	8001964 <Map_AddTile>
  for (int x = 224; x < 304; x += 16) {
 800231e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002320:	3310      	adds	r3, #16
 8002322:	663b      	str	r3, [r7, #96]	@ 0x60
 8002324:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002326:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 800232a:	dbd8      	blt.n	80022de <Map1_Load+0x7c6>
  }

  for (int x = 240; x < 320; x += 16) {
 800232c:	23f0      	movs	r3, #240	@ 0xf0
 800232e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002330:	e022      	b.n	8002378 <Map1_Load+0x860>
    Map_AddTile(&g_current_map, x, 72, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002332:	4b47      	ldr	r3, [pc, #284]	@ (8002450 <Map1_Load+0x938>)
 8002334:	9304      	str	r3, [sp, #16]
 8002336:	2300      	movs	r3, #0
 8002338:	9303      	str	r3, [sp, #12]
 800233a:	2301      	movs	r3, #1
 800233c:	9302      	str	r3, [sp, #8]
 800233e:	2301      	movs	r3, #1
 8002340:	9301      	str	r3, [sp, #4]
 8002342:	2308      	movs	r3, #8
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	2310      	movs	r3, #16
 8002348:	2248      	movs	r2, #72	@ 0x48
 800234a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800234c:	4841      	ldr	r0, [pc, #260]	@ (8002454 <Map1_Load+0x93c>)
 800234e:	f7ff fb09 	bl	8001964 <Map_AddTile>
    Map_AddTile(&g_current_map, x, 80, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002352:	4b3f      	ldr	r3, [pc, #252]	@ (8002450 <Map1_Load+0x938>)
 8002354:	9304      	str	r3, [sp, #16]
 8002356:	2300      	movs	r3, #0
 8002358:	9303      	str	r3, [sp, #12]
 800235a:	2301      	movs	r3, #1
 800235c:	9302      	str	r3, [sp, #8]
 800235e:	2301      	movs	r3, #1
 8002360:	9301      	str	r3, [sp, #4]
 8002362:	2308      	movs	r3, #8
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	2310      	movs	r3, #16
 8002368:	2250      	movs	r2, #80	@ 0x50
 800236a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800236c:	4839      	ldr	r0, [pc, #228]	@ (8002454 <Map1_Load+0x93c>)
 800236e:	f7ff faf9 	bl	8001964 <Map_AddTile>
  for (int x = 240; x < 320; x += 16) {
 8002372:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002374:	3310      	adds	r3, #16
 8002376:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002378:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800237a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800237e:	dbd8      	blt.n	8002332 <Map1_Load+0x81a>
  }

  // ===== COLUMNA IZQUIERDA SUPERIOR =====
  for (int y = 168; y < 216; y += 8) {
 8002380:	23a8      	movs	r3, #168	@ 0xa8
 8002382:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002384:	e012      	b.n	80023ac <Map1_Load+0x894>
    Map_AddTile(&g_current_map, 0, y, 8, 8, TILE_STEEL, 0, 0, bloquegris_8_8);
 8002386:	4b34      	ldr	r3, [pc, #208]	@ (8002458 <Map1_Load+0x940>)
 8002388:	9304      	str	r3, [sp, #16]
 800238a:	2300      	movs	r3, #0
 800238c:	9303      	str	r3, [sp, #12]
 800238e:	2300      	movs	r3, #0
 8002390:	9302      	str	r3, [sp, #8]
 8002392:	2302      	movs	r3, #2
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	2308      	movs	r3, #8
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	2308      	movs	r3, #8
 800239c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800239e:	2100      	movs	r1, #0
 80023a0:	482c      	ldr	r0, [pc, #176]	@ (8002454 <Map1_Load+0x93c>)
 80023a2:	f7ff fadf 	bl	8001964 <Map_AddTile>
  for (int y = 168; y < 216; y += 8) {
 80023a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023a8:	3308      	adds	r3, #8
 80023aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80023ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023ae:	2bd7      	cmp	r3, #215	@ 0xd7
 80023b0:	dde9      	ble.n	8002386 <Map1_Load+0x86e>
  }

  for (int y = 0; y < 48; y += 8) {
 80023b2:	2300      	movs	r3, #0
 80023b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80023b6:	e012      	b.n	80023de <Map1_Load+0x8c6>
    Map_AddTile(&g_current_map, 32, y, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 80023b8:	4b25      	ldr	r3, [pc, #148]	@ (8002450 <Map1_Load+0x938>)
 80023ba:	9304      	str	r3, [sp, #16]
 80023bc:	2300      	movs	r3, #0
 80023be:	9303      	str	r3, [sp, #12]
 80023c0:	2301      	movs	r3, #1
 80023c2:	9302      	str	r3, [sp, #8]
 80023c4:	2301      	movs	r3, #1
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	2308      	movs	r3, #8
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	2310      	movs	r3, #16
 80023ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80023d0:	2120      	movs	r1, #32
 80023d2:	4820      	ldr	r0, [pc, #128]	@ (8002454 <Map1_Load+0x93c>)
 80023d4:	f7ff fac6 	bl	8001964 <Map_AddTile>
  for (int y = 0; y < 48; y += 8) {
 80023d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023da:	3308      	adds	r3, #8
 80023dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80023de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023e0:	2b2f      	cmp	r3, #47	@ 0x2f
 80023e2:	dde9      	ble.n	80023b8 <Map1_Load+0x8a0>
  }

  for (int y = 0; y < 24; y += 8) {
 80023e4:	2300      	movs	r3, #0
 80023e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80023e8:	e012      	b.n	8002410 <Map1_Load+0x8f8>
    Map_AddTile(&g_current_map, 48, y, 8, 8, TILE_STEEL, 0, 0, bloquegris_8_8);
 80023ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002458 <Map1_Load+0x940>)
 80023ec:	9304      	str	r3, [sp, #16]
 80023ee:	2300      	movs	r3, #0
 80023f0:	9303      	str	r3, [sp, #12]
 80023f2:	2300      	movs	r3, #0
 80023f4:	9302      	str	r3, [sp, #8]
 80023f6:	2302      	movs	r3, #2
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	2308      	movs	r3, #8
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	2308      	movs	r3, #8
 8002400:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002402:	2130      	movs	r1, #48	@ 0x30
 8002404:	4813      	ldr	r0, [pc, #76]	@ (8002454 <Map1_Load+0x93c>)
 8002406:	f7ff faad 	bl	8001964 <Map_AddTile>
  for (int y = 0; y < 24; y += 8) {
 800240a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800240c:	3308      	adds	r3, #8
 800240e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002410:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002412:	2b17      	cmp	r3, #23
 8002414:	dde9      	ble.n	80023ea <Map1_Load+0x8d2>
  }

  for (int y = 0; y < 48; y += 16) {
 8002416:	2300      	movs	r3, #0
 8002418:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800241a:	e012      	b.n	8002442 <Map1_Load+0x92a>
    Map_AddTile(&g_current_map, 80, y, 16, 16, TILE_BUSH, 0, 1, monte);
 800241c:	4b0f      	ldr	r3, [pc, #60]	@ (800245c <Map1_Load+0x944>)
 800241e:	9304      	str	r3, [sp, #16]
 8002420:	2301      	movs	r3, #1
 8002422:	9303      	str	r3, [sp, #12]
 8002424:	2300      	movs	r3, #0
 8002426:	9302      	str	r3, [sp, #8]
 8002428:	2303      	movs	r3, #3
 800242a:	9301      	str	r3, [sp, #4]
 800242c:	2310      	movs	r3, #16
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	2310      	movs	r3, #16
 8002432:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002434:	2150      	movs	r1, #80	@ 0x50
 8002436:	4807      	ldr	r0, [pc, #28]	@ (8002454 <Map1_Load+0x93c>)
 8002438:	f7ff fa94 	bl	8001964 <Map_AddTile>
  for (int y = 0; y < 48; y += 16) {
 800243c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800243e:	3310      	adds	r3, #16
 8002440:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002442:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002444:	2b2f      	cmp	r3, #47	@ 0x2f
 8002446:	dde9      	ble.n	800241c <Map1_Load+0x904>
  }

  // ===== ESQUINA SUPERIOR DERECHA =====
  for (int x = 272; x < 320; x += 16) {
 8002448:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800244c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800244e:	e01a      	b.n	8002486 <Map1_Load+0x96e>
 8002450:	08034684 	.word	0x08034684
 8002454:	2000bb2c 	.word	0x2000bb2c
 8002458:	08034104 	.word	0x08034104
 800245c:	08033704 	.word	0x08033704
    Map_AddTile(&g_current_map, x, 0, 16, 16, TILE_BUSH, 0, 1, monte);
 8002460:	4b6f      	ldr	r3, [pc, #444]	@ (8002620 <Map1_Load+0xb08>)
 8002462:	9304      	str	r3, [sp, #16]
 8002464:	2301      	movs	r3, #1
 8002466:	9303      	str	r3, [sp, #12]
 8002468:	2300      	movs	r3, #0
 800246a:	9302      	str	r3, [sp, #8]
 800246c:	2303      	movs	r3, #3
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	2310      	movs	r3, #16
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	2310      	movs	r3, #16
 8002476:	2200      	movs	r2, #0
 8002478:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800247a:	486a      	ldr	r0, [pc, #424]	@ (8002624 <Map1_Load+0xb0c>)
 800247c:	f7ff fa72 	bl	8001964 <Map_AddTile>
  for (int x = 272; x < 320; x += 16) {
 8002480:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002482:	3310      	adds	r3, #16
 8002484:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002488:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800248c:	dbe8      	blt.n	8002460 <Map1_Load+0x948>
  }

  Map_AddTile(&g_current_map, 304, 16, 16, 16, TILE_BUSH, 0, 1, monte);
 800248e:	4b64      	ldr	r3, [pc, #400]	@ (8002620 <Map1_Load+0xb08>)
 8002490:	9304      	str	r3, [sp, #16]
 8002492:	2301      	movs	r3, #1
 8002494:	9303      	str	r3, [sp, #12]
 8002496:	2300      	movs	r3, #0
 8002498:	9302      	str	r3, [sp, #8]
 800249a:	2303      	movs	r3, #3
 800249c:	9301      	str	r3, [sp, #4]
 800249e:	2310      	movs	r3, #16
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	2310      	movs	r3, #16
 80024a4:	2210      	movs	r2, #16
 80024a6:	f44f 7198 	mov.w	r1, #304	@ 0x130
 80024aa:	485e      	ldr	r0, [pc, #376]	@ (8002624 <Map1_Load+0xb0c>)
 80024ac:	f7ff fa5a 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 304, 32, 16, 16, TILE_BUSH, 0, 1, monte);
 80024b0:	4b5b      	ldr	r3, [pc, #364]	@ (8002620 <Map1_Load+0xb08>)
 80024b2:	9304      	str	r3, [sp, #16]
 80024b4:	2301      	movs	r3, #1
 80024b6:	9303      	str	r3, [sp, #12]
 80024b8:	2300      	movs	r3, #0
 80024ba:	9302      	str	r3, [sp, #8]
 80024bc:	2303      	movs	r3, #3
 80024be:	9301      	str	r3, [sp, #4]
 80024c0:	2310      	movs	r3, #16
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	2310      	movs	r3, #16
 80024c6:	2220      	movs	r2, #32
 80024c8:	f44f 7198 	mov.w	r1, #304	@ 0x130
 80024cc:	4855      	ldr	r0, [pc, #340]	@ (8002624 <Map1_Load+0xb0c>)
 80024ce:	f7ff fa49 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 288, 16, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 80024d2:	4b55      	ldr	r3, [pc, #340]	@ (8002628 <Map1_Load+0xb10>)
 80024d4:	9304      	str	r3, [sp, #16]
 80024d6:	2300      	movs	r3, #0
 80024d8:	9303      	str	r3, [sp, #12]
 80024da:	2301      	movs	r3, #1
 80024dc:	9302      	str	r3, [sp, #8]
 80024de:	2301      	movs	r3, #1
 80024e0:	9301      	str	r3, [sp, #4]
 80024e2:	2308      	movs	r3, #8
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	2310      	movs	r3, #16
 80024e8:	2210      	movs	r2, #16
 80024ea:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80024ee:	484d      	ldr	r0, [pc, #308]	@ (8002624 <Map1_Load+0xb0c>)
 80024f0:	f7ff fa38 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 288, 24, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 80024f4:	4b4c      	ldr	r3, [pc, #304]	@ (8002628 <Map1_Load+0xb10>)
 80024f6:	9304      	str	r3, [sp, #16]
 80024f8:	2300      	movs	r3, #0
 80024fa:	9303      	str	r3, [sp, #12]
 80024fc:	2301      	movs	r3, #1
 80024fe:	9302      	str	r3, [sp, #8]
 8002500:	2301      	movs	r3, #1
 8002502:	9301      	str	r3, [sp, #4]
 8002504:	2308      	movs	r3, #8
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	2310      	movs	r3, #16
 800250a:	2218      	movs	r2, #24
 800250c:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8002510:	4844      	ldr	r0, [pc, #272]	@ (8002624 <Map1_Load+0xb0c>)
 8002512:	f7ff fa27 	bl	8001964 <Map_AddTile>

  // ===== BLOQUES CENTRALES ADICIONALES =====
  Map_AddTile(&g_current_map, 100, 200, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 8002516:	4b45      	ldr	r3, [pc, #276]	@ (800262c <Map1_Load+0xb14>)
 8002518:	9304      	str	r3, [sp, #16]
 800251a:	2300      	movs	r3, #0
 800251c:	9303      	str	r3, [sp, #12]
 800251e:	2300      	movs	r3, #0
 8002520:	9302      	str	r3, [sp, #8]
 8002522:	2302      	movs	r3, #2
 8002524:	9301      	str	r3, [sp, #4]
 8002526:	2308      	movs	r3, #8
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	2310      	movs	r3, #16
 800252c:	22c8      	movs	r2, #200	@ 0xc8
 800252e:	2164      	movs	r1, #100	@ 0x64
 8002530:	483c      	ldr	r0, [pc, #240]	@ (8002624 <Map1_Load+0xb0c>)
 8002532:	f7ff fa17 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 100, 208, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 8002536:	4b3d      	ldr	r3, [pc, #244]	@ (800262c <Map1_Load+0xb14>)
 8002538:	9304      	str	r3, [sp, #16]
 800253a:	2300      	movs	r3, #0
 800253c:	9303      	str	r3, [sp, #12]
 800253e:	2300      	movs	r3, #0
 8002540:	9302      	str	r3, [sp, #8]
 8002542:	2302      	movs	r3, #2
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	2308      	movs	r3, #8
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	2310      	movs	r3, #16
 800254c:	22d0      	movs	r2, #208	@ 0xd0
 800254e:	2164      	movs	r1, #100	@ 0x64
 8002550:	4834      	ldr	r0, [pc, #208]	@ (8002624 <Map1_Load+0xb0c>)
 8002552:	f7ff fa07 	bl	8001964 <Map_AddTile>

  for (int x = 210; x < 242; x += 16) {
 8002556:	23d2      	movs	r3, #210	@ 0xd2
 8002558:	647b      	str	r3, [r7, #68]	@ 0x44
 800255a:	e022      	b.n	80025a2 <Map1_Load+0xa8a>
    Map_AddTile(&g_current_map, x, 27, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 800255c:	4b32      	ldr	r3, [pc, #200]	@ (8002628 <Map1_Load+0xb10>)
 800255e:	9304      	str	r3, [sp, #16]
 8002560:	2300      	movs	r3, #0
 8002562:	9303      	str	r3, [sp, #12]
 8002564:	2301      	movs	r3, #1
 8002566:	9302      	str	r3, [sp, #8]
 8002568:	2301      	movs	r3, #1
 800256a:	9301      	str	r3, [sp, #4]
 800256c:	2308      	movs	r3, #8
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	2310      	movs	r3, #16
 8002572:	221b      	movs	r2, #27
 8002574:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002576:	482b      	ldr	r0, [pc, #172]	@ (8002624 <Map1_Load+0xb0c>)
 8002578:	f7ff f9f4 	bl	8001964 <Map_AddTile>
    Map_AddTile(&g_current_map, x, 19, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 800257c:	4b2a      	ldr	r3, [pc, #168]	@ (8002628 <Map1_Load+0xb10>)
 800257e:	9304      	str	r3, [sp, #16]
 8002580:	2300      	movs	r3, #0
 8002582:	9303      	str	r3, [sp, #12]
 8002584:	2301      	movs	r3, #1
 8002586:	9302      	str	r3, [sp, #8]
 8002588:	2301      	movs	r3, #1
 800258a:	9301      	str	r3, [sp, #4]
 800258c:	2308      	movs	r3, #8
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	2310      	movs	r3, #16
 8002592:	2213      	movs	r2, #19
 8002594:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002596:	4823      	ldr	r0, [pc, #140]	@ (8002624 <Map1_Load+0xb0c>)
 8002598:	f7ff f9e4 	bl	8001964 <Map_AddTile>
  for (int x = 210; x < 242; x += 16) {
 800259c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800259e:	3310      	adds	r3, #16
 80025a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80025a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025a4:	2bf1      	cmp	r3, #241	@ 0xf1
 80025a6:	ddd9      	ble.n	800255c <Map1_Load+0xa44>
  }

  Map_AddTile(&g_current_map, 210, 35, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 80025a8:	4b20      	ldr	r3, [pc, #128]	@ (800262c <Map1_Load+0xb14>)
 80025aa:	9304      	str	r3, [sp, #16]
 80025ac:	2300      	movs	r3, #0
 80025ae:	9303      	str	r3, [sp, #12]
 80025b0:	2300      	movs	r3, #0
 80025b2:	9302      	str	r3, [sp, #8]
 80025b4:	2302      	movs	r3, #2
 80025b6:	9301      	str	r3, [sp, #4]
 80025b8:	2308      	movs	r3, #8
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	2310      	movs	r3, #16
 80025be:	2223      	movs	r2, #35	@ 0x23
 80025c0:	21d2      	movs	r1, #210	@ 0xd2
 80025c2:	4818      	ldr	r0, [pc, #96]	@ (8002624 <Map1_Load+0xb0c>)
 80025c4:	f7ff f9ce 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 210, 43, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 80025c8:	4b18      	ldr	r3, [pc, #96]	@ (800262c <Map1_Load+0xb14>)
 80025ca:	9304      	str	r3, [sp, #16]
 80025cc:	2300      	movs	r3, #0
 80025ce:	9303      	str	r3, [sp, #12]
 80025d0:	2300      	movs	r3, #0
 80025d2:	9302      	str	r3, [sp, #8]
 80025d4:	2302      	movs	r3, #2
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	2308      	movs	r3, #8
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	2310      	movs	r3, #16
 80025de:	222b      	movs	r2, #43	@ 0x2b
 80025e0:	21d2      	movs	r1, #210	@ 0xd2
 80025e2:	4810      	ldr	r0, [pc, #64]	@ (8002624 <Map1_Load+0xb0c>)
 80025e4:	f7ff f9be 	bl	8001964 <Map_AddTile>

  snprintf(dbg, sizeof(dbg), "[MAP1] Cargados %d tiles\r\n", g_current_map.tile_count);
 80025e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002624 <Map1_Load+0xb0c>)
 80025ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025ee:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 80025f2:	1d38      	adds	r0, r7, #4
 80025f4:	4a0e      	ldr	r2, [pc, #56]	@ (8002630 <Map1_Load+0xb18>)
 80025f6:	2140      	movs	r1, #64	@ 0x40
 80025f8:	f005 fdf6 	bl	80081e8 <sniprintf>
  DebugPC(dbg);
 80025fc:	1d3b      	adds	r3, r7, #4
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fb30 	bl	8000c64 <DebugPC>

  DebugPC("[MAP1] Dibujando mapa...\r\n");
 8002604:	480b      	ldr	r0, [pc, #44]	@ (8002634 <Map1_Load+0xb1c>)
 8002606:	f7fe fb2d 	bl	8000c64 <DebugPC>
  Map_Draw(&g_current_map);
 800260a:	4806      	ldr	r0, [pc, #24]	@ (8002624 <Map1_Load+0xb0c>)
 800260c:	f7ff f9f2 	bl	80019f4 <Map_Draw>

  DebugPC("[MAP1] Mapa 1 cargado exitosamente\r\n");
 8002610:	4809      	ldr	r0, [pc, #36]	@ (8002638 <Map1_Load+0xb20>)
 8002612:	f7fe fb27 	bl	8000c64 <DebugPC>
}
 8002616:	bf00      	nop
 8002618:	37a8      	adds	r7, #168	@ 0xa8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	08033704 	.word	0x08033704
 8002624:	2000bb2c 	.word	0x2000bb2c
 8002628:	08034684 	.word	0x08034684
 800262c:	08034184 	.word	0x08034184
 8002630:	08008cb4 	.word	0x08008cb4
 8002634:	08008cd0 	.word	0x08008cd0
 8002638:	08008cec 	.word	0x08008cec

0800263c <Map2_Load>:

static void Map2_Load(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b0a4      	sub	sp, #144	@ 0x90
 8002640:	af06      	add	r7, sp, #24
  char dbg[64];
  DebugPC("\r\n========================================\r\n");
 8002642:	48ab      	ldr	r0, [pc, #684]	@ (80028f0 <Map2_Load+0x2b4>)
 8002644:	f7fe fb0e 	bl	8000c64 <DebugPC>
  DebugPC("[MAP2] Iniciando carga del Mapa 2...\r\n");
 8002648:	48aa      	ldr	r0, [pc, #680]	@ (80028f4 <Map2_Load+0x2b8>)
 800264a:	f7fe fb0b 	bl	8000c64 <DebugPC>
  DebugPC("========================================\r\n");
 800264e:	48aa      	ldr	r0, [pc, #680]	@ (80028f8 <Map2_Load+0x2bc>)
 8002650:	f7fe fb08 	bl	8000c64 <DebugPC>

  Map_Clear(&g_current_map);
 8002654:	48a9      	ldr	r0, [pc, #676]	@ (80028fc <Map2_Load+0x2c0>)
 8002656:	f7ff f96f 	bl	8001938 <Map_Clear>
  g_current_map.map_id = MAP_2_ID;
 800265a:	4ba8      	ldr	r3, [pc, #672]	@ (80028fc <Map2_Load+0x2c0>)
 800265c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2c02 	strb.w	r2, [r3, #3074]	@ 0xc02

  DebugPC("[MAP2] Estructura limpiada, agregando tiles...\r\n");
 8002666:	48a6      	ldr	r0, [pc, #664]	@ (8002900 <Map2_Load+0x2c4>)
 8002668:	f7fe fafc 	bl	8000c64 <DebugPC>

  // ===== BASE INFERIOR (Águila) =====
  DebugPC("[MAP2] Agregando base inferior...\r\n");
 800266c:	48a5      	ldr	r0, [pc, #660]	@ (8002904 <Map2_Load+0x2c8>)
 800266e:	f7fe faf9 	bl	8000c64 <DebugPC>
  Map_AddTile(&g_current_map, 144, 208, 32, 16, TILE_BRICK, 1, 0, casita_ladrillo);
 8002672:	4ba5      	ldr	r3, [pc, #660]	@ (8002908 <Map2_Load+0x2cc>)
 8002674:	9304      	str	r3, [sp, #16]
 8002676:	2300      	movs	r3, #0
 8002678:	9303      	str	r3, [sp, #12]
 800267a:	2301      	movs	r3, #1
 800267c:	9302      	str	r3, [sp, #8]
 800267e:	2301      	movs	r3, #1
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	2310      	movs	r3, #16
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	2320      	movs	r3, #32
 8002688:	22d0      	movs	r2, #208	@ 0xd0
 800268a:	2190      	movs	r1, #144	@ 0x90
 800268c:	489b      	ldr	r0, [pc, #620]	@ (80028fc <Map2_Load+0x2c0>)
 800268e:	f7ff f969 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 168, 224, 8, 8, TILE_BRICK, 1, 0, bloqueladrillo_8_8);
 8002692:	4b9e      	ldr	r3, [pc, #632]	@ (800290c <Map2_Load+0x2d0>)
 8002694:	9304      	str	r3, [sp, #16]
 8002696:	2300      	movs	r3, #0
 8002698:	9303      	str	r3, [sp, #12]
 800269a:	2301      	movs	r3, #1
 800269c:	9302      	str	r3, [sp, #8]
 800269e:	2301      	movs	r3, #1
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	2308      	movs	r3, #8
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	2308      	movs	r3, #8
 80026a8:	22e0      	movs	r2, #224	@ 0xe0
 80026aa:	21a8      	movs	r1, #168	@ 0xa8
 80026ac:	4893      	ldr	r0, [pc, #588]	@ (80028fc <Map2_Load+0x2c0>)
 80026ae:	f7ff f959 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 168, 232, 8, 8, TILE_BRICK, 1, 0, bloqueladrillo_8_8);
 80026b2:	4b96      	ldr	r3, [pc, #600]	@ (800290c <Map2_Load+0x2d0>)
 80026b4:	9304      	str	r3, [sp, #16]
 80026b6:	2300      	movs	r3, #0
 80026b8:	9303      	str	r3, [sp, #12]
 80026ba:	2301      	movs	r3, #1
 80026bc:	9302      	str	r3, [sp, #8]
 80026be:	2301      	movs	r3, #1
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	2308      	movs	r3, #8
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	2308      	movs	r3, #8
 80026c8:	22e8      	movs	r2, #232	@ 0xe8
 80026ca:	21a8      	movs	r1, #168	@ 0xa8
 80026cc:	488b      	ldr	r0, [pc, #556]	@ (80028fc <Map2_Load+0x2c0>)
 80026ce:	f7ff f949 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 144, 232, 8, 8, TILE_BRICK, 1, 0, bloqueladrillo_8_8);
 80026d2:	4b8e      	ldr	r3, [pc, #568]	@ (800290c <Map2_Load+0x2d0>)
 80026d4:	9304      	str	r3, [sp, #16]
 80026d6:	2300      	movs	r3, #0
 80026d8:	9303      	str	r3, [sp, #12]
 80026da:	2301      	movs	r3, #1
 80026dc:	9302      	str	r3, [sp, #8]
 80026de:	2301      	movs	r3, #1
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	2308      	movs	r3, #8
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	2308      	movs	r3, #8
 80026e8:	22e8      	movs	r2, #232	@ 0xe8
 80026ea:	2190      	movs	r1, #144	@ 0x90
 80026ec:	4883      	ldr	r0, [pc, #524]	@ (80028fc <Map2_Load+0x2c0>)
 80026ee:	f7ff f939 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 144, 224, 8, 8, TILE_BRICK, 1, 0, bloqueladrillo_8_8);
 80026f2:	4b86      	ldr	r3, [pc, #536]	@ (800290c <Map2_Load+0x2d0>)
 80026f4:	9304      	str	r3, [sp, #16]
 80026f6:	2300      	movs	r3, #0
 80026f8:	9303      	str	r3, [sp, #12]
 80026fa:	2301      	movs	r3, #1
 80026fc:	9302      	str	r3, [sp, #8]
 80026fe:	2301      	movs	r3, #1
 8002700:	9301      	str	r3, [sp, #4]
 8002702:	2308      	movs	r3, #8
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	2308      	movs	r3, #8
 8002708:	22e0      	movs	r2, #224	@ 0xe0
 800270a:	2190      	movs	r1, #144	@ 0x90
 800270c:	487b      	ldr	r0, [pc, #492]	@ (80028fc <Map2_Load+0x2c0>)
 800270e:	f7ff f929 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 152, 232, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002712:	4b7f      	ldr	r3, [pc, #508]	@ (8002910 <Map2_Load+0x2d4>)
 8002714:	9304      	str	r3, [sp, #16]
 8002716:	2300      	movs	r3, #0
 8002718:	9303      	str	r3, [sp, #12]
 800271a:	2301      	movs	r3, #1
 800271c:	9302      	str	r3, [sp, #8]
 800271e:	2301      	movs	r3, #1
 8002720:	9301      	str	r3, [sp, #4]
 8002722:	2308      	movs	r3, #8
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	2310      	movs	r3, #16
 8002728:	22e8      	movs	r2, #232	@ 0xe8
 800272a:	2198      	movs	r1, #152	@ 0x98
 800272c:	4873      	ldr	r0, [pc, #460]	@ (80028fc <Map2_Load+0x2c0>)
 800272e:	f7ff f919 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 152, 216, 16, 16, TILE_BASE, 1, 0, aguila);
 8002732:	4b78      	ldr	r3, [pc, #480]	@ (8002914 <Map2_Load+0x2d8>)
 8002734:	9304      	str	r3, [sp, #16]
 8002736:	2300      	movs	r3, #0
 8002738:	9303      	str	r3, [sp, #12]
 800273a:	2301      	movs	r3, #1
 800273c:	9302      	str	r3, [sp, #8]
 800273e:	2305      	movs	r3, #5
 8002740:	9301      	str	r3, [sp, #4]
 8002742:	2310      	movs	r3, #16
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	2310      	movs	r3, #16
 8002748:	22d8      	movs	r2, #216	@ 0xd8
 800274a:	2198      	movs	r1, #152	@ 0x98
 800274c:	486b      	ldr	r0, [pc, #428]	@ (80028fc <Map2_Load+0x2c0>)
 800274e:	f7ff f909 	bl	8001964 <Map_AddTile>
  g_current_map.tiles[g_current_map.tile_count-1].owner_id = 1;
 8002752:	4b6a      	ldr	r3, [pc, #424]	@ (80028fc <Map2_Load+0x2c0>)
 8002754:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002758:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 800275c:	1e5a      	subs	r2, r3, #1
 800275e:	4967      	ldr	r1, [pc, #412]	@ (80028fc <Map2_Load+0x2c0>)
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	3318      	adds	r3, #24
 800276c:	2201      	movs	r2, #1
 800276e:	701a      	strb	r2, [r3, #0]

  // ===== BASE SUPERIOR (Águila invertida) =====
  DebugPC("[MAP2] Agregando base superior...\r\n");
 8002770:	4869      	ldr	r0, [pc, #420]	@ (8002918 <Map2_Load+0x2dc>)
 8002772:	f7fe fa77 	bl	8000c64 <DebugPC>
  Map_AddTile(&g_current_map, 144, 16, 32, 16, TILE_BRICK, 1, 0, casitaladrillo_invertida);
 8002776:	4b69      	ldr	r3, [pc, #420]	@ (800291c <Map2_Load+0x2e0>)
 8002778:	9304      	str	r3, [sp, #16]
 800277a:	2300      	movs	r3, #0
 800277c:	9303      	str	r3, [sp, #12]
 800277e:	2301      	movs	r3, #1
 8002780:	9302      	str	r3, [sp, #8]
 8002782:	2301      	movs	r3, #1
 8002784:	9301      	str	r3, [sp, #4]
 8002786:	2310      	movs	r3, #16
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	2320      	movs	r3, #32
 800278c:	2210      	movs	r2, #16
 800278e:	2190      	movs	r1, #144	@ 0x90
 8002790:	485a      	ldr	r0, [pc, #360]	@ (80028fc <Map2_Load+0x2c0>)
 8002792:	f7ff f8e7 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 168, 8, 8, 8, TILE_BRICK, 1, 0, bloqueladrillo_8_8);
 8002796:	4b5d      	ldr	r3, [pc, #372]	@ (800290c <Map2_Load+0x2d0>)
 8002798:	9304      	str	r3, [sp, #16]
 800279a:	2300      	movs	r3, #0
 800279c:	9303      	str	r3, [sp, #12]
 800279e:	2301      	movs	r3, #1
 80027a0:	9302      	str	r3, [sp, #8]
 80027a2:	2301      	movs	r3, #1
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	2308      	movs	r3, #8
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	2308      	movs	r3, #8
 80027ac:	2208      	movs	r2, #8
 80027ae:	21a8      	movs	r1, #168	@ 0xa8
 80027b0:	4852      	ldr	r0, [pc, #328]	@ (80028fc <Map2_Load+0x2c0>)
 80027b2:	f7ff f8d7 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 168, 0, 8, 8, TILE_BRICK, 1, 0, bloqueladrillo_8_8);
 80027b6:	4b55      	ldr	r3, [pc, #340]	@ (800290c <Map2_Load+0x2d0>)
 80027b8:	9304      	str	r3, [sp, #16]
 80027ba:	2300      	movs	r3, #0
 80027bc:	9303      	str	r3, [sp, #12]
 80027be:	2301      	movs	r3, #1
 80027c0:	9302      	str	r3, [sp, #8]
 80027c2:	2301      	movs	r3, #1
 80027c4:	9301      	str	r3, [sp, #4]
 80027c6:	2308      	movs	r3, #8
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	2308      	movs	r3, #8
 80027cc:	2200      	movs	r2, #0
 80027ce:	21a8      	movs	r1, #168	@ 0xa8
 80027d0:	484a      	ldr	r0, [pc, #296]	@ (80028fc <Map2_Load+0x2c0>)
 80027d2:	f7ff f8c7 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 144, 8, 8, 8, TILE_BRICK, 1, 0, bloqueladrillo_8_8);
 80027d6:	4b4d      	ldr	r3, [pc, #308]	@ (800290c <Map2_Load+0x2d0>)
 80027d8:	9304      	str	r3, [sp, #16]
 80027da:	2300      	movs	r3, #0
 80027dc:	9303      	str	r3, [sp, #12]
 80027de:	2301      	movs	r3, #1
 80027e0:	9302      	str	r3, [sp, #8]
 80027e2:	2301      	movs	r3, #1
 80027e4:	9301      	str	r3, [sp, #4]
 80027e6:	2308      	movs	r3, #8
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	2308      	movs	r3, #8
 80027ec:	2208      	movs	r2, #8
 80027ee:	2190      	movs	r1, #144	@ 0x90
 80027f0:	4842      	ldr	r0, [pc, #264]	@ (80028fc <Map2_Load+0x2c0>)
 80027f2:	f7ff f8b7 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 144, 0, 8, 8, TILE_BRICK, 1, 0, bloqueladrillo_8_8);
 80027f6:	4b45      	ldr	r3, [pc, #276]	@ (800290c <Map2_Load+0x2d0>)
 80027f8:	9304      	str	r3, [sp, #16]
 80027fa:	2300      	movs	r3, #0
 80027fc:	9303      	str	r3, [sp, #12]
 80027fe:	2301      	movs	r3, #1
 8002800:	9302      	str	r3, [sp, #8]
 8002802:	2301      	movs	r3, #1
 8002804:	9301      	str	r3, [sp, #4]
 8002806:	2308      	movs	r3, #8
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	2308      	movs	r3, #8
 800280c:	2200      	movs	r2, #0
 800280e:	2190      	movs	r1, #144	@ 0x90
 8002810:	483a      	ldr	r0, [pc, #232]	@ (80028fc <Map2_Load+0x2c0>)
 8002812:	f7ff f8a7 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 152, 0, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002816:	4b3e      	ldr	r3, [pc, #248]	@ (8002910 <Map2_Load+0x2d4>)
 8002818:	9304      	str	r3, [sp, #16]
 800281a:	2300      	movs	r3, #0
 800281c:	9303      	str	r3, [sp, #12]
 800281e:	2301      	movs	r3, #1
 8002820:	9302      	str	r3, [sp, #8]
 8002822:	2301      	movs	r3, #1
 8002824:	9301      	str	r3, [sp, #4]
 8002826:	2308      	movs	r3, #8
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	2310      	movs	r3, #16
 800282c:	2200      	movs	r2, #0
 800282e:	2198      	movs	r1, #152	@ 0x98
 8002830:	4832      	ldr	r0, [pc, #200]	@ (80028fc <Map2_Load+0x2c0>)
 8002832:	f7ff f897 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 152, 8, 16, 16, TILE_BASE, 1, 0, aguila);
 8002836:	4b37      	ldr	r3, [pc, #220]	@ (8002914 <Map2_Load+0x2d8>)
 8002838:	9304      	str	r3, [sp, #16]
 800283a:	2300      	movs	r3, #0
 800283c:	9303      	str	r3, [sp, #12]
 800283e:	2301      	movs	r3, #1
 8002840:	9302      	str	r3, [sp, #8]
 8002842:	2305      	movs	r3, #5
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	2310      	movs	r3, #16
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2310      	movs	r3, #16
 800284c:	2208      	movs	r2, #8
 800284e:	2198      	movs	r1, #152	@ 0x98
 8002850:	482a      	ldr	r0, [pc, #168]	@ (80028fc <Map2_Load+0x2c0>)
 8002852:	f7ff f887 	bl	8001964 <Map_AddTile>
  g_current_map.tiles[g_current_map.tile_count-1].owner_id = 2;
 8002856:	4b29      	ldr	r3, [pc, #164]	@ (80028fc <Map2_Load+0x2c0>)
 8002858:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800285c:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 8002860:	1e5a      	subs	r2, r3, #1
 8002862:	4926      	ldr	r1, [pc, #152]	@ (80028fc <Map2_Load+0x2c0>)
 8002864:	4613      	mov	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	1a9b      	subs	r3, r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	3318      	adds	r3, #24
 8002870:	2202      	movs	r2, #2
 8002872:	701a      	strb	r2, [r3, #0]

  snprintf(dbg, sizeof(dbg), "[MAP2] Bases agregadas. Tiles: %d\r\n", g_current_map.tile_count);
 8002874:	4b21      	ldr	r3, [pc, #132]	@ (80028fc <Map2_Load+0x2c0>)
 8002876:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800287a:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 800287e:	1d38      	adds	r0, r7, #4
 8002880:	4a27      	ldr	r2, [pc, #156]	@ (8002920 <Map2_Load+0x2e4>)
 8002882:	2140      	movs	r1, #64	@ 0x40
 8002884:	f005 fcb0 	bl	80081e8 <sniprintf>
  DebugPC(dbg);
 8002888:	1d3b      	adds	r3, r7, #4
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe f9ea 	bl	8000c64 <DebugPC>

  // ===== COLUMNAS LATERALES IZQUIERDAS =====
  DebugPC("[MAP2] Agregando columnas izquierdas...\r\n");
 8002890:	4824      	ldr	r0, [pc, #144]	@ (8002924 <Map2_Load+0x2e8>)
 8002892:	f7fe f9e7 	bl	8000c64 <DebugPC>

  // Columna izquierda inferior (y=120 a 240)
  for (int y = 120; y < 240; y += 8) {
 8002896:	2378      	movs	r3, #120	@ 0x78
 8002898:	677b      	str	r3, [r7, #116]	@ 0x74
 800289a:	e022      	b.n	80028e2 <Map2_Load+0x2a6>
    Map_AddTile(&g_current_map, 0, y, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 800289c:	4b1c      	ldr	r3, [pc, #112]	@ (8002910 <Map2_Load+0x2d4>)
 800289e:	9304      	str	r3, [sp, #16]
 80028a0:	2300      	movs	r3, #0
 80028a2:	9303      	str	r3, [sp, #12]
 80028a4:	2301      	movs	r3, #1
 80028a6:	9302      	str	r3, [sp, #8]
 80028a8:	2301      	movs	r3, #1
 80028aa:	9301      	str	r3, [sp, #4]
 80028ac:	2308      	movs	r3, #8
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	2310      	movs	r3, #16
 80028b2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80028b4:	2100      	movs	r1, #0
 80028b6:	4811      	ldr	r0, [pc, #68]	@ (80028fc <Map2_Load+0x2c0>)
 80028b8:	f7ff f854 	bl	8001964 <Map_AddTile>
    Map_AddTile(&g_current_map, 16, y, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 80028bc:	4b14      	ldr	r3, [pc, #80]	@ (8002910 <Map2_Load+0x2d4>)
 80028be:	9304      	str	r3, [sp, #16]
 80028c0:	2300      	movs	r3, #0
 80028c2:	9303      	str	r3, [sp, #12]
 80028c4:	2301      	movs	r3, #1
 80028c6:	9302      	str	r3, [sp, #8]
 80028c8:	2301      	movs	r3, #1
 80028ca:	9301      	str	r3, [sp, #4]
 80028cc:	2308      	movs	r3, #8
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	2310      	movs	r3, #16
 80028d2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80028d4:	2110      	movs	r1, #16
 80028d6:	4809      	ldr	r0, [pc, #36]	@ (80028fc <Map2_Load+0x2c0>)
 80028d8:	f7ff f844 	bl	8001964 <Map_AddTile>
  for (int y = 120; y < 240; y += 8) {
 80028dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028de:	3308      	adds	r3, #8
 80028e0:	677b      	str	r3, [r7, #116]	@ 0x74
 80028e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028e4:	2bef      	cmp	r3, #239	@ 0xef
 80028e6:	ddd9      	ble.n	800289c <Map2_Load+0x260>
  }

  // Bloques grises centro-izquierda (y=104 a 136)
  for (int y = 104; y < 136; y += 8) {
 80028e8:	2368      	movs	r3, #104	@ 0x68
 80028ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80028ec:	e02f      	b.n	800294e <Map2_Load+0x312>
 80028ee:	bf00      	nop
 80028f0:	08008d14 	.word	0x08008d14
 80028f4:	08008d44 	.word	0x08008d44
 80028f8:	08008d6c 	.word	0x08008d6c
 80028fc:	2000bb2c 	.word	0x2000bb2c
 8002900:	08008d98 	.word	0x08008d98
 8002904:	08008dcc 	.word	0x08008dcc
 8002908:	08033b04 	.word	0x08033b04
 800290c:	08033684 	.word	0x08033684
 8002910:	08034684 	.word	0x08034684
 8002914:	08033f04 	.word	0x08033f04
 8002918:	08008df0 	.word	0x08008df0
 800291c:	08034b84 	.word	0x08034b84
 8002920:	08008e14 	.word	0x08008e14
 8002924:	08008e38 	.word	0x08008e38
    Map_AddTile(&g_current_map, 16, y, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 8002928:	4b99      	ldr	r3, [pc, #612]	@ (8002b90 <Map2_Load+0x554>)
 800292a:	9304      	str	r3, [sp, #16]
 800292c:	2300      	movs	r3, #0
 800292e:	9303      	str	r3, [sp, #12]
 8002930:	2300      	movs	r3, #0
 8002932:	9302      	str	r3, [sp, #8]
 8002934:	2302      	movs	r3, #2
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	2308      	movs	r3, #8
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	2310      	movs	r3, #16
 800293e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002940:	2110      	movs	r1, #16
 8002942:	4894      	ldr	r0, [pc, #592]	@ (8002b94 <Map2_Load+0x558>)
 8002944:	f7ff f80e 	bl	8001964 <Map_AddTile>
  for (int y = 104; y < 136; y += 8) {
 8002948:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800294a:	3308      	adds	r3, #8
 800294c:	673b      	str	r3, [r7, #112]	@ 0x70
 800294e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002950:	2b87      	cmp	r3, #135	@ 0x87
 8002952:	dde9      	ble.n	8002928 <Map2_Load+0x2ec>
  }

  // Bloques grises adicionales
  Map_AddTile(&g_current_map, 16, 152, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 8002954:	4b8e      	ldr	r3, [pc, #568]	@ (8002b90 <Map2_Load+0x554>)
 8002956:	9304      	str	r3, [sp, #16]
 8002958:	2300      	movs	r3, #0
 800295a:	9303      	str	r3, [sp, #12]
 800295c:	2300      	movs	r3, #0
 800295e:	9302      	str	r3, [sp, #8]
 8002960:	2302      	movs	r3, #2
 8002962:	9301      	str	r3, [sp, #4]
 8002964:	2308      	movs	r3, #8
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	2310      	movs	r3, #16
 800296a:	2298      	movs	r2, #152	@ 0x98
 800296c:	2110      	movs	r1, #16
 800296e:	4889      	ldr	r0, [pc, #548]	@ (8002b94 <Map2_Load+0x558>)
 8002970:	f7fe fff8 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 16, 160, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 8002974:	4b86      	ldr	r3, [pc, #536]	@ (8002b90 <Map2_Load+0x554>)
 8002976:	9304      	str	r3, [sp, #16]
 8002978:	2300      	movs	r3, #0
 800297a:	9303      	str	r3, [sp, #12]
 800297c:	2300      	movs	r3, #0
 800297e:	9302      	str	r3, [sp, #8]
 8002980:	2302      	movs	r3, #2
 8002982:	9301      	str	r3, [sp, #4]
 8002984:	2308      	movs	r3, #8
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	2310      	movs	r3, #16
 800298a:	22a0      	movs	r2, #160	@ 0xa0
 800298c:	2110      	movs	r1, #16
 800298e:	4881      	ldr	r0, [pc, #516]	@ (8002b94 <Map2_Load+0x558>)
 8002990:	f7fe ffe8 	bl	8001964 <Map_AddTile>

  // ===== COLUMNAS LATERALES DERECHAS =====
  DebugPC("[MAP2] Agregando columnas derechas...\r\n");
 8002994:	4880      	ldr	r0, [pc, #512]	@ (8002b98 <Map2_Load+0x55c>)
 8002996:	f7fe f965 	bl	8000c64 <DebugPC>

  // Columna derecha superior (y=0 a 120)
  for (int y = 0; y < 120; y += 8) {
 800299a:	2300      	movs	r3, #0
 800299c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800299e:	e024      	b.n	80029ea <Map2_Load+0x3ae>
    Map_AddTile(&g_current_map, 304, y, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 80029a0:	4b7e      	ldr	r3, [pc, #504]	@ (8002b9c <Map2_Load+0x560>)
 80029a2:	9304      	str	r3, [sp, #16]
 80029a4:	2300      	movs	r3, #0
 80029a6:	9303      	str	r3, [sp, #12]
 80029a8:	2301      	movs	r3, #1
 80029aa:	9302      	str	r3, [sp, #8]
 80029ac:	2301      	movs	r3, #1
 80029ae:	9301      	str	r3, [sp, #4]
 80029b0:	2308      	movs	r3, #8
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	2310      	movs	r3, #16
 80029b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80029b8:	f44f 7198 	mov.w	r1, #304	@ 0x130
 80029bc:	4875      	ldr	r0, [pc, #468]	@ (8002b94 <Map2_Load+0x558>)
 80029be:	f7fe ffd1 	bl	8001964 <Map_AddTile>
    Map_AddTile(&g_current_map, 288, y, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 80029c2:	4b76      	ldr	r3, [pc, #472]	@ (8002b9c <Map2_Load+0x560>)
 80029c4:	9304      	str	r3, [sp, #16]
 80029c6:	2300      	movs	r3, #0
 80029c8:	9303      	str	r3, [sp, #12]
 80029ca:	2301      	movs	r3, #1
 80029cc:	9302      	str	r3, [sp, #8]
 80029ce:	2301      	movs	r3, #1
 80029d0:	9301      	str	r3, [sp, #4]
 80029d2:	2308      	movs	r3, #8
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	2310      	movs	r3, #16
 80029d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80029da:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80029de:	486d      	ldr	r0, [pc, #436]	@ (8002b94 <Map2_Load+0x558>)
 80029e0:	f7fe ffc0 	bl	8001964 <Map_AddTile>
  for (int y = 0; y < 120; y += 8) {
 80029e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029e6:	3308      	adds	r3, #8
 80029e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80029ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029ec:	2b77      	cmp	r3, #119	@ 0x77
 80029ee:	ddd7      	ble.n	80029a0 <Map2_Load+0x364>
  }

  // Bloques grises centro-derecha (y=104 a 136)
  for (int y = 104; y < 136; y += 8) {
 80029f0:	2368      	movs	r3, #104	@ 0x68
 80029f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029f4:	e013      	b.n	8002a1e <Map2_Load+0x3e2>
    Map_AddTile(&g_current_map, 288, y, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 80029f6:	4b66      	ldr	r3, [pc, #408]	@ (8002b90 <Map2_Load+0x554>)
 80029f8:	9304      	str	r3, [sp, #16]
 80029fa:	2300      	movs	r3, #0
 80029fc:	9303      	str	r3, [sp, #12]
 80029fe:	2300      	movs	r3, #0
 8002a00:	9302      	str	r3, [sp, #8]
 8002a02:	2302      	movs	r3, #2
 8002a04:	9301      	str	r3, [sp, #4]
 8002a06:	2308      	movs	r3, #8
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	2310      	movs	r3, #16
 8002a0c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002a0e:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8002a12:	4860      	ldr	r0, [pc, #384]	@ (8002b94 <Map2_Load+0x558>)
 8002a14:	f7fe ffa6 	bl	8001964 <Map_AddTile>
  for (int y = 104; y < 136; y += 8) {
 8002a18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a1a:	3308      	adds	r3, #8
 8002a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a20:	2b87      	cmp	r3, #135	@ 0x87
 8002a22:	dde8      	ble.n	80029f6 <Map2_Load+0x3ba>
  }

  // Bloques grises adicionales
  Map_AddTile(&g_current_map, 288, 72, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 8002a24:	4b5a      	ldr	r3, [pc, #360]	@ (8002b90 <Map2_Load+0x554>)
 8002a26:	9304      	str	r3, [sp, #16]
 8002a28:	2300      	movs	r3, #0
 8002a2a:	9303      	str	r3, [sp, #12]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	9302      	str	r3, [sp, #8]
 8002a30:	2302      	movs	r3, #2
 8002a32:	9301      	str	r3, [sp, #4]
 8002a34:	2308      	movs	r3, #8
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	2310      	movs	r3, #16
 8002a3a:	2248      	movs	r2, #72	@ 0x48
 8002a3c:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8002a40:	4854      	ldr	r0, [pc, #336]	@ (8002b94 <Map2_Load+0x558>)
 8002a42:	f7fe ff8f 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 288, 80, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 8002a46:	4b52      	ldr	r3, [pc, #328]	@ (8002b90 <Map2_Load+0x554>)
 8002a48:	9304      	str	r3, [sp, #16]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	9303      	str	r3, [sp, #12]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	9302      	str	r3, [sp, #8]
 8002a52:	2302      	movs	r3, #2
 8002a54:	9301      	str	r3, [sp, #4]
 8002a56:	2308      	movs	r3, #8
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	2310      	movs	r3, #16
 8002a5c:	2250      	movs	r2, #80	@ 0x50
 8002a5e:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8002a62:	484c      	ldr	r0, [pc, #304]	@ (8002b94 <Map2_Load+0x558>)
 8002a64:	f7fe ff7e 	bl	8001964 <Map_AddTile>

  snprintf(dbg, sizeof(dbg), "[MAP2] Columnas laterales agregadas. Tiles: %d\r\n", g_current_map.tile_count);
 8002a68:	4b4a      	ldr	r3, [pc, #296]	@ (8002b94 <Map2_Load+0x558>)
 8002a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a6e:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 8002a72:	1d38      	adds	r0, r7, #4
 8002a74:	4a4a      	ldr	r2, [pc, #296]	@ (8002ba0 <Map2_Load+0x564>)
 8002a76:	2140      	movs	r1, #64	@ 0x40
 8002a78:	f005 fbb6 	bl	80081e8 <sniprintf>
  DebugPC(dbg);
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe f8f0 	bl	8000c64 <DebugPC>

  // ===== ESTRUCTURA SUPERIOR IZQUIERDA =====
  DebugPC("[MAP2] Agregando estructura superior izquierda...\r\n");
 8002a84:	4847      	ldr	r0, [pc, #284]	@ (8002ba4 <Map2_Load+0x568>)
 8002a86:	f7fe f8ed 	bl	8000c64 <DebugPC>

  // Columna vertical (y=16 a 88)
  for (int y = 16; y < 88; y += 8) {
 8002a8a:	2310      	movs	r3, #16
 8002a8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a8e:	e012      	b.n	8002ab6 <Map2_Load+0x47a>
    Map_AddTile(&g_current_map, 32, y, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002a90:	4b42      	ldr	r3, [pc, #264]	@ (8002b9c <Map2_Load+0x560>)
 8002a92:	9304      	str	r3, [sp, #16]
 8002a94:	2300      	movs	r3, #0
 8002a96:	9303      	str	r3, [sp, #12]
 8002a98:	2301      	movs	r3, #1
 8002a9a:	9302      	str	r3, [sp, #8]
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	2308      	movs	r3, #8
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	2310      	movs	r3, #16
 8002aa6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002aa8:	2120      	movs	r1, #32
 8002aaa:	483a      	ldr	r0, [pc, #232]	@ (8002b94 <Map2_Load+0x558>)
 8002aac:	f7fe ff5a 	bl	8001964 <Map_AddTile>
  for (int y = 16; y < 88; y += 8) {
 8002ab0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ab2:	3308      	adds	r3, #8
 8002ab4:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ab6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ab8:	2b57      	cmp	r3, #87	@ 0x57
 8002aba:	dde9      	ble.n	8002a90 <Map2_Load+0x454>
  }

  // Filas horizontales superiores (x=32 a 112)
  for (int x = 32; x < 112; x += 16) {
 8002abc:	2320      	movs	r3, #32
 8002abe:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ac0:	e022      	b.n	8002b08 <Map2_Load+0x4cc>
    Map_AddTile(&g_current_map, x, 16, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002ac2:	4b36      	ldr	r3, [pc, #216]	@ (8002b9c <Map2_Load+0x560>)
 8002ac4:	9304      	str	r3, [sp, #16]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	9303      	str	r3, [sp, #12]
 8002aca:	2301      	movs	r3, #1
 8002acc:	9302      	str	r3, [sp, #8]
 8002ace:	2301      	movs	r3, #1
 8002ad0:	9301      	str	r3, [sp, #4]
 8002ad2:	2308      	movs	r3, #8
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	2310      	movs	r3, #16
 8002ad8:	2210      	movs	r2, #16
 8002ada:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002adc:	482d      	ldr	r0, [pc, #180]	@ (8002b94 <Map2_Load+0x558>)
 8002ade:	f7fe ff41 	bl	8001964 <Map_AddTile>
    Map_AddTile(&g_current_map, x, 24, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002ae2:	4b2e      	ldr	r3, [pc, #184]	@ (8002b9c <Map2_Load+0x560>)
 8002ae4:	9304      	str	r3, [sp, #16]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	9303      	str	r3, [sp, #12]
 8002aea:	2301      	movs	r3, #1
 8002aec:	9302      	str	r3, [sp, #8]
 8002aee:	2301      	movs	r3, #1
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	2308      	movs	r3, #8
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	2310      	movs	r3, #16
 8002af8:	2218      	movs	r2, #24
 8002afa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002afc:	4825      	ldr	r0, [pc, #148]	@ (8002b94 <Map2_Load+0x558>)
 8002afe:	f7fe ff31 	bl	8001964 <Map_AddTile>
  for (int x = 32; x < 112; x += 16) {
 8002b02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b04:	3310      	adds	r3, #16
 8002b06:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b0a:	2b6f      	cmp	r3, #111	@ 0x6f
 8002b0c:	ddd9      	ble.n	8002ac2 <Map2_Load+0x486>
  }

  // Bloques grises en esquina
  Map_AddTile(&g_current_map, 32, 48, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 8002b0e:	4b20      	ldr	r3, [pc, #128]	@ (8002b90 <Map2_Load+0x554>)
 8002b10:	9304      	str	r3, [sp, #16]
 8002b12:	2300      	movs	r3, #0
 8002b14:	9303      	str	r3, [sp, #12]
 8002b16:	2300      	movs	r3, #0
 8002b18:	9302      	str	r3, [sp, #8]
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	9301      	str	r3, [sp, #4]
 8002b1e:	2308      	movs	r3, #8
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	2310      	movs	r3, #16
 8002b24:	2230      	movs	r2, #48	@ 0x30
 8002b26:	2120      	movs	r1, #32
 8002b28:	481a      	ldr	r0, [pc, #104]	@ (8002b94 <Map2_Load+0x558>)
 8002b2a:	f7fe ff1b 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 32, 56, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 8002b2e:	4b18      	ldr	r3, [pc, #96]	@ (8002b90 <Map2_Load+0x554>)
 8002b30:	9304      	str	r3, [sp, #16]
 8002b32:	2300      	movs	r3, #0
 8002b34:	9303      	str	r3, [sp, #12]
 8002b36:	2300      	movs	r3, #0
 8002b38:	9302      	str	r3, [sp, #8]
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	9301      	str	r3, [sp, #4]
 8002b3e:	2308      	movs	r3, #8
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	2310      	movs	r3, #16
 8002b44:	2238      	movs	r2, #56	@ 0x38
 8002b46:	2120      	movs	r1, #32
 8002b48:	4812      	ldr	r0, [pc, #72]	@ (8002b94 <Map2_Load+0x558>)
 8002b4a:	f7fe ff0b 	bl	8001964 <Map_AddTile>

  // ===== ESTRUCTURA INFERIOR DERECHA =====
  DebugPC("[MAP2] Agregando estructura inferior derecha...\r\n");
 8002b4e:	4816      	ldr	r0, [pc, #88]	@ (8002ba8 <Map2_Load+0x56c>)
 8002b50:	f7fe f888 	bl	8000c64 <DebugPC>

  // Columna vertical (y=152 a 224)
  for (int y = 152; y < 224; y += 8) {
 8002b54:	2398      	movs	r3, #152	@ 0x98
 8002b56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b58:	e013      	b.n	8002b82 <Map2_Load+0x546>
    Map_AddTile(&g_current_map, 272, y, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002b5a:	4b10      	ldr	r3, [pc, #64]	@ (8002b9c <Map2_Load+0x560>)
 8002b5c:	9304      	str	r3, [sp, #16]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	9303      	str	r3, [sp, #12]
 8002b62:	2301      	movs	r3, #1
 8002b64:	9302      	str	r3, [sp, #8]
 8002b66:	2301      	movs	r3, #1
 8002b68:	9301      	str	r3, [sp, #4]
 8002b6a:	2308      	movs	r3, #8
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	2310      	movs	r3, #16
 8002b70:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002b72:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002b76:	4807      	ldr	r0, [pc, #28]	@ (8002b94 <Map2_Load+0x558>)
 8002b78:	f7fe fef4 	bl	8001964 <Map_AddTile>
  for (int y = 152; y < 224; y += 8) {
 8002b7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b7e:	3308      	adds	r3, #8
 8002b80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b84:	2bdf      	cmp	r3, #223	@ 0xdf
 8002b86:	dde8      	ble.n	8002b5a <Map2_Load+0x51e>
  }

  // Filas horizontales inferiores (x=208 a 272)
  for (int x = 208; x < 272; x += 16) {
 8002b88:	23d0      	movs	r3, #208	@ 0xd0
 8002b8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b8c:	e031      	b.n	8002bf2 <Map2_Load+0x5b6>
 8002b8e:	bf00      	nop
 8002b90:	08034184 	.word	0x08034184
 8002b94:	2000bb2c 	.word	0x2000bb2c
 8002b98:	08008e64 	.word	0x08008e64
 8002b9c:	08034684 	.word	0x08034684
 8002ba0:	08008e8c 	.word	0x08008e8c
 8002ba4:	08008ec0 	.word	0x08008ec0
 8002ba8:	08008ef4 	.word	0x08008ef4
    Map_AddTile(&g_current_map, x, 216, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002bac:	4b77      	ldr	r3, [pc, #476]	@ (8002d8c <Map2_Load+0x750>)
 8002bae:	9304      	str	r3, [sp, #16]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	9303      	str	r3, [sp, #12]
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	9302      	str	r3, [sp, #8]
 8002bb8:	2301      	movs	r3, #1
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	2308      	movs	r3, #8
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	2310      	movs	r3, #16
 8002bc2:	22d8      	movs	r2, #216	@ 0xd8
 8002bc4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002bc6:	4872      	ldr	r0, [pc, #456]	@ (8002d90 <Map2_Load+0x754>)
 8002bc8:	f7fe fecc 	bl	8001964 <Map_AddTile>
    Map_AddTile(&g_current_map, x, 208, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002bcc:	4b6f      	ldr	r3, [pc, #444]	@ (8002d8c <Map2_Load+0x750>)
 8002bce:	9304      	str	r3, [sp, #16]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	9303      	str	r3, [sp, #12]
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	9302      	str	r3, [sp, #8]
 8002bd8:	2301      	movs	r3, #1
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	2308      	movs	r3, #8
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	2310      	movs	r3, #16
 8002be2:	22d0      	movs	r2, #208	@ 0xd0
 8002be4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002be6:	486a      	ldr	r0, [pc, #424]	@ (8002d90 <Map2_Load+0x754>)
 8002be8:	f7fe febc 	bl	8001964 <Map_AddTile>
  for (int x = 208; x < 272; x += 16) {
 8002bec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bee:	3310      	adds	r3, #16
 8002bf0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002bf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bf4:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8002bf8:	dbd8      	blt.n	8002bac <Map2_Load+0x570>
  }

  // Bloques grises en esquina
  Map_AddTile(&g_current_map, 272, 176, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 8002bfa:	4b66      	ldr	r3, [pc, #408]	@ (8002d94 <Map2_Load+0x758>)
 8002bfc:	9304      	str	r3, [sp, #16]
 8002bfe:	2300      	movs	r3, #0
 8002c00:	9303      	str	r3, [sp, #12]
 8002c02:	2300      	movs	r3, #0
 8002c04:	9302      	str	r3, [sp, #8]
 8002c06:	2302      	movs	r3, #2
 8002c08:	9301      	str	r3, [sp, #4]
 8002c0a:	2308      	movs	r3, #8
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	2310      	movs	r3, #16
 8002c10:	22b0      	movs	r2, #176	@ 0xb0
 8002c12:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002c16:	485e      	ldr	r0, [pc, #376]	@ (8002d90 <Map2_Load+0x754>)
 8002c18:	f7fe fea4 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 272, 184, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 8002c1c:	4b5d      	ldr	r3, [pc, #372]	@ (8002d94 <Map2_Load+0x758>)
 8002c1e:	9304      	str	r3, [sp, #16]
 8002c20:	2300      	movs	r3, #0
 8002c22:	9303      	str	r3, [sp, #12]
 8002c24:	2300      	movs	r3, #0
 8002c26:	9302      	str	r3, [sp, #8]
 8002c28:	2302      	movs	r3, #2
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	2308      	movs	r3, #8
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	2310      	movs	r3, #16
 8002c32:	22b8      	movs	r2, #184	@ 0xb8
 8002c34:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002c38:	4855      	ldr	r0, [pc, #340]	@ (8002d90 <Map2_Load+0x754>)
 8002c3a:	f7fe fe93 	bl	8001964 <Map_AddTile>

  snprintf(dbg, sizeof(dbg), "[MAP2] Estructuras esquinas agregadas. Tiles: %d\r\n", g_current_map.tile_count);
 8002c3e:	4b54      	ldr	r3, [pc, #336]	@ (8002d90 <Map2_Load+0x754>)
 8002c40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c44:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 8002c48:	1d38      	adds	r0, r7, #4
 8002c4a:	4a53      	ldr	r2, [pc, #332]	@ (8002d98 <Map2_Load+0x75c>)
 8002c4c:	2140      	movs	r1, #64	@ 0x40
 8002c4e:	f005 facb 	bl	80081e8 <sniprintf>
  DebugPC(dbg);
 8002c52:	1d3b      	adds	r3, r7, #4
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fe f805 	bl	8000c64 <DebugPC>

  // ===== ESTRUCTURA CENTRAL (ARBUSTOS Y BLOQUES) =====
  DebugPC("[MAP2] Agregando estructura central...\r\n");
 8002c5a:	4850      	ldr	r0, [pc, #320]	@ (8002d9c <Map2_Load+0x760>)
 8002c5c:	f7fe f802 	bl	8000c64 <DebugPC>

  // Arbustos centrales (x=112 a 208, y=104 y 120)
  for (int x = 112; x < 208; x += 16) {
 8002c60:	2370      	movs	r3, #112	@ 0x70
 8002c62:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c64:	e022      	b.n	8002cac <Map2_Load+0x670>
    Map_AddTile(&g_current_map, x, 104, 16, 16, TILE_BUSH, 0, 1, monte);
 8002c66:	4b4e      	ldr	r3, [pc, #312]	@ (8002da0 <Map2_Load+0x764>)
 8002c68:	9304      	str	r3, [sp, #16]
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	9303      	str	r3, [sp, #12]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	9302      	str	r3, [sp, #8]
 8002c72:	2303      	movs	r3, #3
 8002c74:	9301      	str	r3, [sp, #4]
 8002c76:	2310      	movs	r3, #16
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	2310      	movs	r3, #16
 8002c7c:	2268      	movs	r2, #104	@ 0x68
 8002c7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c80:	4843      	ldr	r0, [pc, #268]	@ (8002d90 <Map2_Load+0x754>)
 8002c82:	f7fe fe6f 	bl	8001964 <Map_AddTile>
    Map_AddTile(&g_current_map, x, 120, 16, 16, TILE_BUSH, 0, 1, monte);
 8002c86:	4b46      	ldr	r3, [pc, #280]	@ (8002da0 <Map2_Load+0x764>)
 8002c88:	9304      	str	r3, [sp, #16]
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	9303      	str	r3, [sp, #12]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	9302      	str	r3, [sp, #8]
 8002c92:	2303      	movs	r3, #3
 8002c94:	9301      	str	r3, [sp, #4]
 8002c96:	2310      	movs	r3, #16
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	2310      	movs	r3, #16
 8002c9c:	2278      	movs	r2, #120	@ 0x78
 8002c9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ca0:	483b      	ldr	r0, [pc, #236]	@ (8002d90 <Map2_Load+0x754>)
 8002ca2:	f7fe fe5f 	bl	8001964 <Map_AddTile>
  for (int x = 112; x < 208; x += 16) {
 8002ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca8:	3310      	adds	r3, #16
 8002caa:	657b      	str	r3, [r7, #84]	@ 0x54
 8002cac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cae:	2bcf      	cmp	r3, #207	@ 0xcf
 8002cb0:	ddd9      	ble.n	8002c66 <Map2_Load+0x62a>
  }

  // Arbustos laterales
  Map_AddTile(&g_current_map, 112, 88, 16, 16, TILE_BUSH, 0, 1, monte);
 8002cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8002da0 <Map2_Load+0x764>)
 8002cb4:	9304      	str	r3, [sp, #16]
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	9303      	str	r3, [sp, #12]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	9302      	str	r3, [sp, #8]
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	9301      	str	r3, [sp, #4]
 8002cc2:	2310      	movs	r3, #16
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	2310      	movs	r3, #16
 8002cc8:	2258      	movs	r2, #88	@ 0x58
 8002cca:	2170      	movs	r1, #112	@ 0x70
 8002ccc:	4830      	ldr	r0, [pc, #192]	@ (8002d90 <Map2_Load+0x754>)
 8002cce:	f7fe fe49 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 112, 136, 16, 16, TILE_BUSH, 0, 1, monte);
 8002cd2:	4b33      	ldr	r3, [pc, #204]	@ (8002da0 <Map2_Load+0x764>)
 8002cd4:	9304      	str	r3, [sp, #16]
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	9303      	str	r3, [sp, #12]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	9302      	str	r3, [sp, #8]
 8002cde:	2303      	movs	r3, #3
 8002ce0:	9301      	str	r3, [sp, #4]
 8002ce2:	2310      	movs	r3, #16
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	2310      	movs	r3, #16
 8002ce8:	2288      	movs	r2, #136	@ 0x88
 8002cea:	2170      	movs	r1, #112	@ 0x70
 8002cec:	4828      	ldr	r0, [pc, #160]	@ (8002d90 <Map2_Load+0x754>)
 8002cee:	f7fe fe39 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 192, 88, 16, 16, TILE_BUSH, 0, 1, monte);
 8002cf2:	4b2b      	ldr	r3, [pc, #172]	@ (8002da0 <Map2_Load+0x764>)
 8002cf4:	9304      	str	r3, [sp, #16]
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	9303      	str	r3, [sp, #12]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	9302      	str	r3, [sp, #8]
 8002cfe:	2303      	movs	r3, #3
 8002d00:	9301      	str	r3, [sp, #4]
 8002d02:	2310      	movs	r3, #16
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	2310      	movs	r3, #16
 8002d08:	2258      	movs	r2, #88	@ 0x58
 8002d0a:	21c0      	movs	r1, #192	@ 0xc0
 8002d0c:	4820      	ldr	r0, [pc, #128]	@ (8002d90 <Map2_Load+0x754>)
 8002d0e:	f7fe fe29 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 192, 136, 16, 16, TILE_BUSH, 0, 1, monte);
 8002d12:	4b23      	ldr	r3, [pc, #140]	@ (8002da0 <Map2_Load+0x764>)
 8002d14:	9304      	str	r3, [sp, #16]
 8002d16:	2301      	movs	r3, #1
 8002d18:	9303      	str	r3, [sp, #12]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	9302      	str	r3, [sp, #8]
 8002d1e:	2303      	movs	r3, #3
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	2310      	movs	r3, #16
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	2310      	movs	r3, #16
 8002d28:	2288      	movs	r2, #136	@ 0x88
 8002d2a:	21c0      	movs	r1, #192	@ 0xc0
 8002d2c:	4818      	ldr	r0, [pc, #96]	@ (8002d90 <Map2_Load+0x754>)
 8002d2e:	f7fe fe19 	bl	8001964 <Map_AddTile>

  // Bloques grises horizontales superiores (x=128 a 192)
  for (int x = 128; x < 192; x += 16) {
 8002d32:	2380      	movs	r3, #128	@ 0x80
 8002d34:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d36:	e022      	b.n	8002d7e <Map2_Load+0x742>
    Map_AddTile(&g_current_map, x, 96, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 8002d38:	4b16      	ldr	r3, [pc, #88]	@ (8002d94 <Map2_Load+0x758>)
 8002d3a:	9304      	str	r3, [sp, #16]
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	9303      	str	r3, [sp, #12]
 8002d40:	2300      	movs	r3, #0
 8002d42:	9302      	str	r3, [sp, #8]
 8002d44:	2302      	movs	r3, #2
 8002d46:	9301      	str	r3, [sp, #4]
 8002d48:	2308      	movs	r3, #8
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	2310      	movs	r3, #16
 8002d4e:	2260      	movs	r2, #96	@ 0x60
 8002d50:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002d52:	480f      	ldr	r0, [pc, #60]	@ (8002d90 <Map2_Load+0x754>)
 8002d54:	f7fe fe06 	bl	8001964 <Map_AddTile>
    Map_AddTile(&g_current_map, x, 136, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 8002d58:	4b0e      	ldr	r3, [pc, #56]	@ (8002d94 <Map2_Load+0x758>)
 8002d5a:	9304      	str	r3, [sp, #16]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	9303      	str	r3, [sp, #12]
 8002d60:	2300      	movs	r3, #0
 8002d62:	9302      	str	r3, [sp, #8]
 8002d64:	2302      	movs	r3, #2
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	2308      	movs	r3, #8
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	2310      	movs	r3, #16
 8002d6e:	2288      	movs	r2, #136	@ 0x88
 8002d70:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002d72:	4807      	ldr	r0, [pc, #28]	@ (8002d90 <Map2_Load+0x754>)
 8002d74:	f7fe fdf6 	bl	8001964 <Map_AddTile>
  for (int x = 128; x < 192; x += 16) {
 8002d78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d7a:	3310      	adds	r3, #16
 8002d7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d80:	2bbf      	cmp	r3, #191	@ 0xbf
 8002d82:	ddd9      	ble.n	8002d38 <Map2_Load+0x6fc>
  }

  // Bloques grises centrales (x=144 a 176)
  for (int x = 144; x < 176; x += 16) {
 8002d84:	2390      	movs	r3, #144	@ 0x90
 8002d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d88:	e02f      	b.n	8002dea <Map2_Load+0x7ae>
 8002d8a:	bf00      	nop
 8002d8c:	08034684 	.word	0x08034684
 8002d90:	2000bb2c 	.word	0x2000bb2c
 8002d94:	08034184 	.word	0x08034184
 8002d98:	08008f28 	.word	0x08008f28
 8002d9c:	08008f5c 	.word	0x08008f5c
 8002da0:	08033704 	.word	0x08033704
    Map_AddTile(&g_current_map, x, 88, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 8002da4:	4bb0      	ldr	r3, [pc, #704]	@ (8003068 <Map2_Load+0xa2c>)
 8002da6:	9304      	str	r3, [sp, #16]
 8002da8:	2300      	movs	r3, #0
 8002daa:	9303      	str	r3, [sp, #12]
 8002dac:	2300      	movs	r3, #0
 8002dae:	9302      	str	r3, [sp, #8]
 8002db0:	2302      	movs	r3, #2
 8002db2:	9301      	str	r3, [sp, #4]
 8002db4:	2308      	movs	r3, #8
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	2310      	movs	r3, #16
 8002dba:	2258      	movs	r2, #88	@ 0x58
 8002dbc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002dbe:	48ab      	ldr	r0, [pc, #684]	@ (800306c <Map2_Load+0xa30>)
 8002dc0:	f7fe fdd0 	bl	8001964 <Map_AddTile>
    Map_AddTile(&g_current_map, x, 144, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 8002dc4:	4ba8      	ldr	r3, [pc, #672]	@ (8003068 <Map2_Load+0xa2c>)
 8002dc6:	9304      	str	r3, [sp, #16]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	9303      	str	r3, [sp, #12]
 8002dcc:	2300      	movs	r3, #0
 8002dce:	9302      	str	r3, [sp, #8]
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	9301      	str	r3, [sp, #4]
 8002dd4:	2308      	movs	r3, #8
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	2310      	movs	r3, #16
 8002dda:	2290      	movs	r2, #144	@ 0x90
 8002ddc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002dde:	48a3      	ldr	r0, [pc, #652]	@ (800306c <Map2_Load+0xa30>)
 8002de0:	f7fe fdc0 	bl	8001964 <Map_AddTile>
  for (int x = 144; x < 176; x += 16) {
 8002de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002de6:	3310      	adds	r3, #16
 8002de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002dec:	2baf      	cmp	r3, #175	@ 0xaf
 8002dee:	ddd9      	ble.n	8002da4 <Map2_Load+0x768>
  }

  snprintf(dbg, sizeof(dbg), "[MAP2] Estructura central agregada. Tiles: %d\r\n", g_current_map.tile_count);
 8002df0:	4b9e      	ldr	r3, [pc, #632]	@ (800306c <Map2_Load+0xa30>)
 8002df2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002df6:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 8002dfa:	1d38      	adds	r0, r7, #4
 8002dfc:	4a9c      	ldr	r2, [pc, #624]	@ (8003070 <Map2_Load+0xa34>)
 8002dfe:	2140      	movs	r1, #64	@ 0x40
 8002e00:	f005 f9f2 	bl	80081e8 <sniprintf>
  DebugPC(dbg);
 8002e04:	1d3b      	adds	r3, r7, #4
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fd ff2c 	bl	8000c64 <DebugPC>

  // ===== DETALLES ESQUINA SUPERIOR IZQUIERDA =====
  DebugPC("[MAP2] Agregando detalles superiores izquierdos...\r\n");
 8002e0c:	4899      	ldr	r0, [pc, #612]	@ (8003074 <Map2_Load+0xa38>)
 8002e0e:	f7fd ff29 	bl	8000c64 <DebugPC>

  Map_AddTile(&g_current_map, 96, 72, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002e12:	4b99      	ldr	r3, [pc, #612]	@ (8003078 <Map2_Load+0xa3c>)
 8002e14:	9304      	str	r3, [sp, #16]
 8002e16:	2300      	movs	r3, #0
 8002e18:	9303      	str	r3, [sp, #12]
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	9302      	str	r3, [sp, #8]
 8002e1e:	2301      	movs	r3, #1
 8002e20:	9301      	str	r3, [sp, #4]
 8002e22:	2308      	movs	r3, #8
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	2310      	movs	r3, #16
 8002e28:	2248      	movs	r2, #72	@ 0x48
 8002e2a:	2160      	movs	r1, #96	@ 0x60
 8002e2c:	488f      	ldr	r0, [pc, #572]	@ (800306c <Map2_Load+0xa30>)
 8002e2e:	f7fe fd99 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 96, 80, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002e32:	4b91      	ldr	r3, [pc, #580]	@ (8003078 <Map2_Load+0xa3c>)
 8002e34:	9304      	str	r3, [sp, #16]
 8002e36:	2300      	movs	r3, #0
 8002e38:	9303      	str	r3, [sp, #12]
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	9302      	str	r3, [sp, #8]
 8002e3e:	2301      	movs	r3, #1
 8002e40:	9301      	str	r3, [sp, #4]
 8002e42:	2308      	movs	r3, #8
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	2310      	movs	r3, #16
 8002e48:	2250      	movs	r2, #80	@ 0x50
 8002e4a:	2160      	movs	r1, #96	@ 0x60
 8002e4c:	4887      	ldr	r0, [pc, #540]	@ (800306c <Map2_Load+0xa30>)
 8002e4e:	f7fe fd89 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 112, 72, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002e52:	4b89      	ldr	r3, [pc, #548]	@ (8003078 <Map2_Load+0xa3c>)
 8002e54:	9304      	str	r3, [sp, #16]
 8002e56:	2300      	movs	r3, #0
 8002e58:	9303      	str	r3, [sp, #12]
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	9302      	str	r3, [sp, #8]
 8002e5e:	2301      	movs	r3, #1
 8002e60:	9301      	str	r3, [sp, #4]
 8002e62:	2308      	movs	r3, #8
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	2310      	movs	r3, #16
 8002e68:	2248      	movs	r2, #72	@ 0x48
 8002e6a:	2170      	movs	r1, #112	@ 0x70
 8002e6c:	487f      	ldr	r0, [pc, #508]	@ (800306c <Map2_Load+0xa30>)
 8002e6e:	f7fe fd79 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 96, 88, 8, 8, TILE_BRICK, 1, 0, bloqueladrillo_8_8);
 8002e72:	4b82      	ldr	r3, [pc, #520]	@ (800307c <Map2_Load+0xa40>)
 8002e74:	9304      	str	r3, [sp, #16]
 8002e76:	2300      	movs	r3, #0
 8002e78:	9303      	str	r3, [sp, #12]
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	9302      	str	r3, [sp, #8]
 8002e7e:	2301      	movs	r3, #1
 8002e80:	9301      	str	r3, [sp, #4]
 8002e82:	2308      	movs	r3, #8
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	2308      	movs	r3, #8
 8002e88:	2258      	movs	r2, #88	@ 0x58
 8002e8a:	2160      	movs	r1, #96	@ 0x60
 8002e8c:	4877      	ldr	r0, [pc, #476]	@ (800306c <Map2_Load+0xa30>)
 8002e8e:	f7fe fd69 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 96, 96, 8, 8, TILE_BRICK, 1, 0, bloqueladrillo_8_8);
 8002e92:	4b7a      	ldr	r3, [pc, #488]	@ (800307c <Map2_Load+0xa40>)
 8002e94:	9304      	str	r3, [sp, #16]
 8002e96:	2300      	movs	r3, #0
 8002e98:	9303      	str	r3, [sp, #12]
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	9302      	str	r3, [sp, #8]
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	2308      	movs	r3, #8
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	2308      	movs	r3, #8
 8002ea8:	2260      	movs	r2, #96	@ 0x60
 8002eaa:	2160      	movs	r1, #96	@ 0x60
 8002eac:	486f      	ldr	r0, [pc, #444]	@ (800306c <Map2_Load+0xa30>)
 8002eae:	f7fe fd59 	bl	8001964 <Map_AddTile>

  // ===== DETALLES ESQUINA INFERIOR IZQUIERDA =====
  DebugPC("[MAP2] Agregando detalles inferiores izquierdos...\r\n");
 8002eb2:	4873      	ldr	r0, [pc, #460]	@ (8003080 <Map2_Load+0xa44>)
 8002eb4:	f7fd fed6 	bl	8000c64 <DebugPC>

  Map_AddTile(&g_current_map, 96, 152, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002eb8:	4b6f      	ldr	r3, [pc, #444]	@ (8003078 <Map2_Load+0xa3c>)
 8002eba:	9304      	str	r3, [sp, #16]
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	9303      	str	r3, [sp, #12]
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	9302      	str	r3, [sp, #8]
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	9301      	str	r3, [sp, #4]
 8002ec8:	2308      	movs	r3, #8
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	2310      	movs	r3, #16
 8002ece:	2298      	movs	r2, #152	@ 0x98
 8002ed0:	2160      	movs	r1, #96	@ 0x60
 8002ed2:	4866      	ldr	r0, [pc, #408]	@ (800306c <Map2_Load+0xa30>)
 8002ed4:	f7fe fd46 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 96, 160, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002ed8:	4b67      	ldr	r3, [pc, #412]	@ (8003078 <Map2_Load+0xa3c>)
 8002eda:	9304      	str	r3, [sp, #16]
 8002edc:	2300      	movs	r3, #0
 8002ede:	9303      	str	r3, [sp, #12]
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	9302      	str	r3, [sp, #8]
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	9301      	str	r3, [sp, #4]
 8002ee8:	2308      	movs	r3, #8
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	2310      	movs	r3, #16
 8002eee:	22a0      	movs	r2, #160	@ 0xa0
 8002ef0:	2160      	movs	r1, #96	@ 0x60
 8002ef2:	485e      	ldr	r0, [pc, #376]	@ (800306c <Map2_Load+0xa30>)
 8002ef4:	f7fe fd36 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 112, 160, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002ef8:	4b5f      	ldr	r3, [pc, #380]	@ (8003078 <Map2_Load+0xa3c>)
 8002efa:	9304      	str	r3, [sp, #16]
 8002efc:	2300      	movs	r3, #0
 8002efe:	9303      	str	r3, [sp, #12]
 8002f00:	2301      	movs	r3, #1
 8002f02:	9302      	str	r3, [sp, #8]
 8002f04:	2301      	movs	r3, #1
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	2308      	movs	r3, #8
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	2310      	movs	r3, #16
 8002f0e:	22a0      	movs	r2, #160	@ 0xa0
 8002f10:	2170      	movs	r1, #112	@ 0x70
 8002f12:	4856      	ldr	r0, [pc, #344]	@ (800306c <Map2_Load+0xa30>)
 8002f14:	f7fe fd26 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 96, 144, 8, 8, TILE_BRICK, 1, 0, bloqueladrillo_8_8);
 8002f18:	4b58      	ldr	r3, [pc, #352]	@ (800307c <Map2_Load+0xa40>)
 8002f1a:	9304      	str	r3, [sp, #16]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	9303      	str	r3, [sp, #12]
 8002f20:	2301      	movs	r3, #1
 8002f22:	9302      	str	r3, [sp, #8]
 8002f24:	2301      	movs	r3, #1
 8002f26:	9301      	str	r3, [sp, #4]
 8002f28:	2308      	movs	r3, #8
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	2308      	movs	r3, #8
 8002f2e:	2290      	movs	r2, #144	@ 0x90
 8002f30:	2160      	movs	r1, #96	@ 0x60
 8002f32:	484e      	ldr	r0, [pc, #312]	@ (800306c <Map2_Load+0xa30>)
 8002f34:	f7fe fd16 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 96, 136, 8, 8, TILE_BRICK, 1, 0, bloqueladrillo_8_8);
 8002f38:	4b50      	ldr	r3, [pc, #320]	@ (800307c <Map2_Load+0xa40>)
 8002f3a:	9304      	str	r3, [sp, #16]
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	9303      	str	r3, [sp, #12]
 8002f40:	2301      	movs	r3, #1
 8002f42:	9302      	str	r3, [sp, #8]
 8002f44:	2301      	movs	r3, #1
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	2308      	movs	r3, #8
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	2308      	movs	r3, #8
 8002f4e:	2288      	movs	r2, #136	@ 0x88
 8002f50:	2160      	movs	r1, #96	@ 0x60
 8002f52:	4846      	ldr	r0, [pc, #280]	@ (800306c <Map2_Load+0xa30>)
 8002f54:	f7fe fd06 	bl	8001964 <Map_AddTile>

  // ===== DETALLES ESQUINA SUPERIOR DERECHA =====
  DebugPC("[MAP2] Agregando detalles superiores derechos...\r\n");
 8002f58:	484a      	ldr	r0, [pc, #296]	@ (8003084 <Map2_Load+0xa48>)
 8002f5a:	f7fd fe83 	bl	8000c64 <DebugPC>

  Map_AddTile(&g_current_map, 208, 72, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002f5e:	4b46      	ldr	r3, [pc, #280]	@ (8003078 <Map2_Load+0xa3c>)
 8002f60:	9304      	str	r3, [sp, #16]
 8002f62:	2300      	movs	r3, #0
 8002f64:	9303      	str	r3, [sp, #12]
 8002f66:	2301      	movs	r3, #1
 8002f68:	9302      	str	r3, [sp, #8]
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	9301      	str	r3, [sp, #4]
 8002f6e:	2308      	movs	r3, #8
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	2310      	movs	r3, #16
 8002f74:	2248      	movs	r2, #72	@ 0x48
 8002f76:	21d0      	movs	r1, #208	@ 0xd0
 8002f78:	483c      	ldr	r0, [pc, #240]	@ (800306c <Map2_Load+0xa30>)
 8002f7a:	f7fe fcf3 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 208, 80, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002f7e:	4b3e      	ldr	r3, [pc, #248]	@ (8003078 <Map2_Load+0xa3c>)
 8002f80:	9304      	str	r3, [sp, #16]
 8002f82:	2300      	movs	r3, #0
 8002f84:	9303      	str	r3, [sp, #12]
 8002f86:	2301      	movs	r3, #1
 8002f88:	9302      	str	r3, [sp, #8]
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	9301      	str	r3, [sp, #4]
 8002f8e:	2308      	movs	r3, #8
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	2310      	movs	r3, #16
 8002f94:	2250      	movs	r2, #80	@ 0x50
 8002f96:	21d0      	movs	r1, #208	@ 0xd0
 8002f98:	4834      	ldr	r0, [pc, #208]	@ (800306c <Map2_Load+0xa30>)
 8002f9a:	f7fe fce3 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 192, 72, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8002f9e:	4b36      	ldr	r3, [pc, #216]	@ (8003078 <Map2_Load+0xa3c>)
 8002fa0:	9304      	str	r3, [sp, #16]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	9303      	str	r3, [sp, #12]
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	9302      	str	r3, [sp, #8]
 8002faa:	2301      	movs	r3, #1
 8002fac:	9301      	str	r3, [sp, #4]
 8002fae:	2308      	movs	r3, #8
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	2310      	movs	r3, #16
 8002fb4:	2248      	movs	r2, #72	@ 0x48
 8002fb6:	21c0      	movs	r1, #192	@ 0xc0
 8002fb8:	482c      	ldr	r0, [pc, #176]	@ (800306c <Map2_Load+0xa30>)
 8002fba:	f7fe fcd3 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 216, 88, 8, 8, TILE_BRICK, 1, 0, bloqueladrillo_8_8);
 8002fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800307c <Map2_Load+0xa40>)
 8002fc0:	9304      	str	r3, [sp, #16]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	9303      	str	r3, [sp, #12]
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	9302      	str	r3, [sp, #8]
 8002fca:	2301      	movs	r3, #1
 8002fcc:	9301      	str	r3, [sp, #4]
 8002fce:	2308      	movs	r3, #8
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	2308      	movs	r3, #8
 8002fd4:	2258      	movs	r2, #88	@ 0x58
 8002fd6:	21d8      	movs	r1, #216	@ 0xd8
 8002fd8:	4824      	ldr	r0, [pc, #144]	@ (800306c <Map2_Load+0xa30>)
 8002fda:	f7fe fcc3 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 216, 96, 8, 8, TILE_BRICK, 1, 0, bloqueladrillo_8_8);
 8002fde:	4b27      	ldr	r3, [pc, #156]	@ (800307c <Map2_Load+0xa40>)
 8002fe0:	9304      	str	r3, [sp, #16]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	9303      	str	r3, [sp, #12]
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	9302      	str	r3, [sp, #8]
 8002fea:	2301      	movs	r3, #1
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	2308      	movs	r3, #8
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	2308      	movs	r3, #8
 8002ff4:	2260      	movs	r2, #96	@ 0x60
 8002ff6:	21d8      	movs	r1, #216	@ 0xd8
 8002ff8:	481c      	ldr	r0, [pc, #112]	@ (800306c <Map2_Load+0xa30>)
 8002ffa:	f7fe fcb3 	bl	8001964 <Map_AddTile>

  // ===== DETALLES ESQUINA INFERIOR DERECHA =====
  DebugPC("[MAP2] Agregando detalles inferiores derechos...\r\n");
 8002ffe:	4822      	ldr	r0, [pc, #136]	@ (8003088 <Map2_Load+0xa4c>)
 8003000:	f7fd fe30 	bl	8000c64 <DebugPC>

  Map_AddTile(&g_current_map, 208, 152, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8003004:	4b1c      	ldr	r3, [pc, #112]	@ (8003078 <Map2_Load+0xa3c>)
 8003006:	9304      	str	r3, [sp, #16]
 8003008:	2300      	movs	r3, #0
 800300a:	9303      	str	r3, [sp, #12]
 800300c:	2301      	movs	r3, #1
 800300e:	9302      	str	r3, [sp, #8]
 8003010:	2301      	movs	r3, #1
 8003012:	9301      	str	r3, [sp, #4]
 8003014:	2308      	movs	r3, #8
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	2310      	movs	r3, #16
 800301a:	2298      	movs	r2, #152	@ 0x98
 800301c:	21d0      	movs	r1, #208	@ 0xd0
 800301e:	4813      	ldr	r0, [pc, #76]	@ (800306c <Map2_Load+0xa30>)
 8003020:	f7fe fca0 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 208, 160, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8003024:	4b14      	ldr	r3, [pc, #80]	@ (8003078 <Map2_Load+0xa3c>)
 8003026:	9304      	str	r3, [sp, #16]
 8003028:	2300      	movs	r3, #0
 800302a:	9303      	str	r3, [sp, #12]
 800302c:	2301      	movs	r3, #1
 800302e:	9302      	str	r3, [sp, #8]
 8003030:	2301      	movs	r3, #1
 8003032:	9301      	str	r3, [sp, #4]
 8003034:	2308      	movs	r3, #8
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	2310      	movs	r3, #16
 800303a:	22a0      	movs	r2, #160	@ 0xa0
 800303c:	21d0      	movs	r1, #208	@ 0xd0
 800303e:	480b      	ldr	r0, [pc, #44]	@ (800306c <Map2_Load+0xa30>)
 8003040:	f7fe fc90 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 192, 160, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8003044:	4b0c      	ldr	r3, [pc, #48]	@ (8003078 <Map2_Load+0xa3c>)
 8003046:	9304      	str	r3, [sp, #16]
 8003048:	2300      	movs	r3, #0
 800304a:	9303      	str	r3, [sp, #12]
 800304c:	2301      	movs	r3, #1
 800304e:	9302      	str	r3, [sp, #8]
 8003050:	2301      	movs	r3, #1
 8003052:	9301      	str	r3, [sp, #4]
 8003054:	2308      	movs	r3, #8
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	2310      	movs	r3, #16
 800305a:	22a0      	movs	r2, #160	@ 0xa0
 800305c:	21c0      	movs	r1, #192	@ 0xc0
 800305e:	4803      	ldr	r0, [pc, #12]	@ (800306c <Map2_Load+0xa30>)
 8003060:	f7fe fc80 	bl	8001964 <Map_AddTile>
 8003064:	e012      	b.n	800308c <Map2_Load+0xa50>
 8003066:	bf00      	nop
 8003068:	08034184 	.word	0x08034184
 800306c:	2000bb2c 	.word	0x2000bb2c
 8003070:	08008f88 	.word	0x08008f88
 8003074:	08008fb8 	.word	0x08008fb8
 8003078:	08034684 	.word	0x08034684
 800307c:	08033684 	.word	0x08033684
 8003080:	08008ff0 	.word	0x08008ff0
 8003084:	08009028 	.word	0x08009028
 8003088:	0800905c 	.word	0x0800905c
  Map_AddTile(&g_current_map, 216, 144, 8, 8, TILE_BRICK, 1, 0, bloqueladrillo_8_8);
 800308c:	4b56      	ldr	r3, [pc, #344]	@ (80031e8 <Map2_Load+0xbac>)
 800308e:	9304      	str	r3, [sp, #16]
 8003090:	2300      	movs	r3, #0
 8003092:	9303      	str	r3, [sp, #12]
 8003094:	2301      	movs	r3, #1
 8003096:	9302      	str	r3, [sp, #8]
 8003098:	2301      	movs	r3, #1
 800309a:	9301      	str	r3, [sp, #4]
 800309c:	2308      	movs	r3, #8
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	2308      	movs	r3, #8
 80030a2:	2290      	movs	r2, #144	@ 0x90
 80030a4:	21d8      	movs	r1, #216	@ 0xd8
 80030a6:	4851      	ldr	r0, [pc, #324]	@ (80031ec <Map2_Load+0xbb0>)
 80030a8:	f7fe fc5c 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 216, 136, 8, 8, TILE_BRICK, 1, 0, bloqueladrillo_8_8);
 80030ac:	4b4e      	ldr	r3, [pc, #312]	@ (80031e8 <Map2_Load+0xbac>)
 80030ae:	9304      	str	r3, [sp, #16]
 80030b0:	2300      	movs	r3, #0
 80030b2:	9303      	str	r3, [sp, #12]
 80030b4:	2301      	movs	r3, #1
 80030b6:	9302      	str	r3, [sp, #8]
 80030b8:	2301      	movs	r3, #1
 80030ba:	9301      	str	r3, [sp, #4]
 80030bc:	2308      	movs	r3, #8
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	2308      	movs	r3, #8
 80030c2:	2288      	movs	r2, #136	@ 0x88
 80030c4:	21d8      	movs	r1, #216	@ 0xd8
 80030c6:	4849      	ldr	r0, [pc, #292]	@ (80031ec <Map2_Load+0xbb0>)
 80030c8:	f7fe fc4c 	bl	8001964 <Map_AddTile>

  snprintf(dbg, sizeof(dbg), "[MAP2] Detalles esquinas agregados. Tiles: %d\r\n", g_current_map.tile_count);
 80030cc:	4b47      	ldr	r3, [pc, #284]	@ (80031ec <Map2_Load+0xbb0>)
 80030ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030d2:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 80030d6:	1d38      	adds	r0, r7, #4
 80030d8:	4a45      	ldr	r2, [pc, #276]	@ (80031f0 <Map2_Load+0xbb4>)
 80030da:	2140      	movs	r1, #64	@ 0x40
 80030dc:	f005 f884 	bl	80081e8 <sniprintf>
  DebugPC(dbg);
 80030e0:	1d3b      	adds	r3, r7, #4
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fd fdbe 	bl	8000c64 <DebugPC>

  // ===== COLUMNAS VERTICALES ADICIONALES =====
  DebugPC("[MAP2] Agregando columnas adicionales...\r\n");
 80030e8:	4842      	ldr	r0, [pc, #264]	@ (80031f4 <Map2_Load+0xbb8>)
 80030ea:	f7fd fdbb 	bl	8000c64 <DebugPC>

  // Columna izquierda (x=55, y=150 a 206)
  for (int y = 150; y < 206; y += 8) {
 80030ee:	2396      	movs	r3, #150	@ 0x96
 80030f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030f2:	e012      	b.n	800311a <Map2_Load+0xade>
    Map_AddTile(&g_current_map, 55, y, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 80030f4:	4b40      	ldr	r3, [pc, #256]	@ (80031f8 <Map2_Load+0xbbc>)
 80030f6:	9304      	str	r3, [sp, #16]
 80030f8:	2300      	movs	r3, #0
 80030fa:	9303      	str	r3, [sp, #12]
 80030fc:	2301      	movs	r3, #1
 80030fe:	9302      	str	r3, [sp, #8]
 8003100:	2301      	movs	r3, #1
 8003102:	9301      	str	r3, [sp, #4]
 8003104:	2308      	movs	r3, #8
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	2310      	movs	r3, #16
 800310a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800310c:	2137      	movs	r1, #55	@ 0x37
 800310e:	4837      	ldr	r0, [pc, #220]	@ (80031ec <Map2_Load+0xbb0>)
 8003110:	f7fe fc28 	bl	8001964 <Map_AddTile>
  for (int y = 150; y < 206; y += 8) {
 8003114:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003116:	3308      	adds	r3, #8
 8003118:	64bb      	str	r3, [r7, #72]	@ 0x48
 800311a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800311c:	2bcd      	cmp	r3, #205	@ 0xcd
 800311e:	dde9      	ble.n	80030f4 <Map2_Load+0xab8>
  }

  // Columna derecha (x=248, y=34 a 90)
  for (int y = 34; y < 90; y += 8) {
 8003120:	2322      	movs	r3, #34	@ 0x22
 8003122:	647b      	str	r3, [r7, #68]	@ 0x44
 8003124:	e012      	b.n	800314c <Map2_Load+0xb10>
    Map_AddTile(&g_current_map, 248, y, 16, 8, TILE_BRICK, 1, 0, bloqueladrillo_16_8);
 8003126:	4b34      	ldr	r3, [pc, #208]	@ (80031f8 <Map2_Load+0xbbc>)
 8003128:	9304      	str	r3, [sp, #16]
 800312a:	2300      	movs	r3, #0
 800312c:	9303      	str	r3, [sp, #12]
 800312e:	2301      	movs	r3, #1
 8003130:	9302      	str	r3, [sp, #8]
 8003132:	2301      	movs	r3, #1
 8003134:	9301      	str	r3, [sp, #4]
 8003136:	2308      	movs	r3, #8
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	2310      	movs	r3, #16
 800313c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800313e:	21f8      	movs	r1, #248	@ 0xf8
 8003140:	482a      	ldr	r0, [pc, #168]	@ (80031ec <Map2_Load+0xbb0>)
 8003142:	f7fe fc0f 	bl	8001964 <Map_AddTile>
  for (int y = 34; y < 90; y += 8) {
 8003146:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003148:	3308      	adds	r3, #8
 800314a:	647b      	str	r3, [r7, #68]	@ 0x44
 800314c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800314e:	2b59      	cmp	r3, #89	@ 0x59
 8003150:	dde9      	ble.n	8003126 <Map2_Load+0xaea>
  }

  // ===== BLOQUES GRISES INDIVIDUALES =====
  DebugPC("[MAP2] Agregando bloques grises finales...\r\n");
 8003152:	482a      	ldr	r0, [pc, #168]	@ (80031fc <Map2_Load+0xbc0>)
 8003154:	f7fd fd86 	bl	8000c64 <DebugPC>

  Map_AddTile(&g_current_map, 60, 60, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 8003158:	4b29      	ldr	r3, [pc, #164]	@ (8003200 <Map2_Load+0xbc4>)
 800315a:	9304      	str	r3, [sp, #16]
 800315c:	2300      	movs	r3, #0
 800315e:	9303      	str	r3, [sp, #12]
 8003160:	2300      	movs	r3, #0
 8003162:	9302      	str	r3, [sp, #8]
 8003164:	2302      	movs	r3, #2
 8003166:	9301      	str	r3, [sp, #4]
 8003168:	2308      	movs	r3, #8
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	2310      	movs	r3, #16
 800316e:	223c      	movs	r2, #60	@ 0x3c
 8003170:	213c      	movs	r1, #60	@ 0x3c
 8003172:	481e      	ldr	r0, [pc, #120]	@ (80031ec <Map2_Load+0xbb0>)
 8003174:	f7fe fbf6 	bl	8001964 <Map_AddTile>
  Map_AddTile(&g_current_map, 245, 175, 16, 8, TILE_STEEL, 0, 0, bloquegris_16_8);
 8003178:	4b21      	ldr	r3, [pc, #132]	@ (8003200 <Map2_Load+0xbc4>)
 800317a:	9304      	str	r3, [sp, #16]
 800317c:	2300      	movs	r3, #0
 800317e:	9303      	str	r3, [sp, #12]
 8003180:	2300      	movs	r3, #0
 8003182:	9302      	str	r3, [sp, #8]
 8003184:	2302      	movs	r3, #2
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	2308      	movs	r3, #8
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2310      	movs	r3, #16
 800318e:	22af      	movs	r2, #175	@ 0xaf
 8003190:	21f5      	movs	r1, #245	@ 0xf5
 8003192:	4816      	ldr	r0, [pc, #88]	@ (80031ec <Map2_Load+0xbb0>)
 8003194:	f7fe fbe6 	bl	8001964 <Map_AddTile>

  // ===== FINALIZACIÓN =====
  snprintf(dbg, sizeof(dbg), "\r\n[MAP2] ✓ Total de tiles cargados: %d\r\n", g_current_map.tile_count);
 8003198:	4b14      	ldr	r3, [pc, #80]	@ (80031ec <Map2_Load+0xbb0>)
 800319a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800319e:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 80031a2:	1d38      	adds	r0, r7, #4
 80031a4:	4a17      	ldr	r2, [pc, #92]	@ (8003204 <Map2_Load+0xbc8>)
 80031a6:	2140      	movs	r1, #64	@ 0x40
 80031a8:	f005 f81e 	bl	80081e8 <sniprintf>
  DebugPC(dbg);
 80031ac:	1d3b      	adds	r3, r7, #4
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fd fd58 	bl	8000c64 <DebugPC>

  if (g_current_map.tile_count == 0) {
 80031b4:	4b0d      	ldr	r3, [pc, #52]	@ (80031ec <Map2_Load+0xbb0>)
 80031b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031ba:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d103      	bne.n	80031ca <Map2_Load+0xb8e>
    DebugPC("[MAP2 ERROR] No se agregaron tiles!\r\n");
 80031c2:	4811      	ldr	r0, [pc, #68]	@ (8003208 <Map2_Load+0xbcc>)
 80031c4:	f7fd fd4e 	bl	8000c64 <DebugPC>
 80031c8:	e00b      	b.n	80031e2 <Map2_Load+0xba6>
    return;
  }

  DebugPC("[MAP2] Llamando a Map_Draw()...\r\n");
 80031ca:	4810      	ldr	r0, [pc, #64]	@ (800320c <Map2_Load+0xbd0>)
 80031cc:	f7fd fd4a 	bl	8000c64 <DebugPC>
  Map_Draw(&g_current_map);
 80031d0:	4806      	ldr	r0, [pc, #24]	@ (80031ec <Map2_Load+0xbb0>)
 80031d2:	f7fe fc0f 	bl	80019f4 <Map_Draw>

  DebugPC("[MAP2] ✓ Mapa 2 cargado y dibujado exitosamente\r\n");
 80031d6:	480e      	ldr	r0, [pc, #56]	@ (8003210 <Map2_Load+0xbd4>)
 80031d8:	f7fd fd44 	bl	8000c64 <DebugPC>
  DebugPC("========================================\r\n\r\n");
 80031dc:	480d      	ldr	r0, [pc, #52]	@ (8003214 <Map2_Load+0xbd8>)
 80031de:	f7fd fd41 	bl	8000c64 <DebugPC>
}
 80031e2:	3778      	adds	r7, #120	@ 0x78
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	08033684 	.word	0x08033684
 80031ec:	2000bb2c 	.word	0x2000bb2c
 80031f0:	08009090 	.word	0x08009090
 80031f4:	080090c0 	.word	0x080090c0
 80031f8:	08034684 	.word	0x08034684
 80031fc:	080090ec 	.word	0x080090ec
 8003200:	08034184 	.word	0x08034184
 8003204:	0800911c 	.word	0x0800911c
 8003208:	08009148 	.word	0x08009148
 800320c:	08009170 	.word	0x08009170
 8003210:	08009194 	.word	0x08009194
 8003214:	080091c8 	.word	0x080091c8

08003218 <ProcessCommandLine>:


static void ProcessCommandLine(const char* line_raw)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b0ca      	sub	sp, #296	@ 0x128
 800321c:	af02      	add	r7, sp, #8
 800321e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003222:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003226:	6018      	str	r0, [r3, #0]
  char line[128];
  size_t n=0;
 8003228:	2300      	movs	r3, #0
 800322a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  for (size_t i=0; line_raw[i] && n < sizeof(line)-1; ++i) {
 800322e:	2300      	movs	r3, #0
 8003230:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003234:	e02d      	b.n	8003292 <ProcessCommandLine+0x7a>
    if (line_raw[i] != '\r' && line_raw[i] != '\n') line[n++] = line_raw[i];
 8003236:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800323a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003244:	4413      	add	r3, r2
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b0d      	cmp	r3, #13
 800324a:	d01d      	beq.n	8003288 <ProcessCommandLine+0x70>
 800324c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003250:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800325a:	4413      	add	r3, r2
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b0a      	cmp	r3, #10
 8003260:	d012      	beq.n	8003288 <ProcessCommandLine+0x70>
 8003262:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003266:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003270:	441a      	add	r2, r3
 8003272:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003276:	1c59      	adds	r1, r3, #1
 8003278:	f8c7 111c 	str.w	r1, [r7, #284]	@ 0x11c
 800327c:	7812      	ldrb	r2, [r2, #0]
 800327e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8003282:	443b      	add	r3, r7
 8003284:	f803 2c94 	strb.w	r2, [r3, #-148]
  for (size_t i=0; line_raw[i] && n < sizeof(line)-1; ++i) {
 8003288:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800328c:	3301      	adds	r3, #1
 800328e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003292:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003296:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80032a0:	4413      	add	r3, r2
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <ProcessCommandLine+0x98>
 80032a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032ac:	2b7e      	cmp	r3, #126	@ 0x7e
 80032ae:	d9c2      	bls.n	8003236 <ProcessCommandLine+0x1e>
  }
  line[n] = '\0';
 80032b0:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 80032b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032b8:	4413      	add	r3, r2
 80032ba:	2200      	movs	r2, #0
 80032bc:	701a      	strb	r2, [r3, #0]

  const char* colon = strchr(line, ':');
 80032be:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80032c2:	213a      	movs	r1, #58	@ 0x3a
 80032c4:	4618      	mov	r0, r3
 80032c6:	f004 ffcd 	bl	8008264 <strchr>
 80032ca:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  const char* cmd = NULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  int player_id = 1;
 80032d4:	2301      	movs	r3, #1
 80032d6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

  if (line[0]=='P' && colon && (colon > line+1)) {
 80032da:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 80032de:	2b50      	cmp	r3, #80	@ 0x50
 80032e0:	d118      	bne.n	8003314 <ProcessCommandLine+0xfc>
 80032e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d014      	beq.n	8003314 <ProcessCommandLine+0xfc>
 80032ea:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80032ee:	3301      	adds	r3, #1
 80032f0:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d90d      	bls.n	8003314 <ProcessCommandLine+0xfc>
    player_id = atoi(&line[1]);
 80032f8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80032fc:	3301      	adds	r3, #1
 80032fe:	4618      	mov	r0, r3
 8003300:	f004 feea 	bl	80080d8 <atoi>
 8003304:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    cmd = colon + 1;
 8003308:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800330c:	3301      	adds	r3, #1
 800330e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003312:	e003      	b.n	800331c <ProcessCommandLine+0x104>
  } else {
    cmd = line;
 8003314:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003318:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  }

  char dbg[128];
  snprintf(dbg, sizeof(dbg), "[RX1] P%d:%s (Estado:%d)\r\n", player_id, cmd ? cmd : "NULL", g_state);
 800331c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <ProcessCommandLine+0x112>
 8003324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003328:	e000      	b.n	800332c <ProcessCommandLine+0x114>
 800332a:	4b66      	ldr	r3, [pc, #408]	@ (80034c4 <ProcessCommandLine+0x2ac>)
 800332c:	4a66      	ldr	r2, [pc, #408]	@ (80034c8 <ProcessCommandLine+0x2b0>)
 800332e:	7812      	ldrb	r2, [r2, #0]
 8003330:	f107 000c 	add.w	r0, r7, #12
 8003334:	9201      	str	r2, [sp, #4]
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800333c:	4a63      	ldr	r2, [pc, #396]	@ (80034cc <ProcessCommandLine+0x2b4>)
 800333e:	2180      	movs	r1, #128	@ 0x80
 8003340:	f004 ff52 	bl	80081e8 <sniprintf>
  DebugPC(dbg);
 8003344:	f107 030c 	add.w	r3, r7, #12
 8003348:	4618      	mov	r0, r3
 800334a:	f7fd fc8b 	bl	8000c64 <DebugPC>

  if (player_id < 1 || player_id > 2) {
 800334e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003352:	2b00      	cmp	r3, #0
 8003354:	dd03      	ble.n	800335e <ProcessCommandLine+0x146>
 8003356:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800335a:	2b02      	cmp	r3, #2
 800335c:	dd0d      	ble.n	800337a <ProcessCommandLine+0x162>
    snprintf(dbg, sizeof(dbg), "[ERROR] Player ID inválido: %d\r\n", player_id);
 800335e:	f107 000c 	add.w	r0, r7, #12
 8003362:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003366:	4a5a      	ldr	r2, [pc, #360]	@ (80034d0 <ProcessCommandLine+0x2b8>)
 8003368:	2180      	movs	r1, #128	@ 0x80
 800336a:	f004 ff3d 	bl	80081e8 <sniprintf>
    DebugPC(dbg);
 800336e:	f107 030c 	add.w	r3, r7, #12
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd fc76 	bl	8000c64 <DebugPC>
    return;
 8003378:	e09f      	b.n	80034ba <ProcessCommandLine+0x2a2>
  }

  // AGREGAR ESTA VERIFICACIÓN EXTRA
  if (cmd == NULL || *cmd == '\0') {
 800337a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800337e:	2b00      	cmp	r3, #0
 8003380:	d004      	beq.n	800338c <ProcessCommandLine+0x174>
 8003382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d103      	bne.n	8003394 <ProcessCommandLine+0x17c>
    DebugPC("[ERROR] Comando vacío o NULL\r\n");
 800338c:	4851      	ldr	r0, [pc, #324]	@ (80034d4 <ProcessCommandLine+0x2bc>)
 800338e:	f7fd fc69 	bl	8000c64 <DebugPC>
    return;
 8003392:	e092      	b.n	80034ba <ProcessCommandLine+0x2a2>
  }

  if (g_state == STATE_MENU && cmd && *cmd) {
 8003394:	4b4c      	ldr	r3, [pc, #304]	@ (80034c8 <ProcessCommandLine+0x2b0>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d115      	bne.n	80033c8 <ProcessCommandLine+0x1b0>
 800339c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d011      	beq.n	80033c8 <ProcessCommandLine+0x1b0>
 80033a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00c      	beq.n	80033c8 <ProcessCommandLine+0x1b0>
    if (player_id == 1) {
 80033ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	f040 8081 	bne.w	80034ba <ProcessCommandLine+0x2a2>
      DebugPC("[PROCESS] Procesando comando de menú\r\n");
 80033b8:	4847      	ldr	r0, [pc, #284]	@ (80034d8 <ProcessCommandLine+0x2c0>)
 80033ba:	f7fd fc53 	bl	8000c64 <DebugPC>
      ApplyMenuCommand(cmd);
 80033be:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80033c2:	f000 fc87 	bl	8003cd4 <ApplyMenuCommand>
    if (player_id == 1) {
 80033c6:	e078      	b.n	80034ba <ProcessCommandLine+0x2a2>
    }
  } else if (g_state == STATE_TANK_SELECTION && cmd && *cmd) {
 80033c8:	4b3f      	ldr	r3, [pc, #252]	@ (80034c8 <ProcessCommandLine+0x2b0>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d112      	bne.n	80033f6 <ProcessCommandLine+0x1de>
 80033d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00e      	beq.n	80033f6 <ProcessCommandLine+0x1de>
 80033d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d009      	beq.n	80033f6 <ProcessCommandLine+0x1de>
    DebugPC("[PROCESS] Procesando comando de selección de tanque\r\n");
 80033e2:	483e      	ldr	r0, [pc, #248]	@ (80034dc <ProcessCommandLine+0x2c4>)
 80033e4:	f7fd fc3e 	bl	8000c64 <DebugPC>
    ApplyTankSelectionCommand(player_id, cmd);
 80033e8:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80033ec:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80033f0:	f000 fcee 	bl	8003dd0 <ApplyTankSelectionCommand>
 80033f4:	e061      	b.n	80034ba <ProcessCommandLine+0x2a2>
  } else if (g_state == STATE_MAP_SELECTION && cmd && *cmd) {
 80033f6:	4b34      	ldr	r3, [pc, #208]	@ (80034c8 <ProcessCommandLine+0x2b0>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d122      	bne.n	8003444 <ProcessCommandLine+0x22c>
 80033fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003402:	2b00      	cmp	r3, #0
 8003404:	d01e      	beq.n	8003444 <ProcessCommandLine+0x22c>
 8003406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d019      	beq.n	8003444 <ProcessCommandLine+0x22c>
    if (player_id == 1) {
 8003410:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003414:	2b01      	cmp	r3, #1
 8003416:	d107      	bne.n	8003428 <ProcessCommandLine+0x210>
      DebugPC("[PROCESS] Procesando comando de selección de mapa\r\n");
 8003418:	4831      	ldr	r0, [pc, #196]	@ (80034e0 <ProcessCommandLine+0x2c8>)
 800341a:	f7fd fc23 	bl	8000c64 <DebugPC>
      ApplyMapSelectionCommand(cmd);
 800341e:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8003422:	f000 fdcf 	bl	8003fc4 <ApplyMapSelectionCommand>
    if (player_id == 1) {
 8003426:	e048      	b.n	80034ba <ProcessCommandLine+0x2a2>
    } else {
      snprintf(dbg, sizeof(dbg), "[MAP] Ignorando comando de P%d (solo P1 puede seleccionar mapa)\r\n", player_id);
 8003428:	f107 000c 	add.w	r0, r7, #12
 800342c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003430:	4a2c      	ldr	r2, [pc, #176]	@ (80034e4 <ProcessCommandLine+0x2cc>)
 8003432:	2180      	movs	r1, #128	@ 0x80
 8003434:	f004 fed8 	bl	80081e8 <sniprintf>
      DebugPC(dbg);
 8003438:	f107 030c 	add.w	r3, r7, #12
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd fc11 	bl	8000c64 <DebugPC>
    if (player_id == 1) {
 8003442:	e03a      	b.n	80034ba <ProcessCommandLine+0x2a2>
    }
  }

  else if (g_state == STATE_GAME_OVER && cmd && *cmd) {
 8003444:	4b20      	ldr	r3, [pc, #128]	@ (80034c8 <ProcessCommandLine+0x2b0>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b04      	cmp	r3, #4
 800344a:	d11e      	bne.n	800348a <ProcessCommandLine+0x272>
 800344c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01a      	beq.n	800348a <ProcessCommandLine+0x272>
 8003454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d015      	beq.n	800348a <ProcessCommandLine+0x272>
    if (strcmp(cmd, CMD_ACT_A) == 0 || strcmp(cmd, CMD_ACT_B) == 0) {
 800345e:	4922      	ldr	r1, [pc, #136]	@ (80034e8 <ProcessCommandLine+0x2d0>)
 8003460:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8003464:	f7fc fed4 	bl	8000210 <strcmp>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <ProcessCommandLine+0x266>
 800346e:	491f      	ldr	r1, [pc, #124]	@ (80034ec <ProcessCommandLine+0x2d4>)
 8003470:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8003474:	f7fc fecc 	bl	8000210 <strcmp>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d11c      	bne.n	80034b8 <ProcessCommandLine+0x2a0>
      DebugPC("[WIN] Volviendo al menú por tecla de acción\r\n");
 800347e:	481c      	ldr	r0, [pc, #112]	@ (80034f0 <ProcessCommandLine+0x2d8>)
 8003480:	f7fd fbf0 	bl	8000c64 <DebugPC>
      Game_ResetToMenu();
 8003484:	f001 fac8 	bl	8004a18 <Game_ResetToMenu>
    }
    return; // no procesar más cuando estamos en pantalla de ganador
 8003488:	e016      	b.n	80034b8 <ProcessCommandLine+0x2a0>
  }

  else if (g_state == STATE_GAME && cmd && *cmd) {
 800348a:	4b0f      	ldr	r3, [pc, #60]	@ (80034c8 <ProcessCommandLine+0x2b0>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b03      	cmp	r3, #3
 8003490:	d113      	bne.n	80034ba <ProcessCommandLine+0x2a2>
 8003492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00f      	beq.n	80034ba <ProcessCommandLine+0x2a2>
 800349a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <ProcessCommandLine+0x2a2>
    DebugPC("[PROCESS] Procesando comando de juego\r\n");
 80034a4:	4813      	ldr	r0, [pc, #76]	@ (80034f4 <ProcessCommandLine+0x2dc>)
 80034a6:	f7fd fbdd 	bl	8000c64 <DebugPC>
    ApplyGameCommand(player_id, cmd);
 80034aa:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80034ae:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80034b2:	f000 fb31 	bl	8003b18 <ApplyGameCommand>
 80034b6:	e000      	b.n	80034ba <ProcessCommandLine+0x2a2>
    return; // no procesar más cuando estamos en pantalla de ganador
 80034b8:	bf00      	nop
  }
}
 80034ba:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	080091f8 	.word	0x080091f8
 80034c8:	2000bb0a 	.word	0x2000bb0a
 80034cc:	08009200 	.word	0x08009200
 80034d0:	0800921c 	.word	0x0800921c
 80034d4:	08009240 	.word	0x08009240
 80034d8:	08009260 	.word	0x08009260
 80034dc:	08009288 	.word	0x08009288
 80034e0:	080092c0 	.word	0x080092c0
 80034e4:	080092f8 	.word	0x080092f8
 80034e8:	0800933c 	.word	0x0800933c
 80034ec:	08009344 	.word	0x08009344
 80034f0:	0800934c 	.word	0x0800934c
 80034f4:	0800937c 	.word	0x0800937c

080034f8 <Tank_GetSprite>:

/**
 * @brief Obtiene el sprite correspondiente al tipo de tanque
 */
static const uint8_t* Tank_GetSprite(TankType type)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	71fb      	strb	r3, [r7, #7]
  switch(type) {
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	2b03      	cmp	r3, #3
 8003506:	d813      	bhi.n	8003530 <Tank_GetSprite+0x38>
 8003508:	a201      	add	r2, pc, #4	@ (adr r2, 8003510 <Tank_GetSprite+0x18>)
 800350a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350e:	bf00      	nop
 8003510:	08003521 	.word	0x08003521
 8003514:	08003525 	.word	0x08003525
 8003518:	08003529 	.word	0x08003529
 800351c:	0800352d 	.word	0x0800352d
    case TANK_AMARILLO: return tanque_amarilloSprite;
 8003520:	4b07      	ldr	r3, [pc, #28]	@ (8003540 <Tank_GetSprite+0x48>)
 8003522:	e006      	b.n	8003532 <Tank_GetSprite+0x3a>
    case TANK_ROJO:     return tanque_rojoSprite;
 8003524:	4b07      	ldr	r3, [pc, #28]	@ (8003544 <Tank_GetSprite+0x4c>)
 8003526:	e004      	b.n	8003532 <Tank_GetSprite+0x3a>
    case TANK_VERDE:    return tanque_verdeSprite;
 8003528:	4b07      	ldr	r3, [pc, #28]	@ (8003548 <Tank_GetSprite+0x50>)
 800352a:	e002      	b.n	8003532 <Tank_GetSprite+0x3a>
    case TANK_BLANCO:   return tanque_blancoSprite;
 800352c:	4b07      	ldr	r3, [pc, #28]	@ (800354c <Tank_GetSprite+0x54>)
 800352e:	e000      	b.n	8003532 <Tank_GetSprite+0x3a>
    default:            return tanque_amarilloSprite;
 8003530:	4b03      	ldr	r3, [pc, #12]	@ (8003540 <Tank_GetSprite+0x48>)
  }
}
 8003532:	4618      	mov	r0, r3
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	20000800 	.word	0x20000800
 8003544:	20001000 	.word	0x20001000
 8003548:	20001800 	.word	0x20001800
 800354c:	20000000 	.word	0x20000000

08003550 <Tank_Init>:

/**
 * @brief Inicializa un tanque con sus parámetros
 */
static void Tank_Init(PlayerTank* tank, uint8_t player_id, TankType type, int x, int y)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b0a8      	sub	sp, #160	@ 0xa0
 8003554:	af04      	add	r7, sp, #16
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	460b      	mov	r3, r1
 800355c:	72fb      	strb	r3, [r7, #11]
 800355e:	4613      	mov	r3, r2
 8003560:	72bb      	strb	r3, [r7, #10]
  tank->x = x;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	601a      	str	r2, [r3, #0]
  tank->y = y;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800356e:	605a      	str	r2, [r3, #4]
  tank->prev_x = x;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	609a      	str	r2, [r3, #8]
  tank->prev_y = y;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800357c:	60da      	str	r2, [r3, #12]
  tank->player_id = player_id;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	7afa      	ldrb	r2, [r7, #11]
 8003582:	74da      	strb	r2, [r3, #19]
  tank->type = type;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	7aba      	ldrb	r2, [r7, #10]
 8003588:	749a      	strb	r2, [r3, #18]
  tank->alive = 1;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	751a      	strb	r2, [r3, #20]
  tank->moving = 0;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	755a      	strb	r2, [r3, #21]
  tank->speed = TANK_SPEED;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2202      	movs	r2, #2
 800359a:	61da      	str	r2, [r3, #28]
  tank->sprite = Tank_GetSprite(type);
 800359c:	7abb      	ldrb	r3, [r7, #10]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff ffaa 	bl	80034f8 <Tank_GetSprite>
 80035a4:	4602      	mov	r2, r0
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	619a      	str	r2, [r3, #24]

  // Dirección inicial según jugador
  tank->dir = (player_id == 1) ? DIR_UP : DIR_DOWN;
 80035aa:	7afb      	ldrb	r3, [r7, #11]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <Tank_Init+0x64>
 80035b0:	2200      	movs	r2, #0
 80035b2:	e000      	b.n	80035b6 <Tank_Init+0x66>
 80035b4:	2202      	movs	r2, #2
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	741a      	strb	r2, [r3, #16]
  tank->pending_dir = tank->dir;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	7c1a      	ldrb	r2, [r3, #16]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	745a      	strb	r2, [r3, #17]

  char dbg[128];
  snprintf(dbg, sizeof(dbg),
 80035c2:	7af9      	ldrb	r1, [r7, #11]
 80035c4:	7abb      	ldrb	r3, [r7, #10]
           "[TANK_INIT] P%d: Tipo=%d, Pos=(%d,%d), Dir=%d\r\n",
           player_id, type, x, y, tank->dir);
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	7c12      	ldrb	r2, [r2, #16]
  snprintf(dbg, sizeof(dbg),
 80035ca:	f107 0010 	add.w	r0, r7, #16
 80035ce:	9203      	str	r2, [sp, #12]
 80035d0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80035d4:	9202      	str	r2, [sp, #8]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	9201      	str	r2, [sp, #4]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	460b      	mov	r3, r1
 80035de:	4a06      	ldr	r2, [pc, #24]	@ (80035f8 <Tank_Init+0xa8>)
 80035e0:	2180      	movs	r1, #128	@ 0x80
 80035e2:	f004 fe01 	bl	80081e8 <sniprintf>
  DebugPC(dbg);
 80035e6:	f107 0310 	add.w	r3, r7, #16
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fd fb3a 	bl	8000c64 <DebugPC>
}
 80035f0:	bf00      	nop
 80035f2:	3790      	adds	r7, #144	@ 0x90
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	080093a4 	.word	0x080093a4

080035fc <Tank_CheckCollision>:
/**
 * @brief Verifica colisiones del tanque con los límites y tiles del mapa
 * @return 1 si hay colisión, 0 si puede moverse
 */
static uint8_t Tank_CheckCollision(PlayerTank* tank, int new_x, int new_y)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  // Verificar límites de pantalla
  if (new_x < GAME_MIN_X || new_x > GAME_MAX_X ||
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	2b00      	cmp	r3, #0
 800360c:	db09      	blt.n	8003622 <Tank_CheckCollision+0x26>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8003614:	dc05      	bgt.n	8003622 <Tank_CheckCollision+0x26>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	db02      	blt.n	8003622 <Tank_CheckCollision+0x26>
      new_y < GAME_MIN_Y || new_y > GAME_MAX_Y) {
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2be0      	cmp	r3, #224	@ 0xe0
 8003620:	dd01      	ble.n	8003626 <Tank_CheckCollision+0x2a>
    return 1; // Colisión con borde
 8003622:	2301      	movs	r3, #1
 8003624:	e044      	b.n	80036b0 <Tank_CheckCollision+0xb4>
  }

  // ⭐ NUEVO: Verificar colisión con el otro tanque
  if (Tank_CheckTankCollision(tank, new_x, new_y)) {
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 f846 	bl	80036bc <Tank_CheckTankCollision>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <Tank_CheckCollision+0x3e>
    return 1; // Colisión con otro tanque
 8003636:	2301      	movs	r3, #1
 8003638:	e03a      	b.n	80036b0 <Tank_CheckCollision+0xb4>
  }

  // Verificar colisión con tiles del mapa
  for (uint16_t i = 0; i < g_current_map.tile_count; i++) {
 800363a:	2300      	movs	r3, #0
 800363c:	82fb      	strh	r3, [r7, #22]
 800363e:	e02e      	b.n	800369e <Tank_CheckCollision+0xa2>
    MapTile* tile = &g_current_map.tiles[i];
 8003640:	8afa      	ldrh	r2, [r7, #22]
 8003642:	4613      	mov	r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4a1b      	ldr	r2, [pc, #108]	@ (80036b8 <Tank_CheckCollision+0xbc>)
 800364c:	4413      	add	r3, r2
 800364e:	613b      	str	r3, [r7, #16]

    // Solo verificar tiles no pasables (BUSH es pasable, no debe colisionar)
    if (!tile->passable) {
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	7c9b      	ldrb	r3, [r3, #18]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d11f      	bne.n	8003698 <Tank_CheckCollision+0x9c>
      // Verificar superposición de rectángulos
      if (new_x < tile->x + tile->w &&
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	4413      	add	r3, r2
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	429a      	cmp	r2, r3
 8003666:	da17      	bge.n	8003698 <Tank_CheckCollision+0x9c>
          new_x + TANK_SPRITE_SIZE > tile->x &&
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f103 020f 	add.w	r2, r3, #15
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	681b      	ldr	r3, [r3, #0]
      if (new_x < tile->x + tile->w &&
 8003672:	429a      	cmp	r2, r3
 8003674:	db10      	blt.n	8003698 <Tank_CheckCollision+0x9c>
          new_y < tile->y + tile->h &&
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	4413      	add	r3, r2
          new_x + TANK_SPRITE_SIZE > tile->x &&
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	429a      	cmp	r2, r3
 8003684:	da08      	bge.n	8003698 <Tank_CheckCollision+0x9c>
          new_y + TANK_SPRITE_SIZE > tile->y) {
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f103 020f 	add.w	r2, r3, #15
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	685b      	ldr	r3, [r3, #4]
          new_y < tile->y + tile->h &&
 8003690:	429a      	cmp	r2, r3
 8003692:	db01      	blt.n	8003698 <Tank_CheckCollision+0x9c>
        return 1; // Colisión con tile
 8003694:	2301      	movs	r3, #1
 8003696:	e00b      	b.n	80036b0 <Tank_CheckCollision+0xb4>
  for (uint16_t i = 0; i < g_current_map.tile_count; i++) {
 8003698:	8afb      	ldrh	r3, [r7, #22]
 800369a:	3301      	adds	r3, #1
 800369c:	82fb      	strh	r3, [r7, #22]
 800369e:	4b06      	ldr	r3, [pc, #24]	@ (80036b8 <Tank_CheckCollision+0xbc>)
 80036a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036a4:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 80036a8:	8afa      	ldrh	r2, [r7, #22]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d3c8      	bcc.n	8003640 <Tank_CheckCollision+0x44>
      }
    }
  }

  return 0; // Sin colisión
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	2000bb2c 	.word	0x2000bb2c

080036bc <Tank_CheckTankCollision>:
/**
 * @brief Verifica si el tanque colisiona con el otro tanque
 * @return 1 si hay colisión, 0 si no hay
 */
static uint8_t Tank_CheckTankCollision(PlayerTank* tank, int new_x, int new_y)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b098      	sub	sp, #96	@ 0x60
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  // Obtener el otro tanque
  PlayerTank* other = (tank->player_id == 1) ? &g_player2_tank : &g_player1_tank;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	7cdb      	ldrb	r3, [r3, #19]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <Tank_CheckTankCollision+0x18>
 80036d0:	4b1e      	ldr	r3, [pc, #120]	@ (800374c <Tank_CheckTankCollision+0x90>)
 80036d2:	e000      	b.n	80036d6 <Tank_CheckTankCollision+0x1a>
 80036d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003750 <Tank_CheckTankCollision+0x94>)
 80036d6:	657b      	str	r3, [r7, #84]	@ 0x54

  // Si el otro tanque no está vivo, no hay colisión
  if (!other->alive) return 0;
 80036d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036da:	7d1b      	ldrb	r3, [r3, #20]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <Tank_CheckTankCollision+0x28>
 80036e0:	2300      	movs	r3, #0
 80036e2:	e02e      	b.n	8003742 <Tank_CheckTankCollision+0x86>

  // Verificar superposición de rectángulos (hitbox)
  if (new_x < other->x + TANK_SPRITE_SIZE &&
 80036e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	330f      	adds	r3, #15
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	dc27      	bgt.n	8003740 <Tank_CheckTankCollision+0x84>
      new_x + TANK_SPRITE_SIZE > other->x &&
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f103 020f 	add.w	r2, r3, #15
 80036f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f8:	681b      	ldr	r3, [r3, #0]
  if (new_x < other->x + TANK_SPRITE_SIZE &&
 80036fa:	429a      	cmp	r2, r3
 80036fc:	db20      	blt.n	8003740 <Tank_CheckTankCollision+0x84>
      new_y < other->y + TANK_SPRITE_SIZE &&
 80036fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	330f      	adds	r3, #15
      new_x + TANK_SPRITE_SIZE > other->x &&
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	429a      	cmp	r2, r3
 8003708:	dc1a      	bgt.n	8003740 <Tank_CheckTankCollision+0x84>
      new_y + TANK_SPRITE_SIZE > other->y) {
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f103 020f 	add.w	r2, r3, #15
 8003710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003712:	685b      	ldr	r3, [r3, #4]
      new_y < other->y + TANK_SPRITE_SIZE &&
 8003714:	429a      	cmp	r2, r3
 8003716:	db13      	blt.n	8003740 <Tank_CheckTankCollision+0x84>

    char dbg[64];
    snprintf(dbg, sizeof(dbg), "[COLLISION] P%d chocó con P%d\r\n",
             tank->player_id, other->player_id);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	7cdb      	ldrb	r3, [r3, #19]
    snprintf(dbg, sizeof(dbg), "[COLLISION] P%d chocó con P%d\r\n",
 800371c:	461a      	mov	r2, r3
             tank->player_id, other->player_id);
 800371e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003720:	7cdb      	ldrb	r3, [r3, #19]
    snprintf(dbg, sizeof(dbg), "[COLLISION] P%d chocó con P%d\r\n",
 8003722:	f107 0014 	add.w	r0, r7, #20
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	4613      	mov	r3, r2
 800372a:	4a0a      	ldr	r2, [pc, #40]	@ (8003754 <Tank_CheckTankCollision+0x98>)
 800372c:	2140      	movs	r1, #64	@ 0x40
 800372e:	f004 fd5b 	bl	80081e8 <sniprintf>
    DebugPC(dbg);
 8003732:	f107 0314 	add.w	r3, r7, #20
 8003736:	4618      	mov	r0, r3
 8003738:	f7fd fa94 	bl	8000c64 <DebugPC>

    return 1; // Hay colisión
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <Tank_CheckTankCollision+0x86>
  }

  return 0; // No hay colisión
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3758      	adds	r7, #88	@ 0x58
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	2000d750 	.word	0x2000d750
 8003750:	2000d730 	.word	0x2000d730
 8003754:	080093d4 	.word	0x080093d4

08003758 <Tank_RedrawBushes>:
/**
 * @brief Redibuja los arbustos (TILE_BUSH) que se superponen con el tanque
 * Esto crea el efecto de que el tanque pasa "por debajo" de los arbustos
 */
static void Tank_RedrawBushes(PlayerTank* tank)
{
 8003758:	b590      	push	{r4, r7, lr}
 800375a:	b087      	sub	sp, #28
 800375c:	af02      	add	r7, sp, #8
 800375e:	6078      	str	r0, [r7, #4]
  // Recorrer todos los tiles del mapa
  for (uint16_t i = 0; i < g_current_map.tile_count; i++) {
 8003760:	2300      	movs	r3, #0
 8003762:	81fb      	strh	r3, [r7, #14]
 8003764:	e042      	b.n	80037ec <Tank_RedrawBushes+0x94>
    MapTile* tile = &g_current_map.tiles[i];
 8003766:	89fa      	ldrh	r2, [r7, #14]
 8003768:	4613      	mov	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4a25      	ldr	r2, [pc, #148]	@ (8003808 <Tank_RedrawBushes+0xb0>)
 8003772:	4413      	add	r3, r2
 8003774:	60bb      	str	r3, [r7, #8]

    // Solo procesar tiles de tipo BUSH
    if (tile->type == TILE_BUSH) {
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	7c1b      	ldrb	r3, [r3, #16]
 800377a:	2b03      	cmp	r3, #3
 800377c:	d133      	bne.n	80037e6 <Tank_RedrawBushes+0x8e>
      // Verificar si el tanque se superpone con este arbusto
      if (tank->x < tile->x + tile->w &&
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	6819      	ldr	r1, [r3, #0]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	440b      	add	r3, r1
 800378c:	429a      	cmp	r2, r3
 800378e:	da2a      	bge.n	80037e6 <Tank_RedrawBushes+0x8e>
          tank->x + TANK_SPRITE_SIZE > tile->x &&
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f103 020f 	add.w	r2, r3, #15
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	681b      	ldr	r3, [r3, #0]
      if (tank->x < tile->x + tile->w &&
 800379c:	429a      	cmp	r2, r3
 800379e:	db22      	blt.n	80037e6 <Tank_RedrawBushes+0x8e>
          tank->y < tile->y + tile->h &&
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	6859      	ldr	r1, [r3, #4]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	440b      	add	r3, r1
          tank->x + TANK_SPRITE_SIZE > tile->x &&
 80037ae:	429a      	cmp	r2, r3
 80037b0:	da19      	bge.n	80037e6 <Tank_RedrawBushes+0x8e>
          tank->y + TANK_SPRITE_SIZE > tile->y) {
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f103 020f 	add.w	r2, r3, #15
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	685b      	ldr	r3, [r3, #4]
          tank->y < tile->y + tile->h &&
 80037be:	429a      	cmp	r2, r3
 80037c0:	db11      	blt.n	80037e6 <Tank_RedrawBushes+0x8e>

        // Redibujar el arbusto encima del tanque
        LCD_Bitmap(tile->x, tile->y, tile->w, tile->h, tile->bitmap);
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4619      	mov	r1, r3
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	461a      	mov	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	461c      	mov	r4, r3
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	4623      	mov	r3, r4
 80037e2:	f7fd f939 	bl	8000a58 <LCD_Bitmap>
  for (uint16_t i = 0; i < g_current_map.tile_count; i++) {
 80037e6:	89fb      	ldrh	r3, [r7, #14]
 80037e8:	3301      	adds	r3, #1
 80037ea:	81fb      	strh	r3, [r7, #14]
 80037ec:	4b06      	ldr	r3, [pc, #24]	@ (8003808 <Tank_RedrawBushes+0xb0>)
 80037ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037f2:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 80037f6:	89fa      	ldrh	r2, [r7, #14]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d3b4      	bcc.n	8003766 <Tank_RedrawBushes+0xe>
      }
    }
  }
}
 80037fc:	bf00      	nop
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	bd90      	pop	{r4, r7, pc}
 8003806:	bf00      	nop
 8003808:	2000bb2c 	.word	0x2000bb2c

0800380c <Tank_Update>:

/**
 * @brief Actualiza la posición del tanque si está en movimiento
 */
static void Tank_Update(PlayerTank* tank)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  if (!tank->alive || !tank->moving) return;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	7d1b      	ldrb	r3, [r3, #20]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d04c      	beq.n	80038b6 <Tank_Update+0xaa>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	7d5b      	ldrb	r3, [r3, #21]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d048      	beq.n	80038b6 <Tank_Update+0xaa>

  tank->prev_x = tank->x;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	609a      	str	r2, [r3, #8]
  tank->prev_y = tank->y;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	60da      	str	r2, [r3, #12]

  int new_x = tank->x;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	60fb      	str	r3, [r7, #12]
  int new_y = tank->y;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	60bb      	str	r3, [r7, #8]

  // Calcular nueva posición según dirección
  switch(tank->dir) {
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	7c1b      	ldrb	r3, [r3, #16]
 8003844:	2b03      	cmp	r3, #3
 8003846:	d823      	bhi.n	8003890 <Tank_Update+0x84>
 8003848:	a201      	add	r2, pc, #4	@ (adr r2, 8003850 <Tank_Update+0x44>)
 800384a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384e:	bf00      	nop
 8003850:	08003861 	.word	0x08003861
 8003854:	08003879 	.word	0x08003879
 8003858:	0800386d 	.word	0x0800386d
 800385c:	08003885 	.word	0x08003885
    case DIR_UP:    new_y -= tank->speed; break;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	e011      	b.n	8003890 <Tank_Update+0x84>
    case DIR_DOWN:  new_y += tank->speed; break;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	4413      	add	r3, r2
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	e00b      	b.n	8003890 <Tank_Update+0x84>
    case DIR_LEFT:  new_x -= tank->speed; break;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	e005      	b.n	8003890 <Tank_Update+0x84>
    case DIR_RIGHT: new_x += tank->speed; break;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	4413      	add	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	bf00      	nop
  }

  // Verificar colisiones antes de mover
  if (!Tank_CheckCollision(tank, new_x, new_y)) {
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	68f9      	ldr	r1, [r7, #12]
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff feb1 	bl	80035fc <Tank_CheckCollision>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d106      	bne.n	80038ae <Tank_Update+0xa2>
    tank->x = new_x;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	601a      	str	r2, [r3, #0]
    tank->y = new_y;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	605a      	str	r2, [r3, #4]
 80038ac:	e004      	b.n	80038b8 <Tank_Update+0xac>
  } else {
    // Si hay colisión, detener el tanque
    tank->moving = 0;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	755a      	strb	r2, [r3, #21]
 80038b4:	e000      	b.n	80038b8 <Tank_Update+0xac>
  if (!tank->alive || !tank->moving) return;
 80038b6:	bf00      	nop
  }
}
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop

080038c0 <Tank_Move>:

/**
 * @brief Establece la dirección de movimiento del tanque
 */
static void Tank_Move(PlayerTank* tank, Direction dir)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	70fb      	strb	r3, [r7, #3]
  if (!tank->alive) return;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	7d1b      	ldrb	r3, [r3, #20]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d009      	beq.n	80038e8 <Tank_Move+0x28>

  tank->dir = dir;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	78fa      	ldrb	r2, [r7, #3]
 80038d8:	741a      	strb	r2, [r3, #16]
  tank->pending_dir = dir;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	78fa      	ldrb	r2, [r7, #3]
 80038de:	745a      	strb	r2, [r3, #17]
  tank->moving = 1;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	755a      	strb	r2, [r3, #21]
 80038e6:	e000      	b.n	80038ea <Tank_Move+0x2a>
  if (!tank->alive) return;
 80038e8:	bf00      	nop
}
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <Tank_Stop>:

/**
 * @brief Detiene el movimiento del tanque
 */
static void Tank_Stop(PlayerTank* tank)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  if (!tank->alive) return;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	7d1b      	ldrb	r3, [r3, #20]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <Tank_Stop+0x18>
  tank->moving = 0;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	755a      	strb	r2, [r3, #21]
 800390a:	e000      	b.n	800390e <Tank_Stop+0x1a>
  if (!tank->alive) return;
 800390c:	bf00      	nop
}
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <Tank_Draw>:

/**
 * @brief Dibuja el tanque en pantalla
 */
static void Tank_Draw(PlayerTank* tank)
{
 8003918:	b590      	push	{r4, r7, lr}
 800391a:	b089      	sub	sp, #36	@ 0x24
 800391c:	af06      	add	r7, sp, #24
 800391e:	6078      	str	r0, [r7, #4]
  if (!tank->alive) return;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	7d1b      	ldrb	r3, [r3, #20]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d015      	beq.n	8003954 <Tank_Draw+0x3c>

  LCD_Sprite(tank->x, tank->y,
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6859      	ldr	r1, [r3, #4]
             TANK_SPRITE_SIZE, TANK_SPRITE_SIZE,
             tank->sprite,
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
             TANK_SPRITE_COLS,
             tank->dir,  // El frame coincide con la dirección
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	7c12      	ldrb	r2, [r2, #16]
  LCD_Sprite(tank->x, tank->y,
 8003938:	4614      	mov	r4, r2
 800393a:	2200      	movs	r2, #0
 800393c:	9204      	str	r2, [sp, #16]
 800393e:	2200      	movs	r2, #0
 8003940:	9203      	str	r2, [sp, #12]
 8003942:	9402      	str	r4, [sp, #8]
 8003944:	2204      	movs	r2, #4
 8003946:	9201      	str	r2, [sp, #4]
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	2310      	movs	r3, #16
 800394c:	2210      	movs	r2, #16
 800394e:	f7fd f8dd 	bl	8000b0c <LCD_Sprite>
 8003952:	e000      	b.n	8003956 <Tank_Draw+0x3e>
  if (!tank->alive) return;
 8003954:	bf00      	nop
             0, 0);
}
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	bd90      	pop	{r4, r7, pc}

0800395c <Tank_Erase>:

/**
 * @brief Borra el tanque de su posición anterior
 */
static void Tank_Erase(PlayerTank* tank)
{
 800395c:	b590      	push	{r4, r7, lr}
 800395e:	b087      	sub	sp, #28
 8003960:	af02      	add	r7, sp, #8
 8003962:	6078      	str	r0, [r7, #4]
  // Solo borrar si realmente se movió
  if (tank->prev_x != tank->x || tank->prev_y != tank->y) {
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d105      	bne.n	800397c <Tank_Erase+0x20>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	429a      	cmp	r2, r3
 800397a:	d059      	beq.n	8003a30 <Tank_Erase+0xd4>
    // Llenar con color de fondo
    FillRect(tank->prev_x, tank->prev_y,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	4618      	mov	r0, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	4619      	mov	r1, r3
 8003988:	2300      	movs	r3, #0
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	2310      	movs	r3, #16
 800398e:	2210      	movs	r2, #16
 8003990:	f7fd f808 	bl	80009a4 <FillRect>
             TANK_SPRITE_SIZE, TANK_SPRITE_SIZE,
             BG_COLOR);

    // ⭐ NUEVO: Redibujar tiles que puedan estar en la posición anterior
    for (uint16_t i = 0; i < g_current_map.tile_count; i++) {
 8003994:	2300      	movs	r3, #0
 8003996:	81fb      	strh	r3, [r7, #14]
 8003998:	e042      	b.n	8003a20 <Tank_Erase+0xc4>
      MapTile* tile = &g_current_map.tiles[i];
 800399a:	89fa      	ldrh	r2, [r7, #14]
 800399c:	4613      	mov	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4a24      	ldr	r2, [pc, #144]	@ (8003a38 <Tank_Erase+0xdc>)
 80039a6:	4413      	add	r3, r2
 80039a8:	60bb      	str	r3, [r7, #8]

      // Verificar si el tile se superpone con la posición anterior del tanque
      if (tank->prev_x < tile->x + tile->w &&
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	6819      	ldr	r1, [r3, #0]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	440b      	add	r3, r1
 80039b8:	429a      	cmp	r2, r3
 80039ba:	da2e      	bge.n	8003a1a <Tank_Erase+0xbe>
          tank->prev_x + TANK_SPRITE_SIZE > tile->x &&
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f103 020f 	add.w	r2, r3, #15
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	681b      	ldr	r3, [r3, #0]
      if (tank->prev_x < tile->x + tile->w &&
 80039c8:	429a      	cmp	r2, r3
 80039ca:	db26      	blt.n	8003a1a <Tank_Erase+0xbe>
          tank->prev_y < tile->y + tile->h &&
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	6859      	ldr	r1, [r3, #4]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	440b      	add	r3, r1
          tank->prev_x + TANK_SPRITE_SIZE > tile->x &&
 80039da:	429a      	cmp	r2, r3
 80039dc:	da1d      	bge.n	8003a1a <Tank_Erase+0xbe>
          tank->prev_y + TANK_SPRITE_SIZE > tile->y) {
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f103 020f 	add.w	r2, r3, #15
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	685b      	ldr	r3, [r3, #4]
          tank->prev_y < tile->y + tile->h &&
 80039ea:	429a      	cmp	r2, r3
 80039ec:	db15      	blt.n	8003a1a <Tank_Erase+0xbe>

        // Redibujar el tile en su posición
        if (tile->bitmap != NULL) {
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d011      	beq.n	8003a1a <Tank_Erase+0xbe>
          LCD_Bitmap(tile->x, tile->y, tile->w, tile->h, tile->bitmap);
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	4619      	mov	r1, r3
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	461a      	mov	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	461c      	mov	r4, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	4623      	mov	r3, r4
 8003a16:	f7fd f81f 	bl	8000a58 <LCD_Bitmap>
    for (uint16_t i = 0; i < g_current_map.tile_count; i++) {
 8003a1a:	89fb      	ldrh	r3, [r7, #14]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	81fb      	strh	r3, [r7, #14]
 8003a20:	4b05      	ldr	r3, [pc, #20]	@ (8003a38 <Tank_Erase+0xdc>)
 8003a22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a26:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 8003a2a:	89fa      	ldrh	r2, [r7, #14]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d3b4      	bcc.n	800399a <Tank_Erase+0x3e>
        }
      }
    }
  }
}
 8003a30:	bf00      	nop
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd90      	pop	{r4, r7, pc}
 8003a38:	2000bb2c 	.word	0x2000bb2c

08003a3c <Game_LoadPlayers>:

/**
 * @brief Carga ambos jugadores en el mapa
 */
static void Game_LoadPlayers(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b0a4      	sub	sp, #144	@ 0x90
 8003a40:	af02      	add	r7, sp, #8
  DebugPC("\r\n[GAME] === CARGANDO JUGADORES ===\r\n");
 8003a42:	481e      	ldr	r0, [pc, #120]	@ (8003abc <Game_LoadPlayers+0x80>)
 8003a44:	f7fd f90e 	bl	8000c64 <DebugPC>

  // Convertir el índice de selección a TankType
  TankType p1_type = (TankType)g_game_setup.p1_tank_type;
 8003a48:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac0 <Game_LoadPlayers+0x84>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  TankType p2_type = (TankType)g_game_setup.p2_tank_type;
 8003a50:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac0 <Game_LoadPlayers+0x84>)
 8003a52:	785b      	ldrb	r3, [r3, #1]
 8003a54:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

  char dbg[128];
  snprintf(dbg, sizeof(dbg),
 8003a58:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8003a5c:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8003a60:	1d38      	adds	r0, r7, #4
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	4613      	mov	r3, r2
 8003a66:	4a17      	ldr	r2, [pc, #92]	@ (8003ac4 <Game_LoadPlayers+0x88>)
 8003a68:	2180      	movs	r1, #128	@ 0x80
 8003a6a:	f004 fbbd 	bl	80081e8 <sniprintf>
           "[GAME] P1: Tipo %d | P2: Tipo %d\r\n",
           p1_type, p2_type);
  DebugPC(dbg);
 8003a6e:	1d3b      	adds	r3, r7, #4
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7fd f8f7 	bl	8000c64 <DebugPC>

  // Inicializar jugador 1 (cerca de base inferior)
  Tank_Init(&g_player1_tank, 1, p1_type, P1_START_X, P1_START_Y);
 8003a76:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8003a7a:	23be      	movs	r3, #190	@ 0xbe
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	2398      	movs	r3, #152	@ 0x98
 8003a80:	2101      	movs	r1, #1
 8003a82:	4811      	ldr	r0, [pc, #68]	@ (8003ac8 <Game_LoadPlayers+0x8c>)
 8003a84:	f7ff fd64 	bl	8003550 <Tank_Init>

  // Inicializar jugador 2 (cerca de base superior)
  Tank_Init(&g_player2_tank, 2, p2_type, P2_START_X, P2_START_Y);
 8003a88:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 8003a8c:	2330      	movs	r3, #48	@ 0x30
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	2398      	movs	r3, #152	@ 0x98
 8003a92:	2102      	movs	r1, #2
 8003a94:	480d      	ldr	r0, [pc, #52]	@ (8003acc <Game_LoadPlayers+0x90>)
 8003a96:	f7ff fd5b 	bl	8003550 <Tank_Init>

  // Dibujar ambos tanques
  DebugPC("[GAME] Dibujando tanques...\r\n");
 8003a9a:	480d      	ldr	r0, [pc, #52]	@ (8003ad0 <Game_LoadPlayers+0x94>)
 8003a9c:	f7fd f8e2 	bl	8000c64 <DebugPC>
  Tank_Draw(&g_player1_tank);
 8003aa0:	4809      	ldr	r0, [pc, #36]	@ (8003ac8 <Game_LoadPlayers+0x8c>)
 8003aa2:	f7ff ff39 	bl	8003918 <Tank_Draw>
  Tank_Draw(&g_player2_tank);
 8003aa6:	4809      	ldr	r0, [pc, #36]	@ (8003acc <Game_LoadPlayers+0x90>)
 8003aa8:	f7ff ff36 	bl	8003918 <Tank_Draw>

  DebugPC("[GAME] ✓ Jugadores cargados exitosamente\r\n\r\n");
 8003aac:	4809      	ldr	r0, [pc, #36]	@ (8003ad4 <Game_LoadPlayers+0x98>)
 8003aae:	f7fd f8d9 	bl	8000c64 <DebugPC>
}
 8003ab2:	bf00      	nop
 8003ab4:	3788      	adds	r7, #136	@ 0x88
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	080093f8 	.word	0x080093f8
 8003ac0:	2000bb28 	.word	0x2000bb28
 8003ac4:	08009420 	.word	0x08009420
 8003ac8:	2000d730 	.word	0x2000d730
 8003acc:	2000d750 	.word	0x2000d750
 8003ad0:	08009444 	.word	0x08009444
 8003ad4:	08009464 	.word	0x08009464

08003ad8 <Game_UpdateTanks>:

/**
 * @brief Actualiza el estado de ambos tanques (movimiento y dibujo)
 */
static void Game_UpdateTanks(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  // Borrar posiciones anteriores
  Tank_Erase(&g_player1_tank);
 8003adc:	480c      	ldr	r0, [pc, #48]	@ (8003b10 <Game_UpdateTanks+0x38>)
 8003ade:	f7ff ff3d 	bl	800395c <Tank_Erase>
  Tank_Erase(&g_player2_tank);
 8003ae2:	480c      	ldr	r0, [pc, #48]	@ (8003b14 <Game_UpdateTanks+0x3c>)
 8003ae4:	f7ff ff3a 	bl	800395c <Tank_Erase>

  // Actualizar posiciones
  Tank_Update(&g_player1_tank);
 8003ae8:	4809      	ldr	r0, [pc, #36]	@ (8003b10 <Game_UpdateTanks+0x38>)
 8003aea:	f7ff fe8f 	bl	800380c <Tank_Update>
  Tank_Update(&g_player2_tank);
 8003aee:	4809      	ldr	r0, [pc, #36]	@ (8003b14 <Game_UpdateTanks+0x3c>)
 8003af0:	f7ff fe8c 	bl	800380c <Tank_Update>

  // Redibujar en nuevas posiciones
  Tank_Draw(&g_player1_tank);
 8003af4:	4806      	ldr	r0, [pc, #24]	@ (8003b10 <Game_UpdateTanks+0x38>)
 8003af6:	f7ff ff0f 	bl	8003918 <Tank_Draw>
  Tank_Draw(&g_player2_tank);
 8003afa:	4806      	ldr	r0, [pc, #24]	@ (8003b14 <Game_UpdateTanks+0x3c>)
 8003afc:	f7ff ff0c 	bl	8003918 <Tank_Draw>

  // ⭐ NUEVO: Redibujar arbustos encima de los tanques
  Tank_RedrawBushes(&g_player1_tank);
 8003b00:	4803      	ldr	r0, [pc, #12]	@ (8003b10 <Game_UpdateTanks+0x38>)
 8003b02:	f7ff fe29 	bl	8003758 <Tank_RedrawBushes>
  Tank_RedrawBushes(&g_player2_tank);
 8003b06:	4803      	ldr	r0, [pc, #12]	@ (8003b14 <Game_UpdateTanks+0x3c>)
 8003b08:	f7ff fe26 	bl	8003758 <Tank_RedrawBushes>
}
 8003b0c:	bf00      	nop
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	2000d730 	.word	0x2000d730
 8003b14:	2000d750 	.word	0x2000d750

08003b18 <ApplyGameCommand>:

/**
 * @brief Procesa comandos de movimiento durante el juego
 */
static void ApplyGameCommand(int player_id, const char* cmd)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b09c      	sub	sp, #112	@ 0x70
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  if (player_id < 1 || player_id > 2) return;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f340 80b0 	ble.w	8003c8a <ApplyGameCommand+0x172>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	f300 80ac 	bgt.w	8003c8a <ApplyGameCommand+0x172>

  PlayerTank* tank = (player_id == 1) ? &g_player1_tank : &g_player2_tank;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <ApplyGameCommand+0x24>
 8003b38:	4b56      	ldr	r3, [pc, #344]	@ (8003c94 <ApplyGameCommand+0x17c>)
 8003b3a:	e000      	b.n	8003b3e <ApplyGameCommand+0x26>
 8003b3c:	4b56      	ldr	r3, [pc, #344]	@ (8003c98 <ApplyGameCommand+0x180>)
 8003b3e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  char dbg[96];

  if (strcmp(cmd, CMD_UP) == 0) {
 8003b40:	4956      	ldr	r1, [pc, #344]	@ (8003c9c <ApplyGameCommand+0x184>)
 8003b42:	6838      	ldr	r0, [r7, #0]
 8003b44:	f7fc fb64 	bl	8000210 <strcmp>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d110      	bne.n	8003b70 <ApplyGameCommand+0x58>
    Tank_Move(tank, DIR_UP);
 8003b4e:	2100      	movs	r1, #0
 8003b50:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003b52:	f7ff feb5 	bl	80038c0 <Tank_Move>
    snprintf(dbg, sizeof(dbg), "[P%d] Moviendo ARRIBA\r\n", player_id);
 8003b56:	f107 000c 	add.w	r0, r7, #12
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a50      	ldr	r2, [pc, #320]	@ (8003ca0 <ApplyGameCommand+0x188>)
 8003b5e:	2160      	movs	r1, #96	@ 0x60
 8003b60:	f004 fb42 	bl	80081e8 <sniprintf>
    DebugPC(dbg);
 8003b64:	f107 030c 	add.w	r3, r7, #12
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fd f87b 	bl	8000c64 <DebugPC>
 8003b6e:	e08d      	b.n	8003c8c <ApplyGameCommand+0x174>
  }
  else if (strcmp(cmd, CMD_DOWN) == 0) {
 8003b70:	494c      	ldr	r1, [pc, #304]	@ (8003ca4 <ApplyGameCommand+0x18c>)
 8003b72:	6838      	ldr	r0, [r7, #0]
 8003b74:	f7fc fb4c 	bl	8000210 <strcmp>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d110      	bne.n	8003ba0 <ApplyGameCommand+0x88>
    Tank_Move(tank, DIR_DOWN);
 8003b7e:	2102      	movs	r1, #2
 8003b80:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003b82:	f7ff fe9d 	bl	80038c0 <Tank_Move>
    snprintf(dbg, sizeof(dbg), "[P%d] Moviendo ABAJO\r\n", player_id);
 8003b86:	f107 000c 	add.w	r0, r7, #12
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a46      	ldr	r2, [pc, #280]	@ (8003ca8 <ApplyGameCommand+0x190>)
 8003b8e:	2160      	movs	r1, #96	@ 0x60
 8003b90:	f004 fb2a 	bl	80081e8 <sniprintf>
    DebugPC(dbg);
 8003b94:	f107 030c 	add.w	r3, r7, #12
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fd f863 	bl	8000c64 <DebugPC>
 8003b9e:	e075      	b.n	8003c8c <ApplyGameCommand+0x174>
  }
  else if (strcmp(cmd, CMD_LEFT) == 0) {
 8003ba0:	4942      	ldr	r1, [pc, #264]	@ (8003cac <ApplyGameCommand+0x194>)
 8003ba2:	6838      	ldr	r0, [r7, #0]
 8003ba4:	f7fc fb34 	bl	8000210 <strcmp>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d110      	bne.n	8003bd0 <ApplyGameCommand+0xb8>
    Tank_Move(tank, DIR_LEFT);
 8003bae:	2101      	movs	r1, #1
 8003bb0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003bb2:	f7ff fe85 	bl	80038c0 <Tank_Move>
    snprintf(dbg, sizeof(dbg), "[P%d] Moviendo IZQUIERDA\r\n", player_id);
 8003bb6:	f107 000c 	add.w	r0, r7, #12
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a3c      	ldr	r2, [pc, #240]	@ (8003cb0 <ApplyGameCommand+0x198>)
 8003bbe:	2160      	movs	r1, #96	@ 0x60
 8003bc0:	f004 fb12 	bl	80081e8 <sniprintf>
    DebugPC(dbg);
 8003bc4:	f107 030c 	add.w	r3, r7, #12
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fd f84b 	bl	8000c64 <DebugPC>
 8003bce:	e05d      	b.n	8003c8c <ApplyGameCommand+0x174>
  }
  else if (strcmp(cmd, CMD_RIGHT) == 0) {
 8003bd0:	4938      	ldr	r1, [pc, #224]	@ (8003cb4 <ApplyGameCommand+0x19c>)
 8003bd2:	6838      	ldr	r0, [r7, #0]
 8003bd4:	f7fc fb1c 	bl	8000210 <strcmp>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d110      	bne.n	8003c00 <ApplyGameCommand+0xe8>
    Tank_Move(tank, DIR_RIGHT);
 8003bde:	2103      	movs	r1, #3
 8003be0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003be2:	f7ff fe6d 	bl	80038c0 <Tank_Move>
    snprintf(dbg, sizeof(dbg), "[P%d] Moviendo DERECHA\r\n", player_id);
 8003be6:	f107 000c 	add.w	r0, r7, #12
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a32      	ldr	r2, [pc, #200]	@ (8003cb8 <ApplyGameCommand+0x1a0>)
 8003bee:	2160      	movs	r1, #96	@ 0x60
 8003bf0:	f004 fafa 	bl	80081e8 <sniprintf>
    DebugPC(dbg);
 8003bf4:	f107 030c 	add.w	r3, r7, #12
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fd f833 	bl	8000c64 <DebugPC>
 8003bfe:	e045      	b.n	8003c8c <ApplyGameCommand+0x174>
  }
  else if (strcmp(cmd, CMD_STOP) == 0) {
 8003c00:	492e      	ldr	r1, [pc, #184]	@ (8003cbc <ApplyGameCommand+0x1a4>)
 8003c02:	6838      	ldr	r0, [r7, #0]
 8003c04:	f7fc fb04 	bl	8000210 <strcmp>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10f      	bne.n	8003c2e <ApplyGameCommand+0x116>
    Tank_Stop(tank);
 8003c0e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c10:	f7ff fe70 	bl	80038f4 <Tank_Stop>
    snprintf(dbg, sizeof(dbg), "[P%d] DETENIDO\r\n", player_id);
 8003c14:	f107 000c 	add.w	r0, r7, #12
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a29      	ldr	r2, [pc, #164]	@ (8003cc0 <ApplyGameCommand+0x1a8>)
 8003c1c:	2160      	movs	r1, #96	@ 0x60
 8003c1e:	f004 fae3 	bl	80081e8 <sniprintf>
    DebugPC(dbg);
 8003c22:	f107 030c 	add.w	r3, r7, #12
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fd f81c 	bl	8000c64 <DebugPC>
 8003c2c:	e02e      	b.n	8003c8c <ApplyGameCommand+0x174>
  }

  else if (strcmp(cmd, CMD_ACT_A) == 0) {
 8003c2e:	4925      	ldr	r1, [pc, #148]	@ (8003cc4 <ApplyGameCommand+0x1ac>)
 8003c30:	6838      	ldr	r0, [r7, #0]
 8003c32:	f7fc faed 	bl	8000210 <strcmp>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10f      	bne.n	8003c5c <ApplyGameCommand+0x144>
    Bullet_SpawnFromTank(tank);
 8003c3c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c3e:	f7fd fa1d 	bl	800107c <Bullet_SpawnFromTank>
    snprintf(dbg, sizeof(dbg), "[P%d] DISPARO A\r\n", player_id);
 8003c42:	f107 000c 	add.w	r0, r7, #12
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a1f      	ldr	r2, [pc, #124]	@ (8003cc8 <ApplyGameCommand+0x1b0>)
 8003c4a:	2160      	movs	r1, #96	@ 0x60
 8003c4c:	f004 facc 	bl	80081e8 <sniprintf>
    DebugPC(dbg);
 8003c50:	f107 030c 	add.w	r3, r7, #12
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fd f805 	bl	8000c64 <DebugPC>
 8003c5a:	e017      	b.n	8003c8c <ApplyGameCommand+0x174>
  }

  else if (strcmp(cmd, CMD_ACT_B) == 0) {
 8003c5c:	491b      	ldr	r1, [pc, #108]	@ (8003ccc <ApplyGameCommand+0x1b4>)
 8003c5e:	6838      	ldr	r0, [r7, #0]
 8003c60:	f7fc fad6 	bl	8000210 <strcmp>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d110      	bne.n	8003c8c <ApplyGameCommand+0x174>
    Bullet_SpawnFromTank(tank);
 8003c6a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c6c:	f7fd fa06 	bl	800107c <Bullet_SpawnFromTank>
    snprintf(dbg, sizeof(dbg), "[P%d] DISPARO B\r\n", player_id);
 8003c70:	f107 000c 	add.w	r0, r7, #12
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a16      	ldr	r2, [pc, #88]	@ (8003cd0 <ApplyGameCommand+0x1b8>)
 8003c78:	2160      	movs	r1, #96	@ 0x60
 8003c7a:	f004 fab5 	bl	80081e8 <sniprintf>
    DebugPC(dbg);
 8003c7e:	f107 030c 	add.w	r3, r7, #12
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fc ffee 	bl	8000c64 <DebugPC>
 8003c88:	e000      	b.n	8003c8c <ApplyGameCommand+0x174>
  if (player_id < 1 || player_id > 2) return;
 8003c8a:	bf00      	nop
  }



}
 8003c8c:	3770      	adds	r7, #112	@ 0x70
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	2000d730 	.word	0x2000d730
 8003c98:	2000d750 	.word	0x2000d750
 8003c9c:	08009494 	.word	0x08009494
 8003ca0:	08009498 	.word	0x08009498
 8003ca4:	080094b0 	.word	0x080094b0
 8003ca8:	080094b8 	.word	0x080094b8
 8003cac:	080094d0 	.word	0x080094d0
 8003cb0:	080094d8 	.word	0x080094d8
 8003cb4:	080094f4 	.word	0x080094f4
 8003cb8:	080094fc 	.word	0x080094fc
 8003cbc:	08009518 	.word	0x08009518
 8003cc0:	08009520 	.word	0x08009520
 8003cc4:	0800933c 	.word	0x0800933c
 8003cc8:	08009534 	.word	0x08009534
 8003ccc:	08009344 	.word	0x08009344
 8003cd0:	08009548 	.word	0x08009548

08003cd4 <ApplyMenuCommand>:

static void ApplyMenuCommand(const char* cmd)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  if (strcmp(cmd, CMD_UP) == 0) {
 8003cdc:	4931      	ldr	r1, [pc, #196]	@ (8003da4 <ApplyMenuCommand+0xd0>)
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fc fa96 	bl	8000210 <strcmp>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d107      	bne.n	8003cfa <ApplyMenuCommand+0x26>
    g_menu_index = 0;
 8003cea:	4b2f      	ldr	r3, [pc, #188]	@ (8003da8 <ApplyMenuCommand+0xd4>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
    g_cursor.vy = -CURSOR_SPEED;
 8003cf0:	4b2e      	ldr	r3, [pc, #184]	@ (8003dac <ApplyMenuCommand+0xd8>)
 8003cf2:	f06f 0201 	mvn.w	r2, #1
 8003cf6:	611a      	str	r2, [r3, #16]
        DebugPC("[MENU] Modo 1 jugador -> Estado juego\r\n");
        g_state = STATE_GAME;
      }
    }
  }
}
 8003cf8:	e04f      	b.n	8003d9a <ApplyMenuCommand+0xc6>
  } else if (strcmp(cmd, CMD_DOWN) == 0) {
 8003cfa:	492d      	ldr	r1, [pc, #180]	@ (8003db0 <ApplyMenuCommand+0xdc>)
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7fc fa87 	bl	8000210 <strcmp>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d106      	bne.n	8003d16 <ApplyMenuCommand+0x42>
    g_menu_index = 1;
 8003d08:	4b27      	ldr	r3, [pc, #156]	@ (8003da8 <ApplyMenuCommand+0xd4>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]
    g_cursor.vy = CURSOR_SPEED;
 8003d0e:	4b27      	ldr	r3, [pc, #156]	@ (8003dac <ApplyMenuCommand+0xd8>)
 8003d10:	2202      	movs	r2, #2
 8003d12:	611a      	str	r2, [r3, #16]
}
 8003d14:	e041      	b.n	8003d9a <ApplyMenuCommand+0xc6>
  } else if (strcmp(cmd, CMD_STOP) == 0) {
 8003d16:	4927      	ldr	r1, [pc, #156]	@ (8003db4 <ApplyMenuCommand+0xe0>)
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7fc fa79 	bl	8000210 <strcmp>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d103      	bne.n	8003d2c <ApplyMenuCommand+0x58>
    g_cursor.vy = 0;
 8003d24:	4b21      	ldr	r3, [pc, #132]	@ (8003dac <ApplyMenuCommand+0xd8>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	611a      	str	r2, [r3, #16]
}
 8003d2a:	e036      	b.n	8003d9a <ApplyMenuCommand+0xc6>
  } else if (strcmp(cmd, CMD_ACT_A) == 0) {
 8003d2c:	4922      	ldr	r1, [pc, #136]	@ (8003db8 <ApplyMenuCommand+0xe4>)
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fc fa6e 	bl	8000210 <strcmp>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d12f      	bne.n	8003d9a <ApplyMenuCommand+0xc6>
    if (g_cursor.y == CURSOR_Y_OPT1 || g_cursor.y == CURSOR_Y_OPT2) {
 8003d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8003dac <ApplyMenuCommand+0xd8>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b7d      	cmp	r3, #125	@ 0x7d
 8003d40:	d003      	beq.n	8003d4a <ApplyMenuCommand+0x76>
 8003d42:	4b1a      	ldr	r3, [pc, #104]	@ (8003dac <ApplyMenuCommand+0xd8>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b94      	cmp	r3, #148	@ 0x94
 8003d48:	d127      	bne.n	8003d9a <ApplyMenuCommand+0xc6>
      LCD_Clear(BG_COLOR);
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	f7fc fde6 	bl	800091c <LCD_Clear>
      if (g_menu_index == 1) {
 8003d50:	4b15      	ldr	r3, [pc, #84]	@ (8003da8 <ApplyMenuCommand+0xd4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d11a      	bne.n	8003d8e <ApplyMenuCommand+0xba>
        DebugPC("[MENU] Modo 2 jugadores -> Pantalla de selección\r\n");
 8003d58:	4818      	ldr	r0, [pc, #96]	@ (8003dbc <ApplyMenuCommand+0xe8>)
 8003d5a:	f7fc ff83 	bl	8000c64 <DebugPC>
        g_state = STATE_TANK_SELECTION;
 8003d5e:	4b18      	ldr	r3, [pc, #96]	@ (8003dc0 <ApplyMenuCommand+0xec>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	701a      	strb	r2, [r3, #0]
        g_p1_tank.tank_index = 0;
 8003d64:	4b17      	ldr	r3, [pc, #92]	@ (8003dc4 <ApplyMenuCommand+0xf0>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	701a      	strb	r2, [r3, #0]
        g_p1_tank.selected = 0;
 8003d6a:	4b16      	ldr	r3, [pc, #88]	@ (8003dc4 <ApplyMenuCommand+0xf0>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	705a      	strb	r2, [r3, #1]
        g_p1_tank.explosion_frame = 0;
 8003d70:	4b14      	ldr	r3, [pc, #80]	@ (8003dc4 <ApplyMenuCommand+0xf0>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	709a      	strb	r2, [r3, #2]
        g_p2_tank.tank_index = 0;
 8003d76:	4b14      	ldr	r3, [pc, #80]	@ (8003dc8 <ApplyMenuCommand+0xf4>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
        g_p2_tank.selected = 0;
 8003d7c:	4b12      	ldr	r3, [pc, #72]	@ (8003dc8 <ApplyMenuCommand+0xf4>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	705a      	strb	r2, [r3, #1]
        g_p2_tank.explosion_frame = 0;
 8003d82:	4b11      	ldr	r3, [pc, #68]	@ (8003dc8 <ApplyMenuCommand+0xf4>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	709a      	strb	r2, [r3, #2]
        TankSel_DrawScreen();
 8003d88:	f000 fa40 	bl	800420c <TankSel_DrawScreen>
}
 8003d8c:	e005      	b.n	8003d9a <ApplyMenuCommand+0xc6>
        DebugPC("[MENU] Modo 1 jugador -> Estado juego\r\n");
 8003d8e:	480f      	ldr	r0, [pc, #60]	@ (8003dcc <ApplyMenuCommand+0xf8>)
 8003d90:	f7fc ff68 	bl	8000c64 <DebugPC>
        g_state = STATE_GAME;
 8003d94:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc0 <ApplyMenuCommand+0xec>)
 8003d96:	2203      	movs	r2, #3
 8003d98:	701a      	strb	r2, [r3, #0]
}
 8003d9a:	bf00      	nop
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	08009494 	.word	0x08009494
 8003da8:	2000bb0c 	.word	0x2000bb0c
 8003dac:	2000b8ec 	.word	0x2000b8ec
 8003db0:	080094b0 	.word	0x080094b0
 8003db4:	08009518 	.word	0x08009518
 8003db8:	0800933c 	.word	0x0800933c
 8003dbc:	0800955c 	.word	0x0800955c
 8003dc0:	2000bb0a 	.word	0x2000bb0a
 8003dc4:	2000bb10 	.word	0x2000bb10
 8003dc8:	2000bb18 	.word	0x2000bb18
 8003dcc:	08009590 	.word	0x08009590

08003dd0 <ApplyTankSelectionCommand>:

static void ApplyTankSelectionCommand(int player_id, const char* cmd)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b0a0      	sub	sp, #128	@ 0x80
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  if (player_id < 1 || player_id > 2) return;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f340 80d3 	ble.w	8003f88 <ApplyTankSelectionCommand+0x1b8>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	f300 80cf 	bgt.w	8003f88 <ApplyTankSelectionCommand+0x1b8>

  PlayerTankSelection* p = (player_id == 1) ? &g_p1_tank : &g_p2_tank;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <ApplyTankSelectionCommand+0x24>
 8003df0:	4b68      	ldr	r3, [pc, #416]	@ (8003f94 <ApplyTankSelectionCommand+0x1c4>)
 8003df2:	e000      	b.n	8003df6 <ApplyTankSelectionCommand+0x26>
 8003df4:	4b68      	ldr	r3, [pc, #416]	@ (8003f98 <ApplyTankSelectionCommand+0x1c8>)
 8003df6:	677b      	str	r3, [r7, #116]	@ 0x74

  if (p->selected) return;
 8003df8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dfa:	785b      	ldrb	r3, [r3, #1]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f040 80c5 	bne.w	8003f8c <ApplyTankSelectionCommand+0x1bc>

  char dbg[96];

  if (strcmp(cmd, CMD_LEFT) == 0) {
 8003e02:	4966      	ldr	r1, [pc, #408]	@ (8003f9c <ApplyTankSelectionCommand+0x1cc>)
 8003e04:	6838      	ldr	r0, [r7, #0]
 8003e06:	f7fc fa03 	bl	8000210 <strcmp>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d11d      	bne.n	8003e4c <ApplyTankSelectionCommand+0x7c>
    if (p->tank_index > 0) p->tank_index--;
 8003e10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d006      	beq.n	8003e26 <ApplyTankSelectionCommand+0x56>
 8003e18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e22:	701a      	strb	r2, [r3, #0]
 8003e24:	e002      	b.n	8003e2c <ApplyTankSelectionCommand+0x5c>
    else p->tank_index = 3;
 8003e26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e28:	2203      	movs	r2, #3
 8003e2a:	701a      	strb	r2, [r3, #0]
    snprintf(dbg, sizeof(dbg), "[P%d] LEFT -> Tank: %d\r\n", player_id, p->tank_index);
 8003e2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	f107 000c 	add.w	r0, r7, #12
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a59      	ldr	r2, [pc, #356]	@ (8003fa0 <ApplyTankSelectionCommand+0x1d0>)
 8003e3a:	2160      	movs	r1, #96	@ 0x60
 8003e3c:	f004 f9d4 	bl	80081e8 <sniprintf>
    DebugPC(dbg);
 8003e40:	f107 030c 	add.w	r3, r7, #12
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fc ff0d 	bl	8000c64 <DebugPC>
 8003e4a:	e0a0      	b.n	8003f8e <ApplyTankSelectionCommand+0x1be>
  }
  else if (strcmp(cmd, CMD_RIGHT) == 0) {
 8003e4c:	4955      	ldr	r1, [pc, #340]	@ (8003fa4 <ApplyTankSelectionCommand+0x1d4>)
 8003e4e:	6838      	ldr	r0, [r7, #0]
 8003e50:	f7fc f9de 	bl	8000210 <strcmp>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d11d      	bne.n	8003e96 <ApplyTankSelectionCommand+0xc6>
    if (p->tank_index < 3) p->tank_index++;
 8003e5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d806      	bhi.n	8003e70 <ApplyTankSelectionCommand+0xa0>
 8003e62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	3301      	adds	r3, #1
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e6c:	701a      	strb	r2, [r3, #0]
 8003e6e:	e002      	b.n	8003e76 <ApplyTankSelectionCommand+0xa6>
    else p->tank_index = 0;
 8003e70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e72:	2200      	movs	r2, #0
 8003e74:	701a      	strb	r2, [r3, #0]
    snprintf(dbg, sizeof(dbg), "[P%d] RIGHT -> Tank: %d\r\n", player_id, p->tank_index);
 8003e76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	f107 000c 	add.w	r0, r7, #12
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a49      	ldr	r2, [pc, #292]	@ (8003fa8 <ApplyTankSelectionCommand+0x1d8>)
 8003e84:	2160      	movs	r1, #96	@ 0x60
 8003e86:	f004 f9af 	bl	80081e8 <sniprintf>
    DebugPC(dbg);
 8003e8a:	f107 030c 	add.w	r3, r7, #12
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fc fee8 	bl	8000c64 <DebugPC>
 8003e94:	e07b      	b.n	8003f8e <ApplyTankSelectionCommand+0x1be>
  }
  else if (strcmp(cmd, CMD_UP) == 0) {
 8003e96:	4945      	ldr	r1, [pc, #276]	@ (8003fac <ApplyTankSelectionCommand+0x1dc>)
 8003e98:	6838      	ldr	r0, [r7, #0]
 8003e9a:	f7fc f9b9 	bl	8000210 <strcmp>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d11d      	bne.n	8003ee0 <ApplyTankSelectionCommand+0x110>
    if (p->tank_index > 0) p->tank_index--;
 8003ea4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d006      	beq.n	8003eba <ApplyTankSelectionCommand+0xea>
 8003eac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003eb6:	701a      	strb	r2, [r3, #0]
 8003eb8:	e002      	b.n	8003ec0 <ApplyTankSelectionCommand+0xf0>
    else p->tank_index = 3;
 8003eba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ebc:	2203      	movs	r2, #3
 8003ebe:	701a      	strb	r2, [r3, #0]
    snprintf(dbg, sizeof(dbg), "[P%d] UP -> Tank: %d\r\n", player_id, p->tank_index);
 8003ec0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	f107 000c 	add.w	r0, r7, #12
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a38      	ldr	r2, [pc, #224]	@ (8003fb0 <ApplyTankSelectionCommand+0x1e0>)
 8003ece:	2160      	movs	r1, #96	@ 0x60
 8003ed0:	f004 f98a 	bl	80081e8 <sniprintf>
    DebugPC(dbg);
 8003ed4:	f107 030c 	add.w	r3, r7, #12
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7fc fec3 	bl	8000c64 <DebugPC>
 8003ede:	e056      	b.n	8003f8e <ApplyTankSelectionCommand+0x1be>
  }
  else if (strcmp(cmd, CMD_DOWN) == 0) {
 8003ee0:	4934      	ldr	r1, [pc, #208]	@ (8003fb4 <ApplyTankSelectionCommand+0x1e4>)
 8003ee2:	6838      	ldr	r0, [r7, #0]
 8003ee4:	f7fc f994 	bl	8000210 <strcmp>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d11d      	bne.n	8003f2a <ApplyTankSelectionCommand+0x15a>
    if (p->tank_index < 3) p->tank_index++;
 8003eee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d806      	bhi.n	8003f04 <ApplyTankSelectionCommand+0x134>
 8003ef6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	3301      	adds	r3, #1
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	e002      	b.n	8003f0a <ApplyTankSelectionCommand+0x13a>
    else p->tank_index = 0;
 8003f04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f06:	2200      	movs	r2, #0
 8003f08:	701a      	strb	r2, [r3, #0]
    snprintf(dbg, sizeof(dbg), "[P%d] DOWN -> Tank: %d\r\n", player_id, p->tank_index);
 8003f0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	f107 000c 	add.w	r0, r7, #12
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a28      	ldr	r2, [pc, #160]	@ (8003fb8 <ApplyTankSelectionCommand+0x1e8>)
 8003f18:	2160      	movs	r1, #96	@ 0x60
 8003f1a:	f004 f965 	bl	80081e8 <sniprintf>
    DebugPC(dbg);
 8003f1e:	f107 030c 	add.w	r3, r7, #12
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fc fe9e 	bl	8000c64 <DebugPC>
 8003f28:	e031      	b.n	8003f8e <ApplyTankSelectionCommand+0x1be>
  }
  else if (strcmp(cmd, CMD_ACT_B) == 0) {
 8003f2a:	4924      	ldr	r1, [pc, #144]	@ (8003fbc <ApplyTankSelectionCommand+0x1ec>)
 8003f2c:	6838      	ldr	r0, [r7, #0]
 8003f2e:	f7fc f96f 	bl	8000210 <strcmp>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d12a      	bne.n	8003f8e <ApplyTankSelectionCommand+0x1be>
    p->selected = 1;
 8003f38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	705a      	strb	r2, [r3, #1]
    p->explosion_frame = 0;
 8003f3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f40:	2200      	movs	r2, #0
 8003f42:	709a      	strb	r2, [r3, #2]
    p->last_explo_ms = HAL_GetTick();
 8003f44:	f001 fb2a 	bl	800559c <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f4c:	605a      	str	r2, [r3, #4]

    int x = (player_id == 1) ? P1_TANK_X : P2_TANK_X;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <ApplyTankSelectionCommand+0x188>
 8003f54:	233c      	movs	r3, #60	@ 0x3c
 8003f56:	e000      	b.n	8003f5a <ApplyTankSelectionCommand+0x18a>
 8003f58:	23d2      	movs	r3, #210	@ 0xd2
 8003f5a:	673b      	str	r3, [r7, #112]	@ 0x70
    int y = (player_id == 1) ? P1_TANK_Y : P2_TANK_Y;
 8003f5c:	2364      	movs	r3, #100	@ 0x64
 8003f5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    TankSel_EraseTank(x, y);
 8003f60:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003f62:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003f64:	f000 f9b0 	bl	80042c8 <TankSel_EraseTank>

    snprintf(dbg, sizeof(dbg), "[P%d] ACT_B -> Tanque seleccionado: %d\r\n", player_id, p->tank_index);
 8003f68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	f107 000c 	add.w	r0, r7, #12
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a12      	ldr	r2, [pc, #72]	@ (8003fc0 <ApplyTankSelectionCommand+0x1f0>)
 8003f76:	2160      	movs	r1, #96	@ 0x60
 8003f78:	f004 f936 	bl	80081e8 <sniprintf>
    DebugPC(dbg);
 8003f7c:	f107 030c 	add.w	r3, r7, #12
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fc fe6f 	bl	8000c64 <DebugPC>
 8003f86:	e002      	b.n	8003f8e <ApplyTankSelectionCommand+0x1be>
  if (player_id < 1 || player_id > 2) return;
 8003f88:	bf00      	nop
 8003f8a:	e000      	b.n	8003f8e <ApplyTankSelectionCommand+0x1be>
  if (p->selected) return;
 8003f8c:	bf00      	nop
  }
}
 8003f8e:	3778      	adds	r7, #120	@ 0x78
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	2000bb10 	.word	0x2000bb10
 8003f98:	2000bb18 	.word	0x2000bb18
 8003f9c:	080094d0 	.word	0x080094d0
 8003fa0:	080095b8 	.word	0x080095b8
 8003fa4:	080094f4 	.word	0x080094f4
 8003fa8:	080095d4 	.word	0x080095d4
 8003fac:	08009494 	.word	0x08009494
 8003fb0:	080095f0 	.word	0x080095f0
 8003fb4:	080094b0 	.word	0x080094b0
 8003fb8:	08009608 	.word	0x08009608
 8003fbc:	08009344 	.word	0x08009344
 8003fc0:	08009624 	.word	0x08009624

08003fc4 <ApplyMapSelectionCommand>:

static void ApplyMapSelectionCommand(const char* cmd)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b092      	sub	sp, #72	@ 0x48
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  char dbg[64];

  if (strcmp(cmd, CMD_UP) == 0) {
 8003fcc:	4931      	ldr	r1, [pc, #196]	@ (8004094 <ApplyMapSelectionCommand+0xd0>)
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fc f91e 	bl	8000210 <strcmp>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10a      	bne.n	8003ff0 <ApplyMapSelectionCommand+0x2c>
    g_map_menu_index = 0;
 8003fda:	4b2f      	ldr	r3, [pc, #188]	@ (8004098 <ApplyMapSelectionCommand+0xd4>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
    g_map_selector.vy = -CURSOR_SPEED;
 8003fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800409c <ApplyMapSelectionCommand+0xd8>)
 8003fe2:	f06f 0201 	mvn.w	r2, #1
 8003fe6:	611a      	str	r2, [r3, #16]
    DebugPC("[MAP] UP -> Mapa 1\r\n");
 8003fe8:	482d      	ldr	r0, [pc, #180]	@ (80040a0 <ApplyMapSelectionCommand+0xdc>)
 8003fea:	f7fc fe3b 	bl	8000c64 <DebugPC>
  }
  else {
    snprintf(dbg, sizeof(dbg), "[MAP] Comando desconocido: %s\r\n", cmd);
    DebugPC(dbg);
  }
}
 8003fee:	e04c      	b.n	800408a <ApplyMapSelectionCommand+0xc6>
  else if (strcmp(cmd, CMD_DOWN) == 0) {
 8003ff0:	492c      	ldr	r1, [pc, #176]	@ (80040a4 <ApplyMapSelectionCommand+0xe0>)
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fc f90c 	bl	8000210 <strcmp>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d109      	bne.n	8004012 <ApplyMapSelectionCommand+0x4e>
    g_map_menu_index = 1;
 8003ffe:	4b26      	ldr	r3, [pc, #152]	@ (8004098 <ApplyMapSelectionCommand+0xd4>)
 8004000:	2201      	movs	r2, #1
 8004002:	601a      	str	r2, [r3, #0]
    g_map_selector.vy = CURSOR_SPEED;
 8004004:	4b25      	ldr	r3, [pc, #148]	@ (800409c <ApplyMapSelectionCommand+0xd8>)
 8004006:	2202      	movs	r2, #2
 8004008:	611a      	str	r2, [r3, #16]
    DebugPC("[MAP] DOWN -> Mapa 2\r\n");
 800400a:	4827      	ldr	r0, [pc, #156]	@ (80040a8 <ApplyMapSelectionCommand+0xe4>)
 800400c:	f7fc fe2a 	bl	8000c64 <DebugPC>
}
 8004010:	e03b      	b.n	800408a <ApplyMapSelectionCommand+0xc6>
  else if (strcmp(cmd, CMD_STOP) == 0) {
 8004012:	4926      	ldr	r1, [pc, #152]	@ (80040ac <ApplyMapSelectionCommand+0xe8>)
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7fc f8fb 	bl	8000210 <strcmp>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d106      	bne.n	800402e <ApplyMapSelectionCommand+0x6a>
    g_map_selector.vy = 0;
 8004020:	4b1e      	ldr	r3, [pc, #120]	@ (800409c <ApplyMapSelectionCommand+0xd8>)
 8004022:	2200      	movs	r2, #0
 8004024:	611a      	str	r2, [r3, #16]
    DebugPC("[MAP] STOP\r\n");
 8004026:	4822      	ldr	r0, [pc, #136]	@ (80040b0 <ApplyMapSelectionCommand+0xec>)
 8004028:	f7fc fe1c 	bl	8000c64 <DebugPC>
}
 800402c:	e02d      	b.n	800408a <ApplyMapSelectionCommand+0xc6>
  else if (strcmp(cmd, CMD_ACT_A) == 0) {  // SOLO ACT_A
 800402e:	4921      	ldr	r1, [pc, #132]	@ (80040b4 <ApplyMapSelectionCommand+0xf0>)
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7fc f8ed 	bl	8000210 <strcmp>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10f      	bne.n	800405c <ApplyMapSelectionCommand+0x98>
    snprintf(dbg, sizeof(dbg), "[MAP] ACT_A presionado en posición: %d\r\n", g_map_menu_index);
 800403c:	4b16      	ldr	r3, [pc, #88]	@ (8004098 <ApplyMapSelectionCommand+0xd4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f107 0008 	add.w	r0, r7, #8
 8004044:	4a1c      	ldr	r2, [pc, #112]	@ (80040b8 <ApplyMapSelectionCommand+0xf4>)
 8004046:	2140      	movs	r1, #64	@ 0x40
 8004048:	f004 f8ce 	bl	80081e8 <sniprintf>
    DebugPC(dbg);
 800404c:	f107 0308 	add.w	r3, r7, #8
 8004050:	4618      	mov	r0, r3
 8004052:	f7fc fe07 	bl	8000c64 <DebugPC>
    MapSel_ConfirmSelection();
 8004056:	f000 fb71 	bl	800473c <MapSel_ConfirmSelection>
}
 800405a:	e016      	b.n	800408a <ApplyMapSelectionCommand+0xc6>
  else if (strcmp(cmd, CMD_ACT_B) == 0) {  // IGNORAR ACT_B
 800405c:	4917      	ldr	r1, [pc, #92]	@ (80040bc <ApplyMapSelectionCommand+0xf8>)
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7fc f8d6 	bl	8000210 <strcmp>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d103      	bne.n	8004072 <ApplyMapSelectionCommand+0xae>
    DebugPC("[MAP] ACT_B ignorado en selección de mapa\r\n");
 800406a:	4815      	ldr	r0, [pc, #84]	@ (80040c0 <ApplyMapSelectionCommand+0xfc>)
 800406c:	f7fc fdfa 	bl	8000c64 <DebugPC>
}
 8004070:	e00b      	b.n	800408a <ApplyMapSelectionCommand+0xc6>
    snprintf(dbg, sizeof(dbg), "[MAP] Comando desconocido: %s\r\n", cmd);
 8004072:	f107 0008 	add.w	r0, r7, #8
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a12      	ldr	r2, [pc, #72]	@ (80040c4 <ApplyMapSelectionCommand+0x100>)
 800407a:	2140      	movs	r1, #64	@ 0x40
 800407c:	f004 f8b4 	bl	80081e8 <sniprintf>
    DebugPC(dbg);
 8004080:	f107 0308 	add.w	r3, r7, #8
 8004084:	4618      	mov	r0, r3
 8004086:	f7fc fded 	bl	8000c64 <DebugPC>
}
 800408a:	bf00      	nop
 800408c:	3748      	adds	r7, #72	@ 0x48
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	08009494 	.word	0x08009494
 8004098:	2000bb24 	.word	0x2000bb24
 800409c:	2000b908 	.word	0x2000b908
 80040a0:	08009650 	.word	0x08009650
 80040a4:	080094b0 	.word	0x080094b0
 80040a8:	08009668 	.word	0x08009668
 80040ac:	08009518 	.word	0x08009518
 80040b0:	08009680 	.word	0x08009680
 80040b4:	0800933c 	.word	0x0800933c
 80040b8:	08009690 	.word	0x08009690
 80040bc:	08009344 	.word	0x08009344
 80040c0:	080096bc 	.word	0x080096bc
 80040c4:	080096ec 	.word	0x080096ec

080040c8 <Menu_DrawBackground>:


// ===== FUNCIONES DE MENÚ INICIO =====
static void Menu_DrawBackground(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af02      	add	r7, sp, #8
  LCD_Bitmap(START_X, START_Y, START_W, START_H, pantalla_inicio);
 80040ce:	4b06      	ldr	r3, [pc, #24]	@ (80040e8 <Menu_DrawBackground+0x20>)
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	23f0      	movs	r3, #240	@ 0xf0
 80040d4:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80040d8:	2100      	movs	r1, #0
 80040da:	2006      	movs	r0, #6
 80040dc:	f7fc fcbc 	bl	8000a58 <LCD_Bitmap>
}
 80040e0:	bf00      	nop
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	08009c88 	.word	0x08009c88

080040ec <Menu_UpdateCursor>:

static void Menu_UpdateCursor(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
  g_cursor.prev_x = g_cursor.x;
 80040f2:	4b2b      	ldr	r3, [pc, #172]	@ (80041a0 <Menu_UpdateCursor+0xb4>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a2a      	ldr	r2, [pc, #168]	@ (80041a0 <Menu_UpdateCursor+0xb4>)
 80040f8:	6093      	str	r3, [r2, #8]
  g_cursor.prev_y = g_cursor.y;
 80040fa:	4b29      	ldr	r3, [pc, #164]	@ (80041a0 <Menu_UpdateCursor+0xb4>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	4a28      	ldr	r2, [pc, #160]	@ (80041a0 <Menu_UpdateCursor+0xb4>)
 8004100:	60d3      	str	r3, [r2, #12]

  int target_y = (g_menu_index == 0) ? CURSOR_Y_OPT1 : CURSOR_Y_OPT2;
 8004102:	4b28      	ldr	r3, [pc, #160]	@ (80041a4 <Menu_UpdateCursor+0xb8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <Menu_UpdateCursor+0x22>
 800410a:	237d      	movs	r3, #125	@ 0x7d
 800410c:	e000      	b.n	8004110 <Menu_UpdateCursor+0x24>
 800410e:	2394      	movs	r3, #148	@ 0x94
 8004110:	607b      	str	r3, [r7, #4]

  if (abs(g_cursor.y - target_y) <= CURSOR_SPEED) {
 8004112:	4b23      	ldr	r3, [pc, #140]	@ (80041a0 <Menu_UpdateCursor+0xb4>)
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	f113 0f02 	cmn.w	r3, #2
 800411e:	db0c      	blt.n	800413a <Menu_UpdateCursor+0x4e>
 8004120:	4b1f      	ldr	r3, [pc, #124]	@ (80041a0 <Menu_UpdateCursor+0xb4>)
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	dc06      	bgt.n	800413a <Menu_UpdateCursor+0x4e>
    g_cursor.y = target_y;
 800412c:	4a1c      	ldr	r2, [pc, #112]	@ (80041a0 <Menu_UpdateCursor+0xb4>)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6053      	str	r3, [r2, #4]
    g_cursor.vy = 0;
 8004132:	4b1b      	ldr	r3, [pc, #108]	@ (80041a0 <Menu_UpdateCursor+0xb4>)
 8004134:	2200      	movs	r2, #0
 8004136:	611a      	str	r2, [r3, #16]
 8004138:	e00d      	b.n	8004156 <Menu_UpdateCursor+0x6a>
  } else {
    g_cursor.y += (g_cursor.y < target_y) ? CURSOR_SPEED : -CURSOR_SPEED;
 800413a:	4b19      	ldr	r3, [pc, #100]	@ (80041a0 <Menu_UpdateCursor+0xb4>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	4a18      	ldr	r2, [pc, #96]	@ (80041a0 <Menu_UpdateCursor+0xb4>)
 8004140:	6852      	ldr	r2, [r2, #4]
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4291      	cmp	r1, r2
 8004146:	dd01      	ble.n	800414c <Menu_UpdateCursor+0x60>
 8004148:	2202      	movs	r2, #2
 800414a:	e001      	b.n	8004150 <Menu_UpdateCursor+0x64>
 800414c:	f06f 0201 	mvn.w	r2, #1
 8004150:	4413      	add	r3, r2
 8004152:	4a13      	ldr	r2, [pc, #76]	@ (80041a0 <Menu_UpdateCursor+0xb4>)
 8004154:	6053      	str	r3, [r2, #4]
  }

  if (g_cursor.y < 0) g_cursor.y = 0;
 8004156:	4b12      	ldr	r3, [pc, #72]	@ (80041a0 <Menu_UpdateCursor+0xb4>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	da02      	bge.n	8004164 <Menu_UpdateCursor+0x78>
 800415e:	4b10      	ldr	r3, [pc, #64]	@ (80041a0 <Menu_UpdateCursor+0xb4>)
 8004160:	2200      	movs	r2, #0
 8004162:	605a      	str	r2, [r3, #4]
  if (g_cursor.y > (LCD_H - MENU_SPRITE_H)) g_cursor.y = (LCD_H - MENU_SPRITE_H);
 8004164:	4b0e      	ldr	r3, [pc, #56]	@ (80041a0 <Menu_UpdateCursor+0xb4>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2be3      	cmp	r3, #227	@ 0xe3
 800416a:	dd02      	ble.n	8004172 <Menu_UpdateCursor+0x86>
 800416c:	4b0c      	ldr	r3, [pc, #48]	@ (80041a0 <Menu_UpdateCursor+0xb4>)
 800416e:	22e3      	movs	r2, #227	@ 0xe3
 8004170:	605a      	str	r2, [r3, #4]

  uint32_t now = HAL_GetTick();
 8004172:	f001 fa13 	bl	800559c <HAL_GetTick>
 8004176:	6038      	str	r0, [r7, #0]
  if (now - g_cursor.last_anim_ms >= MENU_ANIM_MS) {
 8004178:	4b09      	ldr	r3, [pc, #36]	@ (80041a0 <Menu_UpdateCursor+0xb4>)
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b77      	cmp	r3, #119	@ 0x77
 8004182:	d909      	bls.n	8004198 <Menu_UpdateCursor+0xac>
    g_cursor.anim ^= 1;
 8004184:	4b06      	ldr	r3, [pc, #24]	@ (80041a0 <Menu_UpdateCursor+0xb4>)
 8004186:	7d1b      	ldrb	r3, [r3, #20]
 8004188:	f083 0301 	eor.w	r3, r3, #1
 800418c:	b2da      	uxtb	r2, r3
 800418e:	4b04      	ldr	r3, [pc, #16]	@ (80041a0 <Menu_UpdateCursor+0xb4>)
 8004190:	751a      	strb	r2, [r3, #20]
    g_cursor.last_anim_ms = now;
 8004192:	4a03      	ldr	r2, [pc, #12]	@ (80041a0 <Menu_UpdateCursor+0xb4>)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	6193      	str	r3, [r2, #24]
  }
}
 8004198:	bf00      	nop
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	2000b8ec 	.word	0x2000b8ec
 80041a4:	2000bb0c 	.word	0x2000bb0c

080041a8 <Menu_EraseCursorPrev>:

static void Menu_EraseCursorPrev(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af02      	add	r7, sp, #8
  FillRect(g_cursor.prev_x, g_cursor.prev_y, MENU_SPRITE_W, MENU_SPRITE_H, BG_COLOR);
 80041ae:	4b07      	ldr	r3, [pc, #28]	@ (80041cc <Menu_EraseCursorPrev+0x24>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	4618      	mov	r0, r3
 80041b4:	4b05      	ldr	r3, [pc, #20]	@ (80041cc <Menu_EraseCursorPrev+0x24>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4619      	mov	r1, r3
 80041ba:	2300      	movs	r3, #0
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	230d      	movs	r3, #13
 80041c0:	220d      	movs	r2, #13
 80041c2:	f7fc fbef 	bl	80009a4 <FillRect>
}
 80041c6:	bf00      	nop
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	2000b8ec 	.word	0x2000b8ec

080041d0 <Menu_DrawCursor>:

static void Menu_DrawCursor(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af06      	add	r7, sp, #24
  LCD_Sprite(g_cursor.x, g_cursor.y, MENU_SPRITE_W, MENU_SPRITE_H,
 80041d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004204 <Menu_DrawCursor+0x34>)
 80041d8:	6818      	ldr	r0, [r3, #0]
 80041da:	4b0a      	ldr	r3, [pc, #40]	@ (8004204 <Menu_DrawCursor+0x34>)
 80041dc:	6859      	ldr	r1, [r3, #4]
             tanque_inicio, MENU_SPRITE_COLS, g_cursor.anim, 0, 0);
 80041de:	4b09      	ldr	r3, [pc, #36]	@ (8004204 <Menu_DrawCursor+0x34>)
 80041e0:	7d1b      	ldrb	r3, [r3, #20]
  LCD_Sprite(g_cursor.x, g_cursor.y, MENU_SPRITE_W, MENU_SPRITE_H,
 80041e2:	461a      	mov	r2, r3
 80041e4:	2300      	movs	r3, #0
 80041e6:	9304      	str	r3, [sp, #16]
 80041e8:	2300      	movs	r3, #0
 80041ea:	9303      	str	r3, [sp, #12]
 80041ec:	9202      	str	r2, [sp, #8]
 80041ee:	2302      	movs	r3, #2
 80041f0:	9301      	str	r3, [sp, #4]
 80041f2:	4b05      	ldr	r3, [pc, #20]	@ (8004208 <Menu_DrawCursor+0x38>)
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	230d      	movs	r3, #13
 80041f8:	220d      	movs	r2, #13
 80041fa:	f7fc fc87 	bl	8000b0c <LCD_Sprite>
}
 80041fe:	bf00      	nop
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	2000b8ec 	.word	0x2000b8ec
 8004208:	20002600 	.word	0x20002600

0800420c <TankSel_DrawScreen>:

// ===== FUNCIONES DE SELECCIÓN DE TANQUES =====
static void TankSel_DrawScreen(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af02      	add	r7, sp, #8
  LCD_Bitmap(TITLE_X, TITLE_Y, TITLE_W, TITLE_H, elegir_tanque);
 8004212:	4b27      	ldr	r3, [pc, #156]	@ (80042b0 <TankSel_DrawScreen+0xa4>)
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	230d      	movs	r3, #13
 8004218:	22e8      	movs	r2, #232	@ 0xe8
 800421a:	2128      	movs	r1, #40	@ 0x28
 800421c:	202c      	movs	r0, #44	@ 0x2c
 800421e:	f7fc fc1b 	bl	8000a58 <LCD_Bitmap>
  TankSel_DrawTank(P1_TANK_X, P1_TANK_Y, g_p1_tank.tank_index);
 8004222:	4b24      	ldr	r3, [pc, #144]	@ (80042b4 <TankSel_DrawScreen+0xa8>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	2164      	movs	r1, #100	@ 0x64
 800422a:	203c      	movs	r0, #60	@ 0x3c
 800422c:	f000 f85e 	bl	80042ec <TankSel_DrawTank>
  TankSel_DrawTank(P2_TANK_X, P2_TANK_Y, g_p2_tank.tank_index);
 8004230:	4b21      	ldr	r3, [pc, #132]	@ (80042b8 <TankSel_DrawScreen+0xac>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	2164      	movs	r1, #100	@ 0x64
 8004238:	20d2      	movs	r0, #210	@ 0xd2
 800423a:	f000 f857 	bl	80042ec <TankSel_DrawTank>
  LCD_Bitmap(P1_LABEL_X, P1_LABEL_Y, LABEL_W, LABEL_H, player1);
 800423e:	4b1f      	ldr	r3, [pc, #124]	@ (80042bc <TankSel_DrawScreen+0xb0>)
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	230d      	movs	r3, #13
 8004244:	227d      	movs	r2, #125	@ 0x7d
 8004246:	21a0      	movs	r1, #160	@ 0xa0
 8004248:	2017      	movs	r0, #23
 800424a:	f7fc fc05 	bl	8000a58 <LCD_Bitmap>
  LCD_Bitmap(P2_LABEL_X, P2_LABEL_Y, LABEL_W, LABEL_H, player2);
 800424e:	4b1c      	ldr	r3, [pc, #112]	@ (80042c0 <TankSel_DrawScreen+0xb4>)
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	230d      	movs	r3, #13
 8004254:	227d      	movs	r2, #125	@ 0x7d
 8004256:	21a0      	movs	r1, #160	@ 0xa0
 8004258:	20ad      	movs	r0, #173	@ 0xad
 800425a:	f7fc fbfd 	bl	8000a58 <LCD_Bitmap>

  // Borde superior
  for (int x = 0; x < LCD_W; x += BLOCK_SIZE) {
 800425e:	2300      	movs	r3, #0
 8004260:	607b      	str	r3, [r7, #4]
 8004262:	e00a      	b.n	800427a <TankSel_DrawScreen+0x6e>
    LCD_Bitmap(x, 0, BLOCK_SIZE, BLOCK_SIZE, bloquegris_8_8);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	4b17      	ldr	r3, [pc, #92]	@ (80042c4 <TankSel_DrawScreen+0xb8>)
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	2308      	movs	r3, #8
 800426c:	2208      	movs	r2, #8
 800426e:	2100      	movs	r1, #0
 8004270:	f7fc fbf2 	bl	8000a58 <LCD_Bitmap>
  for (int x = 0; x < LCD_W; x += BLOCK_SIZE) {
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3308      	adds	r3, #8
 8004278:	607b      	str	r3, [r7, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004280:	dbf0      	blt.n	8004264 <TankSel_DrawScreen+0x58>
  }

  // Borde inferior
  for (int x = 0; x < LCD_W; x += BLOCK_SIZE) {
 8004282:	2300      	movs	r3, #0
 8004284:	603b      	str	r3, [r7, #0]
 8004286:	e00a      	b.n	800429e <TankSel_DrawScreen+0x92>
    LCD_Bitmap(x, LCD_H - BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE, bloquegris_8_8);
 8004288:	6838      	ldr	r0, [r7, #0]
 800428a:	4b0e      	ldr	r3, [pc, #56]	@ (80042c4 <TankSel_DrawScreen+0xb8>)
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	2308      	movs	r3, #8
 8004290:	2208      	movs	r2, #8
 8004292:	21e8      	movs	r1, #232	@ 0xe8
 8004294:	f7fc fbe0 	bl	8000a58 <LCD_Bitmap>
  for (int x = 0; x < LCD_W; x += BLOCK_SIZE) {
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	3308      	adds	r3, #8
 800429c:	603b      	str	r3, [r7, #0]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80042a4:	dbf0      	blt.n	8004288 <TankSel_DrawScreen+0x7c>
  }

}
 80042a6:	bf00      	nop
 80042a8:	bf00      	nop
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	0802de08 	.word	0x0802de08
 80042b4:	2000bb10 	.word	0x2000bb10
 80042b8:	2000bb18 	.word	0x2000bb18
 80042bc:	0802f598 	.word	0x0802f598
 80042c0:	0803024c 	.word	0x0803024c
 80042c4:	08034104 	.word	0x08034104

080042c8 <TankSel_EraseTank>:

static void TankSel_EraseTank(int x, int y)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  FillRect(x, y, TANK_SPRITE_W, TANK_SPRITE_H, BG_COLOR);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	6839      	ldr	r1, [r7, #0]
 80042d6:	2300      	movs	r3, #0
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	2332      	movs	r3, #50	@ 0x32
 80042dc:	2232      	movs	r2, #50	@ 0x32
 80042de:	f7fc fb61 	bl	80009a4 <FillRect>
}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <TankSel_DrawTank>:

static void TankSel_DrawTank(int x, int y, uint8_t tank_index)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08a      	sub	sp, #40	@ 0x28
 80042f0:	af06      	add	r7, sp, #24
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	4613      	mov	r3, r2
 80042f8:	71fb      	strb	r3, [r7, #7]
  LCD_Sprite(x, y, TANK_SPRITE_W, TANK_SPRITE_H,
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	2200      	movs	r2, #0
 80042fe:	9204      	str	r2, [sp, #16]
 8004300:	2200      	movs	r2, #0
 8004302:	9203      	str	r2, [sp, #12]
 8004304:	9302      	str	r3, [sp, #8]
 8004306:	2304      	movs	r3, #4
 8004308:	9301      	str	r3, [sp, #4]
 800430a:	4b06      	ldr	r3, [pc, #24]	@ (8004324 <TankSel_DrawTank+0x38>)
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	2332      	movs	r3, #50	@ 0x32
 8004310:	2232      	movs	r2, #50	@ 0x32
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f7fc fbf9 	bl	8000b0c <LCD_Sprite>
             seleccion_tanque, TANK_SPRITE_COLS, tank_index, 0, 0);
}
 800431a:	bf00      	nop
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	200028a4 	.word	0x200028a4

08004328 <TankSel_DrawExplosion>:

static void TankSel_DrawExplosion(int x, int y, uint8_t frame)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08a      	sub	sp, #40	@ 0x28
 800432c:	af06      	add	r7, sp, #24
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	4613      	mov	r3, r2
 8004334:	71fb      	strb	r3, [r7, #7]
  LCD_Sprite(x, y, EXPLO_SPRITE_W, EXPLO_SPRITE_H,
 8004336:	79fb      	ldrb	r3, [r7, #7]
 8004338:	2200      	movs	r2, #0
 800433a:	9204      	str	r2, [sp, #16]
 800433c:	2200      	movs	r2, #0
 800433e:	9203      	str	r2, [sp, #12]
 8004340:	9302      	str	r3, [sp, #8]
 8004342:	2303      	movs	r3, #3
 8004344:	9301      	str	r3, [sp, #4]
 8004346:	4b06      	ldr	r3, [pc, #24]	@ (8004360 <TankSel_DrawExplosion+0x38>)
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	2332      	movs	r3, #50	@ 0x32
 800434c:	2232      	movs	r2, #50	@ 0x32
 800434e:	68b9      	ldr	r1, [r7, #8]
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f7fc fbdb 	bl	8000b0c <LCD_Sprite>
             seleccion, EXPLO_SPRITE_COLS, frame, 0, 0);
}
 8004356:	bf00      	nop
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	200076c4 	.word	0x200076c4

08004364 <TankSel_UpdatePlayer>:

static void TankSel_UpdatePlayer(PlayerTankSelection* p, int x, int y)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  if (p->selected) {
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	785b      	ldrb	r3, [r3, #1]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d01c      	beq.n	80043b2 <TankSel_UpdatePlayer+0x4e>
    uint32_t now = HAL_GetTick();
 8004378:	f001 f910 	bl	800559c <HAL_GetTick>
 800437c:	6178      	str	r0, [r7, #20]

    if (p->explosion_frame < 2 && (now - p->last_explo_ms) >= EXPLO_ANIM_MS) {
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	789b      	ldrb	r3, [r3, #2]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d80e      	bhi.n	80043a4 <TankSel_UpdatePlayer+0x40>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b95      	cmp	r3, #149	@ 0x95
 8004390:	d908      	bls.n	80043a4 <TankSel_UpdatePlayer+0x40>
      p->explosion_frame++;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	789b      	ldrb	r3, [r3, #2]
 8004396:	3301      	adds	r3, #1
 8004398:	b2da      	uxtb	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	709a      	strb	r2, [r3, #2]
      p->last_explo_ms = now;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	605a      	str	r2, [r3, #4]
    }

    TankSel_DrawExplosion(x, y, p->explosion_frame);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	789b      	ldrb	r3, [r3, #2]
 80043a8:	461a      	mov	r2, r3
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	68b8      	ldr	r0, [r7, #8]
 80043ae:	f7ff ffbb 	bl	8004328 <TankSel_DrawExplosion>
  }
}
 80043b2:	bf00      	nop
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <MapSel_DrawScreen>:

// ===== FUNCIONES DE SELECCIÓN DE MAPAS =====
static void MapSel_DrawScreen(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af02      	add	r7, sp, #8
  // Dibujar borde decorativo
  MapSel_DrawBorder();
 80043c2:	f000 f90b 	bl	80045dc <MapSel_DrawBorder>

  // Título centrado
  LCD_Bitmap(MAP_TITLE_X, MAP_TITLE_Y, MAP_TITLE_W, MAP_TITLE_H, elige_mapa);
 80043c6:	4b7b      	ldr	r3, [pc, #492]	@ (80045b4 <MapSel_DrawScreen+0x1f8>)
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	230d      	movs	r3, #13
 80043cc:	22c1      	movs	r2, #193	@ 0xc1
 80043ce:	2132      	movs	r1, #50	@ 0x32
 80043d0:	203f      	movs	r0, #63	@ 0x3f
 80043d2:	f7fc fb41 	bl	8000a58 <LCD_Bitmap>

  // Opciones de mapas centradas
  LCD_Bitmap(MAP_NAME_X, MAP1_Y, MAP_NAME_W, MAP_NAME_H, mapa_1);
 80043d6:	4b78      	ldr	r3, [pc, #480]	@ (80045b8 <MapSel_DrawScreen+0x1fc>)
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	230d      	movs	r3, #13
 80043dc:	2262      	movs	r2, #98	@ 0x62
 80043de:	216e      	movs	r1, #110	@ 0x6e
 80043e0:	206f      	movs	r0, #111	@ 0x6f
 80043e2:	f7fc fb39 	bl	8000a58 <LCD_Bitmap>
  LCD_Bitmap(MAP_NAME_X, MAP2_Y, MAP_NAME_W, MAP_NAME_H, mapa_2);
 80043e6:	4b75      	ldr	r3, [pc, #468]	@ (80045bc <MapSel_DrawScreen+0x200>)
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	230d      	movs	r3, #13
 80043ec:	2262      	movs	r2, #98	@ 0x62
 80043ee:	2196      	movs	r1, #150	@ 0x96
 80043f0:	206f      	movs	r0, #111	@ 0x6f
 80043f2:	f7fc fb31 	bl	8000a58 <LCD_Bitmap>

  // ESPACIO PARA DECORACIÓN ADICIONAL
  LCD_Bitmap(0, 168, 16, 16, monte);
 80043f6:	4b72      	ldr	r3, [pc, #456]	@ (80045c0 <MapSel_DrawScreen+0x204>)
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	2310      	movs	r3, #16
 80043fc:	2210      	movs	r2, #16
 80043fe:	21a8      	movs	r1, #168	@ 0xa8
 8004400:	2000      	movs	r0, #0
 8004402:	f7fc fb29 	bl	8000a58 <LCD_Bitmap>
  LCD_Bitmap(0, 184, 16, 16, monte);
 8004406:	4b6e      	ldr	r3, [pc, #440]	@ (80045c0 <MapSel_DrawScreen+0x204>)
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	2310      	movs	r3, #16
 800440c:	2210      	movs	r2, #16
 800440e:	21b8      	movs	r1, #184	@ 0xb8
 8004410:	2000      	movs	r0, #0
 8004412:	f7fc fb21 	bl	8000a58 <LCD_Bitmap>
  LCD_Bitmap(16, 184, 16, 16, monte);
 8004416:	4b6a      	ldr	r3, [pc, #424]	@ (80045c0 <MapSel_DrawScreen+0x204>)
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	2310      	movs	r3, #16
 800441c:	2210      	movs	r2, #16
 800441e:	21b8      	movs	r1, #184	@ 0xb8
 8004420:	2010      	movs	r0, #16
 8004422:	f7fc fb19 	bl	8000a58 <LCD_Bitmap>
  LCD_Bitmap(16, 200, 16, 16, monte);
 8004426:	4b66      	ldr	r3, [pc, #408]	@ (80045c0 <MapSel_DrawScreen+0x204>)
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	2310      	movs	r3, #16
 800442c:	2210      	movs	r2, #16
 800442e:	21c8      	movs	r1, #200	@ 0xc8
 8004430:	2010      	movs	r0, #16
 8004432:	f7fc fb11 	bl	8000a58 <LCD_Bitmap>
  LCD_Bitmap(32, 200, 16, 16, monte);
 8004436:	4b62      	ldr	r3, [pc, #392]	@ (80045c0 <MapSel_DrawScreen+0x204>)
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	2310      	movs	r3, #16
 800443c:	2210      	movs	r2, #16
 800443e:	21c8      	movs	r1, #200	@ 0xc8
 8004440:	2020      	movs	r0, #32
 8004442:	f7fc fb09 	bl	8000a58 <LCD_Bitmap>
  LCD_Bitmap(32, 216, 16, 16, monte);
 8004446:	4b5e      	ldr	r3, [pc, #376]	@ (80045c0 <MapSel_DrawScreen+0x204>)
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	2310      	movs	r3, #16
 800444c:	2210      	movs	r2, #16
 800444e:	21d8      	movs	r1, #216	@ 0xd8
 8004450:	2020      	movs	r0, #32
 8004452:	f7fc fb01 	bl	8000a58 <LCD_Bitmap>
  LCD_Bitmap(48, 216, 16, 16, monte);
 8004456:	4b5a      	ldr	r3, [pc, #360]	@ (80045c0 <MapSel_DrawScreen+0x204>)
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	2310      	movs	r3, #16
 800445c:	2210      	movs	r2, #16
 800445e:	21d8      	movs	r1, #216	@ 0xd8
 8004460:	2030      	movs	r0, #48	@ 0x30
 8004462:	f7fc faf9 	bl	8000a58 <LCD_Bitmap>

  LCD_Bitmap(0, 216, 16, 16, bloquegris_16_16);
 8004466:	4b57      	ldr	r3, [pc, #348]	@ (80045c4 <MapSel_DrawScreen+0x208>)
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	2310      	movs	r3, #16
 800446c:	2210      	movs	r2, #16
 800446e:	21d8      	movs	r1, #216	@ 0xd8
 8004470:	2000      	movs	r0, #0
 8004472:	f7fc faf1 	bl	8000a58 <LCD_Bitmap>
  LCD_Bitmap(0, 200, 16, 16, bloquegris_16_16);
 8004476:	4b53      	ldr	r3, [pc, #332]	@ (80045c4 <MapSel_DrawScreen+0x208>)
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	2310      	movs	r3, #16
 800447c:	2210      	movs	r2, #16
 800447e:	21c8      	movs	r1, #200	@ 0xc8
 8004480:	2000      	movs	r0, #0
 8004482:	f7fc fae9 	bl	8000a58 <LCD_Bitmap>
  LCD_Bitmap(16, 216, 16, 16, bloquegris_16_16);
 8004486:	4b4f      	ldr	r3, [pc, #316]	@ (80045c4 <MapSel_DrawScreen+0x208>)
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	2310      	movs	r3, #16
 800448c:	2210      	movs	r2, #16
 800448e:	21d8      	movs	r1, #216	@ 0xd8
 8004490:	2010      	movs	r0, #16
 8004492:	f7fc fae1 	bl	8000a58 <LCD_Bitmap>

  LCD_Bitmap(304, 168, 16, 16, monte);
 8004496:	4b4a      	ldr	r3, [pc, #296]	@ (80045c0 <MapSel_DrawScreen+0x204>)
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	2310      	movs	r3, #16
 800449c:	2210      	movs	r2, #16
 800449e:	21a8      	movs	r1, #168	@ 0xa8
 80044a0:	f44f 7098 	mov.w	r0, #304	@ 0x130
 80044a4:	f7fc fad8 	bl	8000a58 <LCD_Bitmap>
  LCD_Bitmap(304, 184, 16, 16, monte);
 80044a8:	4b45      	ldr	r3, [pc, #276]	@ (80045c0 <MapSel_DrawScreen+0x204>)
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	2310      	movs	r3, #16
 80044ae:	2210      	movs	r2, #16
 80044b0:	21b8      	movs	r1, #184	@ 0xb8
 80044b2:	f44f 7098 	mov.w	r0, #304	@ 0x130
 80044b6:	f7fc facf 	bl	8000a58 <LCD_Bitmap>
  LCD_Bitmap(288, 184, 16, 16, monte);
 80044ba:	4b41      	ldr	r3, [pc, #260]	@ (80045c0 <MapSel_DrawScreen+0x204>)
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	2310      	movs	r3, #16
 80044c0:	2210      	movs	r2, #16
 80044c2:	21b8      	movs	r1, #184	@ 0xb8
 80044c4:	f44f 7090 	mov.w	r0, #288	@ 0x120
 80044c8:	f7fc fac6 	bl	8000a58 <LCD_Bitmap>
  LCD_Bitmap(288, 200, 16, 16, monte);
 80044cc:	4b3c      	ldr	r3, [pc, #240]	@ (80045c0 <MapSel_DrawScreen+0x204>)
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	2310      	movs	r3, #16
 80044d2:	2210      	movs	r2, #16
 80044d4:	21c8      	movs	r1, #200	@ 0xc8
 80044d6:	f44f 7090 	mov.w	r0, #288	@ 0x120
 80044da:	f7fc fabd 	bl	8000a58 <LCD_Bitmap>
  LCD_Bitmap(272, 200, 16, 16, monte);
 80044de:	4b38      	ldr	r3, [pc, #224]	@ (80045c0 <MapSel_DrawScreen+0x204>)
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	2310      	movs	r3, #16
 80044e4:	2210      	movs	r2, #16
 80044e6:	21c8      	movs	r1, #200	@ 0xc8
 80044e8:	f44f 7088 	mov.w	r0, #272	@ 0x110
 80044ec:	f7fc fab4 	bl	8000a58 <LCD_Bitmap>
  LCD_Bitmap(272, 216, 16, 16, monte);
 80044f0:	4b33      	ldr	r3, [pc, #204]	@ (80045c0 <MapSel_DrawScreen+0x204>)
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	2310      	movs	r3, #16
 80044f6:	2210      	movs	r2, #16
 80044f8:	21d8      	movs	r1, #216	@ 0xd8
 80044fa:	f44f 7088 	mov.w	r0, #272	@ 0x110
 80044fe:	f7fc faab 	bl	8000a58 <LCD_Bitmap>
  LCD_Bitmap(256, 216, 16, 16, monte);
 8004502:	4b2f      	ldr	r3, [pc, #188]	@ (80045c0 <MapSel_DrawScreen+0x204>)
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	2310      	movs	r3, #16
 8004508:	2210      	movs	r2, #16
 800450a:	21d8      	movs	r1, #216	@ 0xd8
 800450c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004510:	f7fc faa2 	bl	8000a58 <LCD_Bitmap>

  LCD_Bitmap(304, 216, 16, 16, bloquegris_16_16);
 8004514:	4b2b      	ldr	r3, [pc, #172]	@ (80045c4 <MapSel_DrawScreen+0x208>)
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	2310      	movs	r3, #16
 800451a:	2210      	movs	r2, #16
 800451c:	21d8      	movs	r1, #216	@ 0xd8
 800451e:	f44f 7098 	mov.w	r0, #304	@ 0x130
 8004522:	f7fc fa99 	bl	8000a58 <LCD_Bitmap>
  LCD_Bitmap(304, 200, 16, 16, bloquegris_16_16);
 8004526:	4b27      	ldr	r3, [pc, #156]	@ (80045c4 <MapSel_DrawScreen+0x208>)
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	2310      	movs	r3, #16
 800452c:	2210      	movs	r2, #16
 800452e:	21c8      	movs	r1, #200	@ 0xc8
 8004530:	f44f 7098 	mov.w	r0, #304	@ 0x130
 8004534:	f7fc fa90 	bl	8000a58 <LCD_Bitmap>
  LCD_Bitmap(288, 216, 16, 16, bloquegris_16_16);
 8004538:	4b22      	ldr	r3, [pc, #136]	@ (80045c4 <MapSel_DrawScreen+0x208>)
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	2310      	movs	r3, #16
 800453e:	2210      	movs	r2, #16
 8004540:	21d8      	movs	r1, #216	@ 0xd8
 8004542:	f44f 7090 	mov.w	r0, #288	@ 0x120
 8004546:	f7fc fa87 	bl	8000a58 <LCD_Bitmap>

  LCD_Bitmap(144, 208, 32, 16, casita_ladrillo);
 800454a:	4b1f      	ldr	r3, [pc, #124]	@ (80045c8 <MapSel_DrawScreen+0x20c>)
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	2310      	movs	r3, #16
 8004550:	2220      	movs	r2, #32
 8004552:	21d0      	movs	r1, #208	@ 0xd0
 8004554:	2090      	movs	r0, #144	@ 0x90
 8004556:	f7fc fa7f 	bl	8000a58 <LCD_Bitmap>
  LCD_Bitmap(152, 216, 16, 16, aguila);
 800455a:	4b1c      	ldr	r3, [pc, #112]	@ (80045cc <MapSel_DrawScreen+0x210>)
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	2310      	movs	r3, #16
 8004560:	2210      	movs	r2, #16
 8004562:	21d8      	movs	r1, #216	@ 0xd8
 8004564:	2098      	movs	r0, #152	@ 0x98
 8004566:	f7fc fa77 	bl	8000a58 <LCD_Bitmap>
  LCD_Bitmap(144, 224, 8, 8, bloqueladrillo_8_8);
 800456a:	4b19      	ldr	r3, [pc, #100]	@ (80045d0 <MapSel_DrawScreen+0x214>)
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	2308      	movs	r3, #8
 8004570:	2208      	movs	r2, #8
 8004572:	21e0      	movs	r1, #224	@ 0xe0
 8004574:	2090      	movs	r0, #144	@ 0x90
 8004576:	f7fc fa6f 	bl	8000a58 <LCD_Bitmap>
  LCD_Bitmap(168, 224, 8, 8, bloqueladrillo_8_8);
 800457a:	4b15      	ldr	r3, [pc, #84]	@ (80045d0 <MapSel_DrawScreen+0x214>)
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	2308      	movs	r3, #8
 8004580:	2208      	movs	r2, #8
 8004582:	21e0      	movs	r1, #224	@ 0xe0
 8004584:	20a8      	movs	r0, #168	@ 0xa8
 8004586:	f7fc fa67 	bl	8000a58 <LCD_Bitmap>
  // Aquí puedes agregar más imágenes decorativas, por ejemplo:
  // LCD_Bitmap(x, y, width, height, tu_imagen_decorativa);

  // Selector inicial
  g_map_selector.x = MAP_SELECTOR_X;
 800458a:	4b12      	ldr	r3, [pc, #72]	@ (80045d4 <MapSel_DrawScreen+0x218>)
 800458c:	2254      	movs	r2, #84	@ 0x54
 800458e:	601a      	str	r2, [r3, #0]
  g_map_selector.y = MAP_SELECTOR_Y1;
 8004590:	4b10      	ldr	r3, [pc, #64]	@ (80045d4 <MapSel_DrawScreen+0x218>)
 8004592:	226c      	movs	r2, #108	@ 0x6c
 8004594:	605a      	str	r2, [r3, #4]
  g_map_selector.prev_x = MAP_SELECTOR_X;
 8004596:	4b0f      	ldr	r3, [pc, #60]	@ (80045d4 <MapSel_DrawScreen+0x218>)
 8004598:	2254      	movs	r2, #84	@ 0x54
 800459a:	609a      	str	r2, [r3, #8]
  g_map_selector.prev_y = MAP_SELECTOR_Y1;
 800459c:	4b0d      	ldr	r3, [pc, #52]	@ (80045d4 <MapSel_DrawScreen+0x218>)
 800459e:	226c      	movs	r2, #108	@ 0x6c
 80045a0:	60da      	str	r2, [r3, #12]
  g_map_selector.anim = 0;
 80045a2:	4b0c      	ldr	r3, [pc, #48]	@ (80045d4 <MapSel_DrawScreen+0x218>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	751a      	strb	r2, [r3, #20]
  g_map_menu_index = 0;
 80045a8:	4b0b      	ldr	r3, [pc, #44]	@ (80045d8 <MapSel_DrawScreen+0x21c>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]
}
 80045ae:	bf00      	nop
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	080322e8 	.word	0x080322e8
 80045b8:	08030f00 	.word	0x08030f00
 80045bc:	080318f4 	.word	0x080318f4
 80045c0:	08033704 	.word	0x08033704
 80045c4:	08033904 	.word	0x08033904
 80045c8:	08033b04 	.word	0x08033b04
 80045cc:	08033f04 	.word	0x08033f04
 80045d0:	08033684 	.word	0x08033684
 80045d4:	2000b908 	.word	0x2000b908
 80045d8:	2000bb24 	.word	0x2000bb24

080045dc <MapSel_DrawBorder>:

static void MapSel_DrawBorder(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af02      	add	r7, sp, #8
  // Borde superior
  for (int x = 0; x < LCD_W; x += BLOCK_SIZE) {
 80045e2:	2300      	movs	r3, #0
 80045e4:	607b      	str	r3, [r7, #4]
 80045e6:	e00a      	b.n	80045fe <MapSel_DrawBorder+0x22>
    LCD_Bitmap(x, 0, BLOCK_SIZE, BLOCK_SIZE, bloqueladrillo_8_8);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	4b12      	ldr	r3, [pc, #72]	@ (8004634 <MapSel_DrawBorder+0x58>)
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	2308      	movs	r3, #8
 80045f0:	2208      	movs	r2, #8
 80045f2:	2100      	movs	r1, #0
 80045f4:	f7fc fa30 	bl	8000a58 <LCD_Bitmap>
  for (int x = 0; x < LCD_W; x += BLOCK_SIZE) {
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3308      	adds	r3, #8
 80045fc:	607b      	str	r3, [r7, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004604:	dbf0      	blt.n	80045e8 <MapSel_DrawBorder+0xc>
  }

  // Borde inferior
  for (int x = 0; x < LCD_W; x += BLOCK_SIZE) {
 8004606:	2300      	movs	r3, #0
 8004608:	603b      	str	r3, [r7, #0]
 800460a:	e00a      	b.n	8004622 <MapSel_DrawBorder+0x46>
    LCD_Bitmap(x, LCD_H - BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE, bloqueladrillo_8_8);
 800460c:	6838      	ldr	r0, [r7, #0]
 800460e:	4b09      	ldr	r3, [pc, #36]	@ (8004634 <MapSel_DrawBorder+0x58>)
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	2308      	movs	r3, #8
 8004614:	2208      	movs	r2, #8
 8004616:	21e8      	movs	r1, #232	@ 0xe8
 8004618:	f7fc fa1e 	bl	8000a58 <LCD_Bitmap>
  for (int x = 0; x < LCD_W; x += BLOCK_SIZE) {
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	3308      	adds	r3, #8
 8004620:	603b      	str	r3, [r7, #0]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004628:	dbf0      	blt.n	800460c <MapSel_DrawBorder+0x30>

  // Borde derecho
  for (int y = BLOCK_SIZE; y < LCD_H - BLOCK_SIZE; y += BLOCK_SIZE) {
    LCD_Bitmap(LCD_W - BLOCK_SIZE, y, BLOCK_SIZE, BLOCK_SIZE, bloque_8_8);
  }*/
}
 800462a:	bf00      	nop
 800462c:	bf00      	nop
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	08033684 	.word	0x08033684

08004638 <MapSel_UpdateSelector>:

static void MapSel_UpdateSelector(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
  g_map_selector.prev_x = g_map_selector.x;
 800463e:	4b24      	ldr	r3, [pc, #144]	@ (80046d0 <MapSel_UpdateSelector+0x98>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a23      	ldr	r2, [pc, #140]	@ (80046d0 <MapSel_UpdateSelector+0x98>)
 8004644:	6093      	str	r3, [r2, #8]
  g_map_selector.prev_y = g_map_selector.y;
 8004646:	4b22      	ldr	r3, [pc, #136]	@ (80046d0 <MapSel_UpdateSelector+0x98>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	4a21      	ldr	r2, [pc, #132]	@ (80046d0 <MapSel_UpdateSelector+0x98>)
 800464c:	60d3      	str	r3, [r2, #12]

  int target_y = (g_map_menu_index == 0) ? MAP_SELECTOR_Y1 : MAP_SELECTOR_Y2;
 800464e:	4b21      	ldr	r3, [pc, #132]	@ (80046d4 <MapSel_UpdateSelector+0x9c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <MapSel_UpdateSelector+0x22>
 8004656:	236c      	movs	r3, #108	@ 0x6c
 8004658:	e000      	b.n	800465c <MapSel_UpdateSelector+0x24>
 800465a:	2394      	movs	r3, #148	@ 0x94
 800465c:	607b      	str	r3, [r7, #4]

  if (abs(g_map_selector.y - target_y) <= CURSOR_SPEED) {
 800465e:	4b1c      	ldr	r3, [pc, #112]	@ (80046d0 <MapSel_UpdateSelector+0x98>)
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f113 0f02 	cmn.w	r3, #2
 800466a:	db0c      	blt.n	8004686 <MapSel_UpdateSelector+0x4e>
 800466c:	4b18      	ldr	r3, [pc, #96]	@ (80046d0 <MapSel_UpdateSelector+0x98>)
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	dc06      	bgt.n	8004686 <MapSel_UpdateSelector+0x4e>
    g_map_selector.y = target_y;
 8004678:	4a15      	ldr	r2, [pc, #84]	@ (80046d0 <MapSel_UpdateSelector+0x98>)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6053      	str	r3, [r2, #4]
    g_map_selector.vy = 0;
 800467e:	4b14      	ldr	r3, [pc, #80]	@ (80046d0 <MapSel_UpdateSelector+0x98>)
 8004680:	2200      	movs	r2, #0
 8004682:	611a      	str	r2, [r3, #16]
 8004684:	e00d      	b.n	80046a2 <MapSel_UpdateSelector+0x6a>
  } else {
    g_map_selector.y += (g_map_selector.y < target_y) ? CURSOR_SPEED : -CURSOR_SPEED;
 8004686:	4b12      	ldr	r3, [pc, #72]	@ (80046d0 <MapSel_UpdateSelector+0x98>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	4a11      	ldr	r2, [pc, #68]	@ (80046d0 <MapSel_UpdateSelector+0x98>)
 800468c:	6852      	ldr	r2, [r2, #4]
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	4291      	cmp	r1, r2
 8004692:	dd01      	ble.n	8004698 <MapSel_UpdateSelector+0x60>
 8004694:	2202      	movs	r2, #2
 8004696:	e001      	b.n	800469c <MapSel_UpdateSelector+0x64>
 8004698:	f06f 0201 	mvn.w	r2, #1
 800469c:	4413      	add	r3, r2
 800469e:	4a0c      	ldr	r2, [pc, #48]	@ (80046d0 <MapSel_UpdateSelector+0x98>)
 80046a0:	6053      	str	r3, [r2, #4]
  }

  // Animación del selector
  uint32_t now = HAL_GetTick();
 80046a2:	f000 ff7b 	bl	800559c <HAL_GetTick>
 80046a6:	6038      	str	r0, [r7, #0]
  if (now - g_map_selector.last_anim_ms >= MAP_SELECTOR_ANIM_MS) {
 80046a8:	4b09      	ldr	r3, [pc, #36]	@ (80046d0 <MapSel_UpdateSelector+0x98>)
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80046b2:	d909      	bls.n	80046c8 <MapSel_UpdateSelector+0x90>
    g_map_selector.anim ^= 1;
 80046b4:	4b06      	ldr	r3, [pc, #24]	@ (80046d0 <MapSel_UpdateSelector+0x98>)
 80046b6:	7d1b      	ldrb	r3, [r3, #20]
 80046b8:	f083 0301 	eor.w	r3, r3, #1
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	4b04      	ldr	r3, [pc, #16]	@ (80046d0 <MapSel_UpdateSelector+0x98>)
 80046c0:	751a      	strb	r2, [r3, #20]
    g_map_selector.last_anim_ms = now;
 80046c2:	4a03      	ldr	r2, [pc, #12]	@ (80046d0 <MapSel_UpdateSelector+0x98>)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	6193      	str	r3, [r2, #24]
  }
}
 80046c8:	bf00      	nop
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	2000b908 	.word	0x2000b908
 80046d4:	2000bb24 	.word	0x2000bb24

080046d8 <MapSel_EraseSelector>:

static void MapSel_EraseSelector(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af02      	add	r7, sp, #8
  FillRect(g_map_selector.prev_x, g_map_selector.prev_y,
 80046de:	4b07      	ldr	r3, [pc, #28]	@ (80046fc <MapSel_EraseSelector+0x24>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	4618      	mov	r0, r3
 80046e4:	4b05      	ldr	r3, [pc, #20]	@ (80046fc <MapSel_EraseSelector+0x24>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	4619      	mov	r1, r3
 80046ea:	2300      	movs	r3, #0
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	2311      	movs	r3, #17
 80046f0:	2211      	movs	r2, #17
 80046f2:	f7fc f957 	bl	80009a4 <FillRect>
           MAP_SELECTOR_W, MAP_SELECTOR_H, BG_COLOR);
}
 80046f6:	bf00      	nop
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	2000b908 	.word	0x2000b908

08004700 <MapSel_DrawSelector>:

static void MapSel_DrawSelector(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af06      	add	r7, sp, #24
  LCD_Sprite(g_map_selector.x, g_map_selector.y,
 8004706:	4b0b      	ldr	r3, [pc, #44]	@ (8004734 <MapSel_DrawSelector+0x34>)
 8004708:	6818      	ldr	r0, [r3, #0]
 800470a:	4b0a      	ldr	r3, [pc, #40]	@ (8004734 <MapSel_DrawSelector+0x34>)
 800470c:	6859      	ldr	r1, [r3, #4]
             MAP_SELECTOR_W, MAP_SELECTOR_H,
             tanque_mapa, MAP_SELECTOR_COLS, g_map_selector.anim, 0, 0);
 800470e:	4b09      	ldr	r3, [pc, #36]	@ (8004734 <MapSel_DrawSelector+0x34>)
 8004710:	7d1b      	ldrb	r3, [r3, #20]
  LCD_Sprite(g_map_selector.x, g_map_selector.y,
 8004712:	461a      	mov	r2, r3
 8004714:	2300      	movs	r3, #0
 8004716:	9304      	str	r3, [sp, #16]
 8004718:	2300      	movs	r3, #0
 800471a:	9303      	str	r3, [sp, #12]
 800471c:	9202      	str	r2, [sp, #8]
 800471e:	2303      	movs	r3, #3
 8004720:	9301      	str	r3, [sp, #4]
 8004722:	4b05      	ldr	r3, [pc, #20]	@ (8004738 <MapSel_DrawSelector+0x38>)
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	2311      	movs	r3, #17
 8004728:	2211      	movs	r2, #17
 800472a:	f7fc f9ef 	bl	8000b0c <LCD_Sprite>
}
 800472e:	bf00      	nop
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	2000b908 	.word	0x2000b908
 8004738:	2000b15c 	.word	0x2000b15c

0800473c <MapSel_ConfirmSelection>:

static void MapSel_ConfirmSelection(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b0a2      	sub	sp, #136	@ 0x88
 8004740:	af02      	add	r7, sp, #8
  // Detener el selector antes de hacer cualquier cosa
  g_map_selector.vy = 0;
 8004742:	4b27      	ldr	r3, [pc, #156]	@ (80047e0 <MapSel_ConfirmSelection+0xa4>)
 8004744:	2200      	movs	r2, #0
 8004746:	611a      	str	r2, [r3, #16]

  g_selected_map = g_map_menu_index;
 8004748:	4b26      	ldr	r3, [pc, #152]	@ (80047e4 <MapSel_ConfirmSelection+0xa8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	b2da      	uxtb	r2, r3
 800474e:	4b26      	ldr	r3, [pc, #152]	@ (80047e8 <MapSel_ConfirmSelection+0xac>)
 8004750:	701a      	strb	r2, [r3, #0]

  // Guardar configuración del juego
  g_game_setup.p1_tank_type = g_p1_tank.tank_index;
 8004752:	4b26      	ldr	r3, [pc, #152]	@ (80047ec <MapSel_ConfirmSelection+0xb0>)
 8004754:	781a      	ldrb	r2, [r3, #0]
 8004756:	4b26      	ldr	r3, [pc, #152]	@ (80047f0 <MapSel_ConfirmSelection+0xb4>)
 8004758:	701a      	strb	r2, [r3, #0]
  g_game_setup.p2_tank_type = g_p2_tank.tank_index;
 800475a:	4b26      	ldr	r3, [pc, #152]	@ (80047f4 <MapSel_ConfirmSelection+0xb8>)
 800475c:	781a      	ldrb	r2, [r3, #0]
 800475e:	4b24      	ldr	r3, [pc, #144]	@ (80047f0 <MapSel_ConfirmSelection+0xb4>)
 8004760:	705a      	strb	r2, [r3, #1]
  g_game_setup.map_id = g_selected_map;
 8004762:	4b21      	ldr	r3, [pc, #132]	@ (80047e8 <MapSel_ConfirmSelection+0xac>)
 8004764:	781a      	ldrb	r2, [r3, #0]
 8004766:	4b22      	ldr	r3, [pc, #136]	@ (80047f0 <MapSel_ConfirmSelection+0xb4>)
 8004768:	709a      	strb	r2, [r3, #2]
  g_game_setup.ready = 1;
 800476a:	4b21      	ldr	r3, [pc, #132]	@ (80047f0 <MapSel_ConfirmSelection+0xb4>)
 800476c:	2201      	movs	r2, #1
 800476e:	70da      	strb	r2, [r3, #3]

  char dbg[128];
  snprintf(dbg, sizeof(dbg),
 8004770:	4b1d      	ldr	r3, [pc, #116]	@ (80047e8 <MapSel_ConfirmSelection+0xac>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	3301      	adds	r3, #1
           "[CONFIRM] Mapa seleccionado: %d\r\n"
           "[GAME SETUP] P1 Tank:%d | P2 Tank:%d\r\n",
           g_selected_map + 1,
           g_game_setup.p1_tank_type,
 8004776:	4a1e      	ldr	r2, [pc, #120]	@ (80047f0 <MapSel_ConfirmSelection+0xb4>)
 8004778:	7812      	ldrb	r2, [r2, #0]
  snprintf(dbg, sizeof(dbg),
 800477a:	4611      	mov	r1, r2
           g_game_setup.p2_tank_type);
 800477c:	4a1c      	ldr	r2, [pc, #112]	@ (80047f0 <MapSel_ConfirmSelection+0xb4>)
 800477e:	7852      	ldrb	r2, [r2, #1]
  snprintf(dbg, sizeof(dbg),
 8004780:	4638      	mov	r0, r7
 8004782:	9201      	str	r2, [sp, #4]
 8004784:	9100      	str	r1, [sp, #0]
 8004786:	4a1c      	ldr	r2, [pc, #112]	@ (80047f8 <MapSel_ConfirmSelection+0xbc>)
 8004788:	2180      	movs	r1, #128	@ 0x80
 800478a:	f003 fd2d 	bl	80081e8 <sniprintf>
  DebugPC(dbg);
 800478e:	463b      	mov	r3, r7
 8004790:	4618      	mov	r0, r3
 8004792:	f7fc fa67 	bl	8000c64 <DebugPC>

  // SIN ANIMACIÓN - Directo a limpiar pantalla
  DebugPC("[CONFIRM] Limpiando pantalla...\r\n");
 8004796:	4819      	ldr	r0, [pc, #100]	@ (80047fc <MapSel_ConfirmSelection+0xc0>)
 8004798:	f7fc fa64 	bl	8000c64 <DebugPC>

  // Limpiar pantalla con color negro
  LCD_Clear(BG_COLOR);
 800479c:	2000      	movs	r0, #0
 800479e:	f7fc f8bd 	bl	800091c <LCD_Clear>

  DebugPC("[CONFIRM] Pantalla limpiada\r\n");
 80047a2:	4817      	ldr	r0, [pc, #92]	@ (8004800 <MapSel_ConfirmSelection+0xc4>)
 80047a4:	f7fc fa5e 	bl	8000c64 <DebugPC>

  snprintf(dbg, sizeof(dbg), "[MAP] Iniciando Mapa %d...\r\n", g_selected_map + 1);
 80047a8:	4b0f      	ldr	r3, [pc, #60]	@ (80047e8 <MapSel_ConfirmSelection+0xac>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	3301      	adds	r3, #1
 80047ae:	4638      	mov	r0, r7
 80047b0:	4a14      	ldr	r2, [pc, #80]	@ (8004804 <MapSel_ConfirmSelection+0xc8>)
 80047b2:	2180      	movs	r1, #128	@ 0x80
 80047b4:	f003 fd18 	bl	80081e8 <sniprintf>
  DebugPC(dbg);
 80047b8:	463b      	mov	r3, r7
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fc fa52 	bl	8000c64 <DebugPC>


  // Transición al estado de juego
  DebugPC("[STATE] Cambiando a STATE_GAME\r\n");
 80047c0:	4811      	ldr	r0, [pc, #68]	@ (8004808 <MapSel_ConfirmSelection+0xcc>)
 80047c2:	f7fc fa4f 	bl	8000c64 <DebugPC>
  game_initialized = 0;
 80047c6:	4b11      	ldr	r3, [pc, #68]	@ (800480c <MapSel_ConfirmSelection+0xd0>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	701a      	strb	r2, [r3, #0]
  g_state = STATE_GAME;
 80047cc:	4b10      	ldr	r3, [pc, #64]	@ (8004810 <MapSel_ConfirmSelection+0xd4>)
 80047ce:	2203      	movs	r2, #3
 80047d0:	701a      	strb	r2, [r3, #0]

  DebugPC("[STATE] Estado cambiado exitosamente\r\n");
 80047d2:	4810      	ldr	r0, [pc, #64]	@ (8004814 <MapSel_ConfirmSelection+0xd8>)
 80047d4:	f7fc fa46 	bl	8000c64 <DebugPC>
}
 80047d8:	bf00      	nop
 80047da:	3780      	adds	r7, #128	@ 0x80
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	2000b908 	.word	0x2000b908
 80047e4:	2000bb24 	.word	0x2000bb24
 80047e8:	2000bb20 	.word	0x2000bb20
 80047ec:	2000bb10 	.word	0x2000bb10
 80047f0:	2000bb28 	.word	0x2000bb28
 80047f4:	2000bb18 	.word	0x2000bb18
 80047f8:	0800970c 	.word	0x0800970c
 80047fc:	08009754 	.word	0x08009754
 8004800:	08009778 	.word	0x08009778
 8004804:	08009798 	.word	0x08009798
 8004808:	080097b8 	.word	0x080097b8
 800480c:	2000d7e2 	.word	0x2000d7e2
 8004810:	2000bb0a 	.word	0x2000bb0a
 8004814:	080097dc 	.word	0x080097dc

08004818 <Game_Initialize>:


static void Game_Initialize(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b0c2      	sub	sp, #264	@ 0x108
 800481c:	af02      	add	r7, sp, #8
  char dbg[256];

  DebugPC("\r\n");
 800481e:	4827      	ldr	r0, [pc, #156]	@ (80048bc <Game_Initialize+0xa4>)
 8004820:	f7fc fa20 	bl	8000c64 <DebugPC>
  DebugPC("╔════════════════════════════════════════╗\r\n");
 8004824:	4826      	ldr	r0, [pc, #152]	@ (80048c0 <Game_Initialize+0xa8>)
 8004826:	f7fc fa1d 	bl	8000c64 <DebugPC>
  DebugPC("║     INICIALIZANDO JUEGO                ║\r\n");
 800482a:	4826      	ldr	r0, [pc, #152]	@ (80048c4 <Game_Initialize+0xac>)
 800482c:	f7fc fa1a 	bl	8000c64 <DebugPC>
  DebugPC("╚════════════════════════════════════════╝\r\n");
 8004830:	4825      	ldr	r0, [pc, #148]	@ (80048c8 <Game_Initialize+0xb0>)
 8004832:	f7fc fa17 	bl	8000c64 <DebugPC>

  snprintf(dbg, sizeof(dbg),
           "  P1: Tanque Tipo %d\r\n"
           "  P2: Tanque Tipo %d\r\n"
           "  Mapa ID: %d\r\n",
           g_game_setup.p1_tank_type,
 8004836:	4b25      	ldr	r3, [pc, #148]	@ (80048cc <Game_Initialize+0xb4>)
 8004838:	781b      	ldrb	r3, [r3, #0]
  snprintf(dbg, sizeof(dbg),
 800483a:	4619      	mov	r1, r3
           g_game_setup.p2_tank_type,
 800483c:	4b23      	ldr	r3, [pc, #140]	@ (80048cc <Game_Initialize+0xb4>)
 800483e:	785b      	ldrb	r3, [r3, #1]
  snprintf(dbg, sizeof(dbg),
 8004840:	461a      	mov	r2, r3
           g_game_setup.map_id);
 8004842:	4b22      	ldr	r3, [pc, #136]	@ (80048cc <Game_Initialize+0xb4>)
 8004844:	789b      	ldrb	r3, [r3, #2]
  snprintf(dbg, sizeof(dbg),
 8004846:	4638      	mov	r0, r7
 8004848:	9301      	str	r3, [sp, #4]
 800484a:	9200      	str	r2, [sp, #0]
 800484c:	460b      	mov	r3, r1
 800484e:	4a20      	ldr	r2, [pc, #128]	@ (80048d0 <Game_Initialize+0xb8>)
 8004850:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004854:	f003 fcc8 	bl	80081e8 <sniprintf>
  DebugPC(dbg);
 8004858:	463b      	mov	r3, r7
 800485a:	4618      	mov	r0, r3
 800485c:	f7fc fa02 	bl	8000c64 <DebugPC>

  // Cargar el mapa correspondiente
  switch(g_game_setup.map_id) {
 8004860:	4b1a      	ldr	r3, [pc, #104]	@ (80048cc <Game_Initialize+0xb4>)
 8004862:	789b      	ldrb	r3, [r3, #2]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <Game_Initialize+0x56>
 8004868:	2b01      	cmp	r3, #1
 800486a:	d00c      	beq.n	8004886 <Game_Initialize+0x6e>
 800486c:	e017      	b.n	800489e <Game_Initialize+0x86>
    case MAP_1_ID:
      DebugPC("\r\n[GAME] >>> Cargando Mapa 1 <<<\r\n");
 800486e:	4819      	ldr	r0, [pc, #100]	@ (80048d4 <Game_Initialize+0xbc>)
 8004870:	f7fc f9f8 	bl	8000c64 <DebugPC>
      Map1_Load();
 8004874:	f7fd f950 	bl	8001b18 <Map1_Load>
      Audio_Play(MUS_MAP1);   // en el caso MAP_1_ID
 8004878:	2002      	movs	r0, #2
 800487a:	f7fc fa75 	bl	8000d68 <Audio_Play>
      DebugPC("[GAME] >>> Mapa 1 cargado <<<\r\n");
 800487e:	4816      	ldr	r0, [pc, #88]	@ (80048d8 <Game_Initialize+0xc0>)
 8004880:	f7fc f9f0 	bl	8000c64 <DebugPC>
      break;
 8004884:	e00f      	b.n	80048a6 <Game_Initialize+0x8e>

    case MAP_2_ID:
      DebugPC("\r\n[GAME] >>> Cargando Mapa 2 <<<\r\n");
 8004886:	4815      	ldr	r0, [pc, #84]	@ (80048dc <Game_Initialize+0xc4>)
 8004888:	f7fc f9ec 	bl	8000c64 <DebugPC>
      Map2_Load();
 800488c:	f7fd fed6 	bl	800263c <Map2_Load>
      Audio_Play(MUS_MAP2);   // en el caso MAP_2_ID
 8004890:	2003      	movs	r0, #3
 8004892:	f7fc fa69 	bl	8000d68 <Audio_Play>
      DebugPC("[GAME] >>> Mapa 2 cargado <<<\r\n");
 8004896:	4812      	ldr	r0, [pc, #72]	@ (80048e0 <Game_Initialize+0xc8>)
 8004898:	f7fc f9e4 	bl	8000c64 <DebugPC>
      break;
 800489c:	e003      	b.n	80048a6 <Game_Initialize+0x8e>

    default:
      DebugPC("[ERROR] ID de mapa inválido\r\n");
 800489e:	4811      	ldr	r0, [pc, #68]	@ (80048e4 <Game_Initialize+0xcc>)
 80048a0:	f7fc f9e0 	bl	8000c64 <DebugPC>
      break;
 80048a4:	bf00      	nop
  }

  Game_LoadPlayers();
 80048a6:	f7ff f8c9 	bl	8003a3c <Game_LoadPlayers>

  DebugPC("\r\n[GAME] ✓✓✓ Inicialización completa ✓✓✓\r\n\r\n");
 80048aa:	480f      	ldr	r0, [pc, #60]	@ (80048e8 <Game_Initialize+0xd0>)
 80048ac:	f7fc f9da 	bl	8000c64 <DebugPC>
}
 80048b0:	bf00      	nop
 80048b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	08009804 	.word	0x08009804
 80048c0:	08009808 	.word	0x08009808
 80048c4:	0800988c 	.word	0x0800988c
 80048c8:	080098c0 	.word	0x080098c0
 80048cc:	2000bb28 	.word	0x2000bb28
 80048d0:	08009944 	.word	0x08009944
 80048d4:	08009980 	.word	0x08009980
 80048d8:	080099a4 	.word	0x080099a4
 80048dc:	080099c4 	.word	0x080099c4
 80048e0:	080099e8 	.word	0x080099e8
 80048e4:	08009a08 	.word	0x08009a08
 80048e8:	08009a28 	.word	0x08009a28

080048ec <ValidateGameSetup>:

static uint8_t ValidateGameSetup(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  if (g_game_setup.p1_tank_type > 3 || g_game_setup.p2_tank_type > 3) {
 80048f0:	4b10      	ldr	r3, [pc, #64]	@ (8004934 <ValidateGameSetup+0x48>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d803      	bhi.n	8004900 <ValidateGameSetup+0x14>
 80048f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004934 <ValidateGameSetup+0x48>)
 80048fa:	785b      	ldrb	r3, [r3, #1]
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d904      	bls.n	800490a <ValidateGameSetup+0x1e>
    DebugPC("[ERROR] Tipo de tanque inválido\r\n");
 8004900:	480d      	ldr	r0, [pc, #52]	@ (8004938 <ValidateGameSetup+0x4c>)
 8004902:	f7fc f9af 	bl	8000c64 <DebugPC>
    return 0;
 8004906:	2300      	movs	r3, #0
 8004908:	e012      	b.n	8004930 <ValidateGameSetup+0x44>
  }

  if (g_game_setup.map_id > 1) {
 800490a:	4b0a      	ldr	r3, [pc, #40]	@ (8004934 <ValidateGameSetup+0x48>)
 800490c:	789b      	ldrb	r3, [r3, #2]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d904      	bls.n	800491c <ValidateGameSetup+0x30>
    DebugPC("[ERROR] ID de mapa inválido\r\n");
 8004912:	480a      	ldr	r0, [pc, #40]	@ (800493c <ValidateGameSetup+0x50>)
 8004914:	f7fc f9a6 	bl	8000c64 <DebugPC>
    return 0;
 8004918:	2300      	movs	r3, #0
 800491a:	e009      	b.n	8004930 <ValidateGameSetup+0x44>
  }

  if (!g_game_setup.ready) {
 800491c:	4b05      	ldr	r3, [pc, #20]	@ (8004934 <ValidateGameSetup+0x48>)
 800491e:	78db      	ldrb	r3, [r3, #3]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d104      	bne.n	800492e <ValidateGameSetup+0x42>
    DebugPC("[ERROR] Configuración de juego no está lista\r\n");
 8004924:	4806      	ldr	r0, [pc, #24]	@ (8004940 <ValidateGameSetup+0x54>)
 8004926:	f7fc f99d 	bl	8000c64 <DebugPC>
    return 0;
 800492a:	2300      	movs	r3, #0
 800492c:	e000      	b.n	8004930 <ValidateGameSetup+0x44>
  }

  return 1;
 800492e:	2301      	movs	r3, #1
}
 8004930:	4618      	mov	r0, r3
 8004932:	bd80      	pop	{r7, pc}
 8004934:	2000bb28 	.word	0x2000bb28
 8004938:	08009a64 	.word	0x08009a64
 800493c:	08009a08 	.word	0x08009a08
 8004940:	08009a88 	.word	0x08009a88

08004944 <Game_ShowWinner>:

static void Game_ShowWinner(uint8_t winner_id)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b088      	sub	sp, #32
 8004948:	af02      	add	r7, sp, #8
 800494a:	4603      	mov	r3, r0
 800494c:	71fb      	strb	r3, [r7, #7]
  if (g_state != STATE_GAME) return; // evita re-entradas
 800494e:	4b1c      	ldr	r3, [pc, #112]	@ (80049c0 <Game_ShowWinner+0x7c>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b03      	cmp	r3, #3
 8004954:	d12f      	bne.n	80049b6 <Game_ShowWinner+0x72>
  g_winner = winner_id;
 8004956:	4a1b      	ldr	r2, [pc, #108]	@ (80049c4 <Game_ShowWinner+0x80>)
 8004958:	79fb      	ldrb	r3, [r7, #7]
 800495a:	7013      	strb	r3, [r2, #0]

  LCD_Clear(BG_COLOR);
 800495c:	2000      	movs	r0, #0
 800495e:	f7fb ffdd 	bl	800091c <LCD_Clear>

  // Imagen "ganador" centrada
  int gx = (LCD_W - GANADOR_W)/2;
 8004962:	236a      	movs	r3, #106	@ 0x6a
 8004964:	617b      	str	r3, [r7, #20]
  int gy = (LCD_H - GANADOR_H)/2;
 8004966:	2348      	movs	r3, #72	@ 0x48
 8004968:	613b      	str	r3, [r7, #16]
  LCD_Bitmap(gx, gy, GANADOR_W, GANADOR_H, ganador);
 800496a:	6978      	ldr	r0, [r7, #20]
 800496c:	6939      	ldr	r1, [r7, #16]
 800496e:	4b16      	ldr	r3, [pc, #88]	@ (80049c8 <Game_ShowWinner+0x84>)
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	235f      	movs	r3, #95	@ 0x5f
 8004974:	226c      	movs	r2, #108	@ 0x6c
 8004976:	f7fc f86f 	bl	8000a58 <LCD_Bitmap>

  // Nombre debajo
  int nx = (LCD_W - NAME_W)/2;
 800497a:	2361      	movs	r3, #97	@ 0x61
 800497c:	60fb      	str	r3, [r7, #12]
  int ny = gy + GANADOR_H + 2;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	3361      	adds	r3, #97	@ 0x61
 8004982:	60bb      	str	r3, [r7, #8]
  if (g_winner == 1) {
 8004984:	4b0f      	ldr	r3, [pc, #60]	@ (80049c4 <Game_ShowWinner+0x80>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d108      	bne.n	800499e <Game_ShowWinner+0x5a>
    LCD_Bitmap(nx, ny, NAME_W, NAME_H, player1);
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	68b9      	ldr	r1, [r7, #8]
 8004990:	4b0e      	ldr	r3, [pc, #56]	@ (80049cc <Game_ShowWinner+0x88>)
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	230d      	movs	r3, #13
 8004996:	227d      	movs	r2, #125	@ 0x7d
 8004998:	f7fc f85e 	bl	8000a58 <LCD_Bitmap>
 800499c:	e007      	b.n	80049ae <Game_ShowWinner+0x6a>
  } else {
    LCD_Bitmap(nx, ny, NAME_W, NAME_H, player2);
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	68b9      	ldr	r1, [r7, #8]
 80049a2:	4b0b      	ldr	r3, [pc, #44]	@ (80049d0 <Game_ShowWinner+0x8c>)
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	230d      	movs	r3, #13
 80049a8:	227d      	movs	r2, #125	@ 0x7d
 80049aa:	f7fc f855 	bl	8000a58 <LCD_Bitmap>
  }

  g_state = STATE_GAME_OVER;
 80049ae:	4b04      	ldr	r3, [pc, #16]	@ (80049c0 <Game_ShowWinner+0x7c>)
 80049b0:	2204      	movs	r2, #4
 80049b2:	701a      	strb	r2, [r3, #0]
 80049b4:	e000      	b.n	80049b8 <Game_ShowWinner+0x74>
  if (g_state != STATE_GAME) return; // evita re-entradas
 80049b6:	bf00      	nop
}
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	2000bb0a 	.word	0x2000bb0a
 80049c4:	2000d7e0 	.word	0x2000d7e0
 80049c8:	08034f84 	.word	0x08034f84
 80049cc:	0802f598 	.word	0x0802f598
 80049d0:	0803024c 	.word	0x0803024c

080049d4 <Win_PlayExplosionThenShow>:

static void Win_PlayExplosionThenShow(uint32_t ms, uint8_t winner_id)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	70fb      	strb	r3, [r7, #3]
  // Reproduce la animación de explosiones durante 'ms' antes de mostrar ganador
  uint32_t t0 = HAL_GetTick();
 80049e0:	f000 fddc 	bl	800559c <HAL_GetTick>
 80049e4:	60f8      	str	r0, [r7, #12]
  while ((HAL_GetTick() - t0) < ms) {
 80049e6:	e004      	b.n	80049f2 <Win_PlayExplosionThenShow+0x1e>
    Explo_UpdateAndDrawAll();
 80049e8:	f7fc fac4 	bl	8000f74 <Explo_UpdateAndDrawAll>
    HAL_Delay(16); // ~60 fps
 80049ec:	2010      	movs	r0, #16
 80049ee:	f000 fde1 	bl	80055b4 <HAL_Delay>
  while ((HAL_GetTick() - t0) < ms) {
 80049f2:	f000 fdd3 	bl	800559c <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d8f2      	bhi.n	80049e8 <Win_PlayExplosionThenShow+0x14>
  }

  // Asegura que no quede ninguna explosión visible
  Explo_KillAll();
 8004a02:	f7fc fa95 	bl	8000f30 <Explo_KillAll>

  Game_ShowWinner(winner_id);
 8004a06:	78fb      	ldrb	r3, [r7, #3]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff ff9b 	bl	8004944 <Game_ShowWinner>
}
 8004a0e:	bf00      	nop
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <Game_ResetToMenu>:



static void Game_ResetToMenu(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
  g_winner = 0;
 8004a1e:	4b29      	ldr	r3, [pc, #164]	@ (8004ac4 <Game_ResetToMenu+0xac>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	701a      	strb	r2, [r3, #0]
  memset(&g_bullet_p1, 0, sizeof(g_bullet_p1));
 8004a24:	2218      	movs	r2, #24
 8004a26:	2100      	movs	r1, #0
 8004a28:	4827      	ldr	r0, [pc, #156]	@ (8004ac8 <Game_ResetToMenu+0xb0>)
 8004a2a:	f003 fc13 	bl	8008254 <memset>
  memset(&g_bullet_p2, 0, sizeof(g_bullet_p2));
 8004a2e:	2218      	movs	r2, #24
 8004a30:	2100      	movs	r1, #0
 8004a32:	4826      	ldr	r0, [pc, #152]	@ (8004acc <Game_ResetToMenu+0xb4>)
 8004a34:	f003 fc0e 	bl	8008254 <memset>
  memset(&g_player1_tank, 0, sizeof(g_player1_tank));
 8004a38:	2220      	movs	r2, #32
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	4824      	ldr	r0, [pc, #144]	@ (8004ad0 <Game_ResetToMenu+0xb8>)
 8004a3e:	f003 fc09 	bl	8008254 <memset>
  memset(&g_player2_tank, 0, sizeof(g_player2_tank));
 8004a42:	2220      	movs	r2, #32
 8004a44:	2100      	movs	r1, #0
 8004a46:	4823      	ldr	r0, [pc, #140]	@ (8004ad4 <Game_ResetToMenu+0xbc>)
 8004a48:	f003 fc04 	bl	8008254 <memset>
  memset(&g_current_map, 0, sizeof(g_current_map));
 8004a4c:	f641 4204 	movw	r2, #7172	@ 0x1c04
 8004a50:	2100      	movs	r1, #0
 8004a52:	4821      	ldr	r0, [pc, #132]	@ (8004ad8 <Game_ResetToMenu+0xc0>)
 8004a54:	f003 fbfe 	bl	8008254 <memset>
  for (int i=0;i<MAX_EXPLOSIONS;i++) g_explosions[i].active = 0;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	e009      	b.n	8004a72 <Game_ResetToMenu+0x5a>
 8004a5e:	4a1f      	ldr	r2, [pc, #124]	@ (8004adc <Game_ResetToMenu+0xc4>)
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	4413      	add	r3, r2
 8004a66:	3309      	adds	r3, #9
 8004a68:	2200      	movs	r2, #0
 8004a6a:	701a      	strb	r2, [r3, #0]
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	ddf2      	ble.n	8004a5e <Game_ResetToMenu+0x46>

  LCD_Clear(BG_COLOR);
 8004a78:	2000      	movs	r0, #0
 8004a7a:	f7fb ff4f 	bl	800091c <LCD_Clear>
  Menu_DrawBackground();
 8004a7e:	f7ff fb23 	bl	80040c8 <Menu_DrawBackground>
  Audio_Play(MUS_INTRO);
 8004a82:	2001      	movs	r0, #1
 8004a84:	f7fc f970 	bl	8000d68 <Audio_Play>
  g_state = STATE_MENU;
 8004a88:	4b15      	ldr	r3, [pc, #84]	@ (8004ae0 <Game_ResetToMenu+0xc8>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	701a      	strb	r2, [r3, #0]

  g_game_setup.ready = 0;
 8004a8e:	4b15      	ldr	r3, [pc, #84]	@ (8004ae4 <Game_ResetToMenu+0xcc>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	70da      	strb	r2, [r3, #3]
  g_p1_tank = (PlayerTankSelection){0,0,0,0};
 8004a94:	4b14      	ldr	r3, [pc, #80]	@ (8004ae8 <Game_ResetToMenu+0xd0>)
 8004a96:	461a      	mov	r2, r3
 8004a98:	2300      	movs	r3, #0
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	6053      	str	r3, [r2, #4]
  g_p2_tank = (PlayerTankSelection){0,0,0,0};
 8004a9e:	4b13      	ldr	r3, [pc, #76]	@ (8004aec <Game_ResetToMenu+0xd4>)
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	6053      	str	r3, [r2, #4]
  g_map_menu_index = 0;
 8004aa8:	4b11      	ldr	r3, [pc, #68]	@ (8004af0 <Game_ResetToMenu+0xd8>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]
  g_selected_map = 0;
 8004aae:	4b11      	ldr	r3, [pc, #68]	@ (8004af4 <Game_ResetToMenu+0xdc>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	701a      	strb	r2, [r3, #0]
  game_initialized = 0;
 8004ab4:	4b10      	ldr	r3, [pc, #64]	@ (8004af8 <Game_ResetToMenu+0xe0>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]

}
 8004aba:	bf00      	nop
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	2000d7e0 	.word	0x2000d7e0
 8004ac8:	2000d770 	.word	0x2000d770
 8004acc:	2000d788 	.word	0x2000d788
 8004ad0:	2000d730 	.word	0x2000d730
 8004ad4:	2000d750 	.word	0x2000d750
 8004ad8:	2000bb2c 	.word	0x2000bb2c
 8004adc:	2000d7a0 	.word	0x2000d7a0
 8004ae0:	2000bb0a 	.word	0x2000bb0a
 8004ae4:	2000bb28 	.word	0x2000bb28
 8004ae8:	2000bb10 	.word	0x2000bb10
 8004aec:	2000bb18 	.word	0x2000bb18
 8004af0:	2000bb24 	.word	0x2000bb24
 8004af4:	2000bb20 	.word	0x2000bb20
 8004af8:	2000d7e2 	.word	0x2000d7e2

08004afc <main>:


/* USER CODE END 0 */

int main(void)
{
 8004afc:	b590      	push	{r4, r7, lr}
 8004afe:	b0a7      	sub	sp, #156	@ 0x9c
 8004b00:	af04      	add	r7, sp, #16
  HAL_Init();
 8004b02:	f000 fce5 	bl	80054d0 <HAL_Init>
  SystemClock_Config();
 8004b06:	f000 f95b 	bl	8004dc0 <SystemClock_Config>
  MX_GPIO_Init();
 8004b0a:	f000 fa51 	bl	8004fb0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004b0e:	f000 fa25 	bl	8004f5c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8004b12:	f000 f9c3 	bl	8004e9c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8004b16:	f000 f9f7 	bl	8004f08 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  LCD_Init();
 8004b1a:	f7fb fd77 	bl	800060c <LCD_Init>
  LCD_Clear(0x0000);
 8004b1e:	2000      	movs	r0, #0
 8004b20:	f7fb fefc 	bl	800091c <LCD_Clear>
  Menu_DrawBackground();
 8004b24:	f7ff fad0 	bl	80040c8 <Menu_DrawBackground>
  Audio_Play(MUS_INTRO);
 8004b28:	2001      	movs	r0, #1
 8004b2a:	f7fc f91d 	bl	8000d68 <Audio_Play>

  DebugPC("\r\n=== BATTLE CITY - Menu Inicio ===\r\n");
 8004b2e:	4891      	ldr	r0, [pc, #580]	@ (8004d74 <main+0x278>)
 8004b30:	f7fc f898 	bl	8000c64 <DebugPC>
  StartUart1RxIT();
 8004b34:	f7fc f8ac 	bl	8000c90 <StartUart1RxIT>
  /* USER CODE END 2 */

  uint8_t prev_p1_index = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  uint8_t prev_p2_index = 0;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

  while (1) {

	  static GameState prev_state = STATE_MENU;
	  if (g_state != prev_state) {
 8004b44:	4b8c      	ldr	r3, [pc, #560]	@ (8004d78 <main+0x27c>)
 8004b46:	781a      	ldrb	r2, [r3, #0]
 8004b48:	4b8c      	ldr	r3, [pc, #560]	@ (8004d7c <main+0x280>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d013      	beq.n	8004b78 <main+0x7c>
	    char dbg[64];
	    snprintf(dbg, sizeof(dbg), "[MAIN] Cambio de estado: %d -> %d\r\n", prev_state, g_state);
 8004b50:	4b8a      	ldr	r3, [pc, #552]	@ (8004d7c <main+0x280>)
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	461a      	mov	r2, r3
 8004b56:	4b88      	ldr	r3, [pc, #544]	@ (8004d78 <main+0x27c>)
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	4638      	mov	r0, r7
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	4a87      	ldr	r2, [pc, #540]	@ (8004d80 <main+0x284>)
 8004b62:	2140      	movs	r1, #64	@ 0x40
 8004b64:	f003 fb40 	bl	80081e8 <sniprintf>
	    DebugPC(dbg);
 8004b68:	463b      	mov	r3, r7
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fc f87a 	bl	8000c64 <DebugPC>
	    prev_state = g_state;
 8004b70:	4b81      	ldr	r3, [pc, #516]	@ (8004d78 <main+0x27c>)
 8004b72:	781a      	ldrb	r2, [r3, #0]
 8004b74:	4b81      	ldr	r3, [pc, #516]	@ (8004d7c <main+0x280>)
 8004b76:	701a      	strb	r2, [r3, #0]
	  }

    switch (g_state) {
 8004b78:	4b7f      	ldr	r3, [pc, #508]	@ (8004d78 <main+0x27c>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	f200 80f5 	bhi.w	8004d6c <main+0x270>
 8004b82:	a201      	add	r2, pc, #4	@ (adr r2, 8004b88 <main+0x8c>)
 8004b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b88:	08004b9d 	.word	0x08004b9d
 8004b8c:	08004bab 	.word	0x08004bab
 8004b90:	08004c6b 	.word	0x08004c6b
 8004b94:	08004c81 	.word	0x08004c81
 8004b98:	08004d6d 	.word	0x08004d6d
      case STATE_MENU: {
        Menu_UpdateCursor();
 8004b9c:	f7ff faa6 	bl	80040ec <Menu_UpdateCursor>
        Menu_EraseCursorPrev();
 8004ba0:	f7ff fb02 	bl	80041a8 <Menu_EraseCursorPrev>
        Menu_DrawCursor();
 8004ba4:	f7ff fb14 	bl	80041d0 <Menu_DrawCursor>
      } break;
 8004ba8:	e0e0      	b.n	8004d6c <main+0x270>

      case STATE_TANK_SELECTION: {
        if (g_p1_tank.selected && g_p2_tank.selected &&
 8004baa:	4b76      	ldr	r3, [pc, #472]	@ (8004d84 <main+0x288>)
 8004bac:	785b      	ldrb	r3, [r3, #1]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d01b      	beq.n	8004bea <main+0xee>
 8004bb2:	4b75      	ldr	r3, [pc, #468]	@ (8004d88 <main+0x28c>)
 8004bb4:	785b      	ldrb	r3, [r3, #1]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d017      	beq.n	8004bea <main+0xee>
            g_p1_tank.explosion_frame >= 2 && g_p2_tank.explosion_frame >= 2) {
 8004bba:	4b72      	ldr	r3, [pc, #456]	@ (8004d84 <main+0x288>)
 8004bbc:	789b      	ldrb	r3, [r3, #2]
        if (g_p1_tank.selected && g_p2_tank.selected &&
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d913      	bls.n	8004bea <main+0xee>
            g_p1_tank.explosion_frame >= 2 && g_p2_tank.explosion_frame >= 2) {
 8004bc2:	4b71      	ldr	r3, [pc, #452]	@ (8004d88 <main+0x28c>)
 8004bc4:	789b      	ldrb	r3, [r3, #2]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d90f      	bls.n	8004bea <main+0xee>
          HAL_Delay(500);
 8004bca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004bce:	f000 fcf1 	bl	80055b4 <HAL_Delay>
          LCD_Clear(BG_COLOR);
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	f7fb fea2 	bl	800091c <LCD_Clear>
          DebugPC("[SELECTION] Tanques seleccionados -> Selección de mapa\r\n");
 8004bd8:	486c      	ldr	r0, [pc, #432]	@ (8004d8c <main+0x290>)
 8004bda:	f7fc f843 	bl	8000c64 <DebugPC>

          // Transición a selección de mapas
          g_state = STATE_MAP_SELECTION;
 8004bde:	4b66      	ldr	r3, [pc, #408]	@ (8004d78 <main+0x27c>)
 8004be0:	2202      	movs	r2, #2
 8004be2:	701a      	strb	r2, [r3, #0]
          MapSel_DrawScreen();
 8004be4:	f7ff fbea 	bl	80043bc <MapSel_DrawScreen>
          break;
 8004be8:	e0c0      	b.n	8004d6c <main+0x270>
        }

        if (!g_p1_tank.selected) {
 8004bea:	4b66      	ldr	r3, [pc, #408]	@ (8004d84 <main+0x288>)
 8004bec:	785b      	ldrb	r3, [r3, #1]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d115      	bne.n	8004c1e <main+0x122>
          if (prev_p1_index != g_p1_tank.tank_index) {
 8004bf2:	4b64      	ldr	r3, [pc, #400]	@ (8004d84 <main+0x288>)
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d014      	beq.n	8004c28 <main+0x12c>
            TankSel_EraseTank(P1_TANK_X, P1_TANK_Y);
 8004bfe:	2164      	movs	r1, #100	@ 0x64
 8004c00:	203c      	movs	r0, #60	@ 0x3c
 8004c02:	f7ff fb61 	bl	80042c8 <TankSel_EraseTank>
            TankSel_DrawTank(P1_TANK_X, P1_TANK_Y, g_p1_tank.tank_index);
 8004c06:	4b5f      	ldr	r3, [pc, #380]	@ (8004d84 <main+0x288>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	2164      	movs	r1, #100	@ 0x64
 8004c0e:	203c      	movs	r0, #60	@ 0x3c
 8004c10:	f7ff fb6c 	bl	80042ec <TankSel_DrawTank>
            prev_p1_index = g_p1_tank.tank_index;
 8004c14:	4b5b      	ldr	r3, [pc, #364]	@ (8004d84 <main+0x288>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004c1c:	e004      	b.n	8004c28 <main+0x12c>
          }
        } else {
          TankSel_UpdatePlayer(&g_p1_tank, P1_TANK_X, P1_TANK_Y);
 8004c1e:	2264      	movs	r2, #100	@ 0x64
 8004c20:	213c      	movs	r1, #60	@ 0x3c
 8004c22:	4858      	ldr	r0, [pc, #352]	@ (8004d84 <main+0x288>)
 8004c24:	f7ff fb9e 	bl	8004364 <TankSel_UpdatePlayer>
        }

        if (!g_p2_tank.selected) {
 8004c28:	4b57      	ldr	r3, [pc, #348]	@ (8004d88 <main+0x28c>)
 8004c2a:	785b      	ldrb	r3, [r3, #1]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d116      	bne.n	8004c5e <main+0x162>
          if (prev_p2_index != g_p2_tank.tank_index) {
 8004c30:	4b55      	ldr	r3, [pc, #340]	@ (8004d88 <main+0x28c>)
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	f000 8092 	beq.w	8004d62 <main+0x266>
            TankSel_EraseTank(P2_TANK_X, P2_TANK_Y);
 8004c3e:	2164      	movs	r1, #100	@ 0x64
 8004c40:	20d2      	movs	r0, #210	@ 0xd2
 8004c42:	f7ff fb41 	bl	80042c8 <TankSel_EraseTank>
            TankSel_DrawTank(P2_TANK_X, P2_TANK_Y, g_p2_tank.tank_index);
 8004c46:	4b50      	ldr	r3, [pc, #320]	@ (8004d88 <main+0x28c>)
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	2164      	movs	r1, #100	@ 0x64
 8004c4e:	20d2      	movs	r0, #210	@ 0xd2
 8004c50:	f7ff fb4c 	bl	80042ec <TankSel_DrawTank>
            prev_p2_index = g_p2_tank.tank_index;
 8004c54:	4b4c      	ldr	r3, [pc, #304]	@ (8004d88 <main+0x28c>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
          }
        } else {
          TankSel_UpdatePlayer(&g_p2_tank, P2_TANK_X, P2_TANK_Y);
        }
      } break;
 8004c5c:	e081      	b.n	8004d62 <main+0x266>
          TankSel_UpdatePlayer(&g_p2_tank, P2_TANK_X, P2_TANK_Y);
 8004c5e:	2264      	movs	r2, #100	@ 0x64
 8004c60:	21d2      	movs	r1, #210	@ 0xd2
 8004c62:	4849      	ldr	r0, [pc, #292]	@ (8004d88 <main+0x28c>)
 8004c64:	f7ff fb7e 	bl	8004364 <TankSel_UpdatePlayer>
      } break;
 8004c68:	e07b      	b.n	8004d62 <main+0x266>

      case STATE_MAP_SELECTION: {
        // Solo actualizar si NO estamos confirmando
        if (g_state == STATE_MAP_SELECTION) {  // Verificación adicional
 8004c6a:	4b43      	ldr	r3, [pc, #268]	@ (8004d78 <main+0x27c>)
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d179      	bne.n	8004d66 <main+0x26a>
          MapSel_UpdateSelector();
 8004c72:	f7ff fce1 	bl	8004638 <MapSel_UpdateSelector>
          MapSel_EraseSelector();
 8004c76:	f7ff fd2f 	bl	80046d8 <MapSel_EraseSelector>
          MapSel_DrawSelector();
 8004c7a:	f7ff fd41 	bl	8004700 <MapSel_DrawSelector>
        }
      } break;
 8004c7e:	e072      	b.n	8004d66 <main+0x26a>

      case STATE_GAME: {

        // ⭐ Inicializar el juego solo UNA VEZ
        if (!game_initialized) {
 8004c80:	4b43      	ldr	r3, [pc, #268]	@ (8004d90 <main+0x294>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d137      	bne.n	8004cf8 <main+0x1fc>
          DebugPC("[GAME] Entrando al estado de juego por primera vez\r\n");
 8004c88:	4842      	ldr	r0, [pc, #264]	@ (8004d94 <main+0x298>)
 8004c8a:	f7fb ffeb 	bl	8000c64 <DebugPC>

          if (!g_game_setup.ready) {
 8004c8e:	4b42      	ldr	r3, [pc, #264]	@ (8004d98 <main+0x29c>)
 8004c90:	78db      	ldrb	r3, [r3, #3]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10e      	bne.n	8004cb4 <main+0x1b8>
            DebugPC("[ERROR] Intento de iniciar juego sin configuración completa\r\n");
 8004c96:	4841      	ldr	r0, [pc, #260]	@ (8004d9c <main+0x2a0>)
 8004c98:	f7fb ffe4 	bl	8000c64 <DebugPC>
            g_state = STATE_MENU;
 8004c9c:	4b36      	ldr	r3, [pc, #216]	@ (8004d78 <main+0x27c>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	701a      	strb	r2, [r3, #0]
            game_initialized = 0;
 8004ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8004d90 <main+0x294>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	701a      	strb	r2, [r3, #0]
            LCD_Clear(BG_COLOR);
 8004ca8:	2000      	movs	r0, #0
 8004caa:	f7fb fe37 	bl	800091c <LCD_Clear>
            Menu_DrawBackground();
 8004cae:	f7ff fa0b 	bl	80040c8 <Menu_DrawBackground>
            break;
 8004cb2:	e05b      	b.n	8004d6c <main+0x270>
          }

          if (!ValidateGameSetup()) {
 8004cb4:	f7ff fe1a 	bl	80048ec <ValidateGameSetup>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d111      	bne.n	8004ce2 <main+0x1e6>
            DebugPC("[ERROR] Validación de setup falló. Regresando al menú.\r\n");
 8004cbe:	4838      	ldr	r0, [pc, #224]	@ (8004da0 <main+0x2a4>)
 8004cc0:	f7fb ffd0 	bl	8000c64 <DebugPC>
            g_state = STATE_MENU;
 8004cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8004d78 <main+0x27c>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	701a      	strb	r2, [r3, #0]
            g_game_setup.ready = 0;
 8004cca:	4b33      	ldr	r3, [pc, #204]	@ (8004d98 <main+0x29c>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	70da      	strb	r2, [r3, #3]
            game_initialized = 0;
 8004cd0:	4b2f      	ldr	r3, [pc, #188]	@ (8004d90 <main+0x294>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	701a      	strb	r2, [r3, #0]
            LCD_Clear(BG_COLOR);
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	f7fb fe20 	bl	800091c <LCD_Clear>
            Menu_DrawBackground();
 8004cdc:	f7ff f9f4 	bl	80040c8 <Menu_DrawBackground>
            break;
 8004ce0:	e044      	b.n	8004d6c <main+0x270>
          }

          DebugPC("[GAME] Validación OK, llamando a Game_Initialize()...\r\n");
 8004ce2:	4830      	ldr	r0, [pc, #192]	@ (8004da4 <main+0x2a8>)
 8004ce4:	f7fb ffbe 	bl	8000c64 <DebugPC>
          Game_Initialize();
 8004ce8:	f7ff fd96 	bl	8004818 <Game_Initialize>
          game_initialized = 1;
 8004cec:	4b28      	ldr	r3, [pc, #160]	@ (8004d90 <main+0x294>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	701a      	strb	r2, [r3, #0]
          DebugPC("[GAME] Inicialización completa\r\n");
 8004cf2:	482d      	ldr	r0, [pc, #180]	@ (8004da8 <main+0x2ac>)
 8004cf4:	f7fb ffb6 	bl	8000c64 <DebugPC>
        }

        Game_UpdateTanks();
 8004cf8:	f7fe feee 	bl	8003ad8 <Game_UpdateTanks>

        // Balas y explosiones
        Bullet_Update(&g_bullet_p1);
 8004cfc:	482b      	ldr	r0, [pc, #172]	@ (8004dac <main+0x2b0>)
 8004cfe:	f7fc fd4b 	bl	8001798 <Bullet_Update>
        Bullet_Update(&g_bullet_p2);
 8004d02:	482b      	ldr	r0, [pc, #172]	@ (8004db0 <main+0x2b4>)
 8004d04:	f7fc fd48 	bl	8001798 <Bullet_Update>
        Explo_UpdateAndDrawAll();
 8004d08:	f7fc f934 	bl	8000f74 <Explo_UpdateAndDrawAll>
        // ===== LOOP PRINCIPAL DEL JUEGO =====
        // Aquí irá la lógica del juego (movimiento de tanques, balas, etc.)

        // Debug periódico
        static uint32_t last_debug = 0;
        uint32_t now = HAL_GetTick();
 8004d0c:	f000 fc46 	bl	800559c <HAL_GetTick>
 8004d10:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        if (now - last_debug > 2000) {
 8004d14:	4b27      	ldr	r3, [pc, #156]	@ (8004db4 <main+0x2b8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004d22:	d922      	bls.n	8004d6a <main+0x26e>
          char dbg[128];
          snprintf(dbg, sizeof(dbg),
                   "[GAME LOOP] Map:%d, Tiles:%d, P1:%d, P2:%d\r\n",
                   g_game_setup.map_id + 1,
 8004d24:	4b1c      	ldr	r3, [pc, #112]	@ (8004d98 <main+0x29c>)
 8004d26:	789b      	ldrb	r3, [r3, #2]
          snprintf(dbg, sizeof(dbg),
 8004d28:	3301      	adds	r3, #1
                   g_current_map.tile_count,
 8004d2a:	4a23      	ldr	r2, [pc, #140]	@ (8004db8 <main+0x2bc>)
 8004d2c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004d30:	f8b2 2c00 	ldrh.w	r2, [r2, #3072]	@ 0xc00
          snprintf(dbg, sizeof(dbg),
 8004d34:	4611      	mov	r1, r2
                   g_game_setup.p1_tank_type,
 8004d36:	4a18      	ldr	r2, [pc, #96]	@ (8004d98 <main+0x29c>)
 8004d38:	7812      	ldrb	r2, [r2, #0]
          snprintf(dbg, sizeof(dbg),
 8004d3a:	4614      	mov	r4, r2
                   g_game_setup.p2_tank_type);
 8004d3c:	4a16      	ldr	r2, [pc, #88]	@ (8004d98 <main+0x29c>)
 8004d3e:	7852      	ldrb	r2, [r2, #1]
          snprintf(dbg, sizeof(dbg),
 8004d40:	4638      	mov	r0, r7
 8004d42:	9202      	str	r2, [sp, #8]
 8004d44:	9401      	str	r4, [sp, #4]
 8004d46:	9100      	str	r1, [sp, #0]
 8004d48:	4a1c      	ldr	r2, [pc, #112]	@ (8004dbc <main+0x2c0>)
 8004d4a:	2180      	movs	r1, #128	@ 0x80
 8004d4c:	f003 fa4c 	bl	80081e8 <sniprintf>
          DebugPC(dbg);
 8004d50:	463b      	mov	r3, r7
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fb ff86 	bl	8000c64 <DebugPC>
          last_debug = now;
 8004d58:	4a16      	ldr	r2, [pc, #88]	@ (8004db4 <main+0x2b8>)
 8004d5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d5e:	6013      	str	r3, [r2, #0]
        }

      } break;
 8004d60:	e003      	b.n	8004d6a <main+0x26e>
      } break;
 8004d62:	bf00      	nop
 8004d64:	e002      	b.n	8004d6c <main+0x270>
      } break;
 8004d66:	bf00      	nop
 8004d68:	e000      	b.n	8004d6c <main+0x270>
      } break;
 8004d6a:	bf00      	nop
        // Ya se dibujó la pantalla en Game_ShowWinner();
        // Acá no hacemos nada: solo esperamos ACT_A / ACT_B para volver al menú.
      } break;
    }

    HAL_Delay(16); // ~60 FPS
 8004d6c:	2010      	movs	r0, #16
 8004d6e:	f000 fc21 	bl	80055b4 <HAL_Delay>
  while (1) {
 8004d72:	e6e7      	b.n	8004b44 <main+0x48>
 8004d74:	08009abc 	.word	0x08009abc
 8004d78:	2000bb0a 	.word	0x2000bb0a
 8004d7c:	2000d7e3 	.word	0x2000d7e3
 8004d80:	08009ae4 	.word	0x08009ae4
 8004d84:	2000bb10 	.word	0x2000bb10
 8004d88:	2000bb18 	.word	0x2000bb18
 8004d8c:	08009b08 	.word	0x08009b08
 8004d90:	2000d7e2 	.word	0x2000d7e2
 8004d94:	08009b44 	.word	0x08009b44
 8004d98:	2000bb28 	.word	0x2000bb28
 8004d9c:	08009b7c 	.word	0x08009b7c
 8004da0:	08009bbc 	.word	0x08009bbc
 8004da4:	08009bf8 	.word	0x08009bf8
 8004da8:	08009c34 	.word	0x08009c34
 8004dac:	2000d770 	.word	0x2000d770
 8004db0:	2000d788 	.word	0x2000d788
 8004db4:	2000d7e4 	.word	0x2000d7e4
 8004db8:	2000bb2c 	.word	0x2000bb2c
 8004dbc:	08009c58 	.word	0x08009c58

08004dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b094      	sub	sp, #80	@ 0x50
 8004dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004dc6:	f107 031c 	add.w	r3, r7, #28
 8004dca:	2234      	movs	r2, #52	@ 0x34
 8004dcc:	2100      	movs	r1, #0
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f003 fa40 	bl	8008254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004dd4:	f107 0308 	add.w	r3, r7, #8
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	605a      	str	r2, [r3, #4]
 8004dde:	609a      	str	r2, [r3, #8]
 8004de0:	60da      	str	r2, [r3, #12]
 8004de2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004de4:	2300      	movs	r3, #0
 8004de6:	607b      	str	r3, [r7, #4]
 8004de8:	4b2a      	ldr	r3, [pc, #168]	@ (8004e94 <SystemClock_Config+0xd4>)
 8004dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dec:	4a29      	ldr	r2, [pc, #164]	@ (8004e94 <SystemClock_Config+0xd4>)
 8004dee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004df2:	6413      	str	r3, [r2, #64]	@ 0x40
 8004df4:	4b27      	ldr	r3, [pc, #156]	@ (8004e94 <SystemClock_Config+0xd4>)
 8004df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dfc:	607b      	str	r3, [r7, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004e00:	2300      	movs	r3, #0
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	4b24      	ldr	r3, [pc, #144]	@ (8004e98 <SystemClock_Config+0xd8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004e0c:	4a22      	ldr	r2, [pc, #136]	@ (8004e98 <SystemClock_Config+0xd8>)
 8004e0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	4b20      	ldr	r3, [pc, #128]	@ (8004e98 <SystemClock_Config+0xd8>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004e1c:	603b      	str	r3, [r7, #0]
 8004e1e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004e20:	2302      	movs	r3, #2
 8004e22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004e24:	2301      	movs	r3, #1
 8004e26:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004e28:	2310      	movs	r3, #16
 8004e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004e30:	2300      	movs	r3, #0
 8004e32:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004e34:	2310      	movs	r3, #16
 8004e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004e38:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8004e3c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004e3e:	2304      	movs	r3, #4
 8004e40:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004e42:	2302      	movs	r3, #2
 8004e44:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004e46:	2302      	movs	r3, #2
 8004e48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e4a:	f107 031c 	add.w	r3, r7, #28
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f001 fa70 	bl	8006334 <HAL_RCC_OscConfig>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8004e5a:	f000 f981 	bl	8005160 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e5e:	230f      	movs	r3, #15
 8004e60:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e62:	2302      	movs	r3, #2
 8004e64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e66:	2300      	movs	r3, #0
 8004e68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004e6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004e70:	2300      	movs	r3, #0
 8004e72:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004e74:	f107 0308 	add.w	r3, r7, #8
 8004e78:	2102      	movs	r1, #2
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 ff10 	bl	8005ca0 <HAL_RCC_ClockConfig>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8004e86:	f000 f96b 	bl	8005160 <Error_Handler>
  }
}
 8004e8a:	bf00      	nop
 8004e8c:	3750      	adds	r7, #80	@ 0x50
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	40023800 	.word	0x40023800
 8004e98:	40007000 	.word	0x40007000

08004e9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004ea0:	4b17      	ldr	r3, [pc, #92]	@ (8004f00 <MX_SPI1_Init+0x64>)
 8004ea2:	4a18      	ldr	r2, [pc, #96]	@ (8004f04 <MX_SPI1_Init+0x68>)
 8004ea4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004ea6:	4b16      	ldr	r3, [pc, #88]	@ (8004f00 <MX_SPI1_Init+0x64>)
 8004ea8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004eac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004eae:	4b14      	ldr	r3, [pc, #80]	@ (8004f00 <MX_SPI1_Init+0x64>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004eb4:	4b12      	ldr	r3, [pc, #72]	@ (8004f00 <MX_SPI1_Init+0x64>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004eba:	4b11      	ldr	r3, [pc, #68]	@ (8004f00 <MX_SPI1_Init+0x64>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8004f00 <MX_SPI1_Init+0x64>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8004f00 <MX_SPI1_Init+0x64>)
 8004ec8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ecc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ece:	4b0c      	ldr	r3, [pc, #48]	@ (8004f00 <MX_SPI1_Init+0x64>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8004f00 <MX_SPI1_Init+0x64>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004eda:	4b09      	ldr	r3, [pc, #36]	@ (8004f00 <MX_SPI1_Init+0x64>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ee0:	4b07      	ldr	r3, [pc, #28]	@ (8004f00 <MX_SPI1_Init+0x64>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004ee6:	4b06      	ldr	r3, [pc, #24]	@ (8004f00 <MX_SPI1_Init+0x64>)
 8004ee8:	220a      	movs	r2, #10
 8004eea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004eec:	4804      	ldr	r0, [pc, #16]	@ (8004f00 <MX_SPI1_Init+0x64>)
 8004eee:	f001 fcbf 	bl	8006870 <HAL_SPI_Init>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004ef8:	f000 f932 	bl	8005160 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004efc:	bf00      	nop
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	2000b99c 	.word	0x2000b99c
 8004f04:	40013000 	.word	0x40013000

08004f08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004f0c:	4b11      	ldr	r3, [pc, #68]	@ (8004f54 <MX_USART1_UART_Init+0x4c>)
 8004f0e:	4a12      	ldr	r2, [pc, #72]	@ (8004f58 <MX_USART1_UART_Init+0x50>)
 8004f10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004f12:	4b10      	ldr	r3, [pc, #64]	@ (8004f54 <MX_USART1_UART_Init+0x4c>)
 8004f14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004f18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8004f54 <MX_USART1_UART_Init+0x4c>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004f20:	4b0c      	ldr	r3, [pc, #48]	@ (8004f54 <MX_USART1_UART_Init+0x4c>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004f26:	4b0b      	ldr	r3, [pc, #44]	@ (8004f54 <MX_USART1_UART_Init+0x4c>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004f2c:	4b09      	ldr	r3, [pc, #36]	@ (8004f54 <MX_USART1_UART_Init+0x4c>)
 8004f2e:	220c      	movs	r2, #12
 8004f30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f32:	4b08      	ldr	r3, [pc, #32]	@ (8004f54 <MX_USART1_UART_Init+0x4c>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f38:	4b06      	ldr	r3, [pc, #24]	@ (8004f54 <MX_USART1_UART_Init+0x4c>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004f3e:	4805      	ldr	r0, [pc, #20]	@ (8004f54 <MX_USART1_UART_Init+0x4c>)
 8004f40:	f002 f85e 	bl	8007000 <HAL_UART_Init>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004f4a:	f000 f909 	bl	8005160 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004f4e:	bf00      	nop
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	2000b9f4 	.word	0x2000b9f4
 8004f58:	40011000 	.word	0x40011000

08004f5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004f60:	4b11      	ldr	r3, [pc, #68]	@ (8004fa8 <MX_USART2_UART_Init+0x4c>)
 8004f62:	4a12      	ldr	r2, [pc, #72]	@ (8004fac <MX_USART2_UART_Init+0x50>)
 8004f64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004f66:	4b10      	ldr	r3, [pc, #64]	@ (8004fa8 <MX_USART2_UART_Init+0x4c>)
 8004f68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004f6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa8 <MX_USART2_UART_Init+0x4c>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004f74:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa8 <MX_USART2_UART_Init+0x4c>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa8 <MX_USART2_UART_Init+0x4c>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004f80:	4b09      	ldr	r3, [pc, #36]	@ (8004fa8 <MX_USART2_UART_Init+0x4c>)
 8004f82:	220c      	movs	r2, #12
 8004f84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f86:	4b08      	ldr	r3, [pc, #32]	@ (8004fa8 <MX_USART2_UART_Init+0x4c>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f8c:	4b06      	ldr	r3, [pc, #24]	@ (8004fa8 <MX_USART2_UART_Init+0x4c>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004f92:	4805      	ldr	r0, [pc, #20]	@ (8004fa8 <MX_USART2_UART_Init+0x4c>)
 8004f94:	f002 f834 	bl	8007000 <HAL_UART_Init>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004f9e:	f000 f8df 	bl	8005160 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004fa2:	bf00      	nop
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	2000ba3c 	.word	0x2000ba3c
 8004fac:	40004400 	.word	0x40004400

08004fb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b08a      	sub	sp, #40	@ 0x28
 8004fb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fb6:	f107 0314 	add.w	r3, r7, #20
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	605a      	str	r2, [r3, #4]
 8004fc0:	609a      	str	r2, [r3, #8]
 8004fc2:	60da      	str	r2, [r3, #12]
 8004fc4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	613b      	str	r3, [r7, #16]
 8004fca:	4b40      	ldr	r3, [pc, #256]	@ (80050cc <MX_GPIO_Init+0x11c>)
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fce:	4a3f      	ldr	r2, [pc, #252]	@ (80050cc <MX_GPIO_Init+0x11c>)
 8004fd0:	f043 0304 	orr.w	r3, r3, #4
 8004fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fd6:	4b3d      	ldr	r3, [pc, #244]	@ (80050cc <MX_GPIO_Init+0x11c>)
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60fb      	str	r3, [r7, #12]
 8004fe6:	4b39      	ldr	r3, [pc, #228]	@ (80050cc <MX_GPIO_Init+0x11c>)
 8004fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fea:	4a38      	ldr	r2, [pc, #224]	@ (80050cc <MX_GPIO_Init+0x11c>)
 8004fec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ff2:	4b36      	ldr	r3, [pc, #216]	@ (80050cc <MX_GPIO_Init+0x11c>)
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ffe:	2300      	movs	r3, #0
 8005000:	60bb      	str	r3, [r7, #8]
 8005002:	4b32      	ldr	r3, [pc, #200]	@ (80050cc <MX_GPIO_Init+0x11c>)
 8005004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005006:	4a31      	ldr	r2, [pc, #196]	@ (80050cc <MX_GPIO_Init+0x11c>)
 8005008:	f043 0301 	orr.w	r3, r3, #1
 800500c:	6313      	str	r3, [r2, #48]	@ 0x30
 800500e:	4b2f      	ldr	r3, [pc, #188]	@ (80050cc <MX_GPIO_Init+0x11c>)
 8005010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	60bb      	str	r3, [r7, #8]
 8005018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800501a:	2300      	movs	r3, #0
 800501c:	607b      	str	r3, [r7, #4]
 800501e:	4b2b      	ldr	r3, [pc, #172]	@ (80050cc <MX_GPIO_Init+0x11c>)
 8005020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005022:	4a2a      	ldr	r2, [pc, #168]	@ (80050cc <MX_GPIO_Init+0x11c>)
 8005024:	f043 0302 	orr.w	r3, r3, #2
 8005028:	6313      	str	r3, [r2, #48]	@ 0x30
 800502a:	4b28      	ldr	r3, [pc, #160]	@ (80050cc <MX_GPIO_Init+0x11c>)
 800502c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	607b      	str	r3, [r7, #4]
 8005034:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8005036:	2200      	movs	r2, #0
 8005038:	2102      	movs	r1, #2
 800503a:	4825      	ldr	r0, [pc, #148]	@ (80050d0 <MX_GPIO_Init+0x120>)
 800503c:	f000 fe16 	bl	8005c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8005040:	2200      	movs	r2, #0
 8005042:	2110      	movs	r1, #16
 8005044:	4823      	ldr	r0, [pc, #140]	@ (80050d4 <MX_GPIO_Init+0x124>)
 8005046:	f000 fe11 	bl	8005c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 800504a:	2200      	movs	r2, #0
 800504c:	2141      	movs	r1, #65	@ 0x41
 800504e:	4822      	ldr	r0, [pc, #136]	@ (80050d8 <MX_GPIO_Init+0x128>)
 8005050:	f000 fe0c 	bl	8005c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005054:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800505a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800505e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005060:	2300      	movs	r3, #0
 8005062:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005064:	f107 0314 	add.w	r3, r7, #20
 8005068:	4619      	mov	r1, r3
 800506a:	4819      	ldr	r0, [pc, #100]	@ (80050d0 <MX_GPIO_Init+0x120>)
 800506c:	f000 fc6a 	bl	8005944 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8005070:	2302      	movs	r3, #2
 8005072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005074:	2301      	movs	r3, #1
 8005076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005078:	2300      	movs	r3, #0
 800507a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800507c:	2301      	movs	r3, #1
 800507e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8005080:	f107 0314 	add.w	r3, r7, #20
 8005084:	4619      	mov	r1, r3
 8005086:	4812      	ldr	r0, [pc, #72]	@ (80050d0 <MX_GPIO_Init+0x120>)
 8005088:	f000 fc5c 	bl	8005944 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 800508c:	2310      	movs	r3, #16
 800508e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005090:	2301      	movs	r3, #1
 8005092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005094:	2300      	movs	r3, #0
 8005096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005098:	2301      	movs	r3, #1
 800509a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 800509c:	f107 0314 	add.w	r3, r7, #20
 80050a0:	4619      	mov	r1, r3
 80050a2:	480c      	ldr	r0, [pc, #48]	@ (80050d4 <MX_GPIO_Init+0x124>)
 80050a4:	f000 fc4e 	bl	8005944 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|SD_CS_Pin;
 80050a8:	2341      	movs	r3, #65	@ 0x41
 80050aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050ac:	2301      	movs	r3, #1
 80050ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b0:	2300      	movs	r3, #0
 80050b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80050b4:	2301      	movs	r3, #1
 80050b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050b8:	f107 0314 	add.w	r3, r7, #20
 80050bc:	4619      	mov	r1, r3
 80050be:	4806      	ldr	r0, [pc, #24]	@ (80050d8 <MX_GPIO_Init+0x128>)
 80050c0:	f000 fc40 	bl	8005944 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80050c4:	bf00      	nop
 80050c6:	3728      	adds	r7, #40	@ 0x28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40023800 	.word	0x40023800
 80050d0:	40020800 	.word	0x40020800
 80050d4:	40020000 	.word	0x40020000
 80050d8:	40020400 	.word	0x40020400

080050dc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a18      	ldr	r2, [pc, #96]	@ (800514c <HAL_UART_RxCpltCallback+0x70>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d12a      	bne.n	8005144 <HAL_UART_RxCpltCallback+0x68>
  {
    // Acumular hasta '\n'
    if (rx_line_len < sizeof(rx_line_buf)-1) {
 80050ee:	4b18      	ldr	r3, [pc, #96]	@ (8005150 <HAL_UART_RxCpltCallback+0x74>)
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	2b7e      	cmp	r3, #126	@ 0x7e
 80050f6:	d80c      	bhi.n	8005112 <HAL_UART_RxCpltCallback+0x36>
      rx_line_buf[rx_line_len++] = uart1_rx_byte;
 80050f8:	4b15      	ldr	r3, [pc, #84]	@ (8005150 <HAL_UART_RxCpltCallback+0x74>)
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	b291      	uxth	r1, r2
 8005102:	4a13      	ldr	r2, [pc, #76]	@ (8005150 <HAL_UART_RxCpltCallback+0x74>)
 8005104:	8011      	strh	r1, [r2, #0]
 8005106:	461a      	mov	r2, r3
 8005108:	4b12      	ldr	r3, [pc, #72]	@ (8005154 <HAL_UART_RxCpltCallback+0x78>)
 800510a:	7819      	ldrb	r1, [r3, #0]
 800510c:	4b12      	ldr	r3, [pc, #72]	@ (8005158 <HAL_UART_RxCpltCallback+0x7c>)
 800510e:	5499      	strb	r1, [r3, r2]
 8005110:	e002      	b.n	8005118 <HAL_UART_RxCpltCallback+0x3c>
    } else {
      rx_line_len = 0; // overflow -> reset
 8005112:	4b0f      	ldr	r3, [pc, #60]	@ (8005150 <HAL_UART_RxCpltCallback+0x74>)
 8005114:	2200      	movs	r2, #0
 8005116:	801a      	strh	r2, [r3, #0]
    }

    if (uart1_rx_byte == '\n') {
 8005118:	4b0e      	ldr	r3, [pc, #56]	@ (8005154 <HAL_UART_RxCpltCallback+0x78>)
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2b0a      	cmp	r3, #10
 800511e:	d10c      	bne.n	800513a <HAL_UART_RxCpltCallback+0x5e>
      rx_line_buf[rx_line_len] = '\0';
 8005120:	4b0b      	ldr	r3, [pc, #44]	@ (8005150 <HAL_UART_RxCpltCallback+0x74>)
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	b29b      	uxth	r3, r3
 8005126:	461a      	mov	r2, r3
 8005128:	4b0b      	ldr	r3, [pc, #44]	@ (8005158 <HAL_UART_RxCpltCallback+0x7c>)
 800512a:	2100      	movs	r1, #0
 800512c:	5499      	strb	r1, [r3, r2]
      ProcessCommandLine((char*)rx_line_buf);
 800512e:	480a      	ldr	r0, [pc, #40]	@ (8005158 <HAL_UART_RxCpltCallback+0x7c>)
 8005130:	f7fe f872 	bl	8003218 <ProcessCommandLine>
      rx_line_len = 0;
 8005134:	4b06      	ldr	r3, [pc, #24]	@ (8005150 <HAL_UART_RxCpltCallback+0x74>)
 8005136:	2200      	movs	r2, #0
 8005138:	801a      	strh	r2, [r3, #0]
    }

    // Re-armar recepción
    HAL_UART_Receive_IT(&huart1, &uart1_rx_byte, 1);
 800513a:	2201      	movs	r2, #1
 800513c:	4905      	ldr	r1, [pc, #20]	@ (8005154 <HAL_UART_RxCpltCallback+0x78>)
 800513e:	4807      	ldr	r0, [pc, #28]	@ (800515c <HAL_UART_RxCpltCallback+0x80>)
 8005140:	f002 f839 	bl	80071b6 <HAL_UART_Receive_IT>
  }
}
 8005144:	bf00      	nop
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	40011000 	.word	0x40011000
 8005150:	2000bb08 	.word	0x2000bb08
 8005154:	2000ba84 	.word	0x2000ba84
 8005158:	2000ba88 	.word	0x2000ba88
 800515c:	2000b9f4 	.word	0x2000b9f4

08005160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005164:	b672      	cpsid	i
}
 8005166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1) {}
 8005168:	bf00      	nop
 800516a:	e7fd      	b.n	8005168 <Error_Handler+0x8>

0800516c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005172:	2300      	movs	r3, #0
 8005174:	607b      	str	r3, [r7, #4]
 8005176:	4b10      	ldr	r3, [pc, #64]	@ (80051b8 <HAL_MspInit+0x4c>)
 8005178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800517a:	4a0f      	ldr	r2, [pc, #60]	@ (80051b8 <HAL_MspInit+0x4c>)
 800517c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005180:	6453      	str	r3, [r2, #68]	@ 0x44
 8005182:	4b0d      	ldr	r3, [pc, #52]	@ (80051b8 <HAL_MspInit+0x4c>)
 8005184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800518a:	607b      	str	r3, [r7, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800518e:	2300      	movs	r3, #0
 8005190:	603b      	str	r3, [r7, #0]
 8005192:	4b09      	ldr	r3, [pc, #36]	@ (80051b8 <HAL_MspInit+0x4c>)
 8005194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005196:	4a08      	ldr	r2, [pc, #32]	@ (80051b8 <HAL_MspInit+0x4c>)
 8005198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800519c:	6413      	str	r3, [r2, #64]	@ 0x40
 800519e:	4b06      	ldr	r3, [pc, #24]	@ (80051b8 <HAL_MspInit+0x4c>)
 80051a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051a6:	603b      	str	r3, [r7, #0]
 80051a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80051aa:	2007      	movs	r0, #7
 80051ac:	f000 faf6 	bl	800579c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051b0:	bf00      	nop
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	40023800 	.word	0x40023800

080051bc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08a      	sub	sp, #40	@ 0x28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051c4:	f107 0314 	add.w	r3, r7, #20
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	605a      	str	r2, [r3, #4]
 80051ce:	609a      	str	r2, [r3, #8]
 80051d0:	60da      	str	r2, [r3, #12]
 80051d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005250 <HAL_SPI_MspInit+0x94>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d133      	bne.n	8005246 <HAL_SPI_MspInit+0x8a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80051de:	2300      	movs	r3, #0
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	4b1c      	ldr	r3, [pc, #112]	@ (8005254 <HAL_SPI_MspInit+0x98>)
 80051e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e6:	4a1b      	ldr	r2, [pc, #108]	@ (8005254 <HAL_SPI_MspInit+0x98>)
 80051e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80051ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80051ee:	4b19      	ldr	r3, [pc, #100]	@ (8005254 <HAL_SPI_MspInit+0x98>)
 80051f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051f6:	613b      	str	r3, [r7, #16]
 80051f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051fa:	2300      	movs	r3, #0
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	4b15      	ldr	r3, [pc, #84]	@ (8005254 <HAL_SPI_MspInit+0x98>)
 8005200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005202:	4a14      	ldr	r2, [pc, #80]	@ (8005254 <HAL_SPI_MspInit+0x98>)
 8005204:	f043 0301 	orr.w	r3, r3, #1
 8005208:	6313      	str	r3, [r2, #48]	@ 0x30
 800520a:	4b12      	ldr	r3, [pc, #72]	@ (8005254 <HAL_SPI_MspInit+0x98>)
 800520c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005216:	23e0      	movs	r3, #224	@ 0xe0
 8005218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800521a:	2302      	movs	r3, #2
 800521c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800521e:	2300      	movs	r3, #0
 8005220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005222:	2303      	movs	r3, #3
 8005224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005226:	2305      	movs	r3, #5
 8005228:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800522a:	f107 0314 	add.w	r3, r7, #20
 800522e:	4619      	mov	r1, r3
 8005230:	4809      	ldr	r0, [pc, #36]	@ (8005258 <HAL_SPI_MspInit+0x9c>)
 8005232:	f000 fb87 	bl	8005944 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8005236:	2200      	movs	r2, #0
 8005238:	2100      	movs	r1, #0
 800523a:	2023      	movs	r0, #35	@ 0x23
 800523c:	f000 fab9 	bl	80057b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005240:	2023      	movs	r0, #35	@ 0x23
 8005242:	f000 fad2 	bl	80057ea <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8005246:	bf00      	nop
 8005248:	3728      	adds	r7, #40	@ 0x28
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	40013000 	.word	0x40013000
 8005254:	40023800 	.word	0x40023800
 8005258:	40020000 	.word	0x40020000

0800525c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08c      	sub	sp, #48	@ 0x30
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005264:	f107 031c 	add.w	r3, r7, #28
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	605a      	str	r2, [r3, #4]
 800526e:	609a      	str	r2, [r3, #8]
 8005270:	60da      	str	r2, [r3, #12]
 8005272:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a36      	ldr	r2, [pc, #216]	@ (8005354 <HAL_UART_MspInit+0xf8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d135      	bne.n	80052ea <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800527e:	2300      	movs	r3, #0
 8005280:	61bb      	str	r3, [r7, #24]
 8005282:	4b35      	ldr	r3, [pc, #212]	@ (8005358 <HAL_UART_MspInit+0xfc>)
 8005284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005286:	4a34      	ldr	r2, [pc, #208]	@ (8005358 <HAL_UART_MspInit+0xfc>)
 8005288:	f043 0310 	orr.w	r3, r3, #16
 800528c:	6453      	str	r3, [r2, #68]	@ 0x44
 800528e:	4b32      	ldr	r3, [pc, #200]	@ (8005358 <HAL_UART_MspInit+0xfc>)
 8005290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005292:	f003 0310 	and.w	r3, r3, #16
 8005296:	61bb      	str	r3, [r7, #24]
 8005298:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800529a:	2300      	movs	r3, #0
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	4b2e      	ldr	r3, [pc, #184]	@ (8005358 <HAL_UART_MspInit+0xfc>)
 80052a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a2:	4a2d      	ldr	r2, [pc, #180]	@ (8005358 <HAL_UART_MspInit+0xfc>)
 80052a4:	f043 0301 	orr.w	r3, r3, #1
 80052a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80052aa:	4b2b      	ldr	r3, [pc, #172]	@ (8005358 <HAL_UART_MspInit+0xfc>)
 80052ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80052b6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80052ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052bc:	2302      	movs	r3, #2
 80052be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c0:	2300      	movs	r3, #0
 80052c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052c4:	2303      	movs	r3, #3
 80052c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80052c8:	2307      	movs	r3, #7
 80052ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052cc:	f107 031c 	add.w	r3, r7, #28
 80052d0:	4619      	mov	r1, r3
 80052d2:	4822      	ldr	r0, [pc, #136]	@ (800535c <HAL_UART_MspInit+0x100>)
 80052d4:	f000 fb36 	bl	8005944 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80052d8:	2200      	movs	r2, #0
 80052da:	2100      	movs	r1, #0
 80052dc:	2025      	movs	r0, #37	@ 0x25
 80052de:	f000 fa68 	bl	80057b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80052e2:	2025      	movs	r0, #37	@ 0x25
 80052e4:	f000 fa81 	bl	80057ea <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80052e8:	e030      	b.n	800534c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005360 <HAL_UART_MspInit+0x104>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d12b      	bne.n	800534c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80052f4:	2300      	movs	r3, #0
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	4b17      	ldr	r3, [pc, #92]	@ (8005358 <HAL_UART_MspInit+0xfc>)
 80052fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fc:	4a16      	ldr	r2, [pc, #88]	@ (8005358 <HAL_UART_MspInit+0xfc>)
 80052fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005302:	6413      	str	r3, [r2, #64]	@ 0x40
 8005304:	4b14      	ldr	r3, [pc, #80]	@ (8005358 <HAL_UART_MspInit+0xfc>)
 8005306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005310:	2300      	movs	r3, #0
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	4b10      	ldr	r3, [pc, #64]	@ (8005358 <HAL_UART_MspInit+0xfc>)
 8005316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005318:	4a0f      	ldr	r2, [pc, #60]	@ (8005358 <HAL_UART_MspInit+0xfc>)
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005320:	4b0d      	ldr	r3, [pc, #52]	@ (8005358 <HAL_UART_MspInit+0xfc>)
 8005322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800532c:	230c      	movs	r3, #12
 800532e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005330:	2302      	movs	r3, #2
 8005332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005334:	2300      	movs	r3, #0
 8005336:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005338:	2303      	movs	r3, #3
 800533a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800533c:	2307      	movs	r3, #7
 800533e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005340:	f107 031c 	add.w	r3, r7, #28
 8005344:	4619      	mov	r1, r3
 8005346:	4805      	ldr	r0, [pc, #20]	@ (800535c <HAL_UART_MspInit+0x100>)
 8005348:	f000 fafc 	bl	8005944 <HAL_GPIO_Init>
}
 800534c:	bf00      	nop
 800534e:	3730      	adds	r7, #48	@ 0x30
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40011000 	.word	0x40011000
 8005358:	40023800 	.word	0x40023800
 800535c:	40020000 	.word	0x40020000
 8005360:	40004400 	.word	0x40004400

08005364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005368:	bf00      	nop
 800536a:	e7fd      	b.n	8005368 <NMI_Handler+0x4>

0800536c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005370:	bf00      	nop
 8005372:	e7fd      	b.n	8005370 <HardFault_Handler+0x4>

08005374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005378:	bf00      	nop
 800537a:	e7fd      	b.n	8005378 <MemManage_Handler+0x4>

0800537c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005380:	bf00      	nop
 8005382:	e7fd      	b.n	8005380 <BusFault_Handler+0x4>

08005384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005388:	bf00      	nop
 800538a:	e7fd      	b.n	8005388 <UsageFault_Handler+0x4>

0800538c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005390:	bf00      	nop
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800539a:	b480      	push	{r7}
 800539c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800539e:	bf00      	nop
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80053ac:	bf00      	nop
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053ba:	f000 f8db 	bl	8005574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053be:	bf00      	nop
 80053c0:	bd80      	pop	{r7, pc}
	...

080053c4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80053c8:	4802      	ldr	r0, [pc, #8]	@ (80053d4 <SPI1_IRQHandler+0x10>)
 80053ca:	f001 fc1f 	bl	8006c0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80053ce:	bf00      	nop
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	2000b99c 	.word	0x2000b99c

080053d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80053dc:	4802      	ldr	r0, [pc, #8]	@ (80053e8 <USART1_IRQHandler+0x10>)
 80053de:	f001 ff0f 	bl	8007200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80053e2:	bf00      	nop
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	2000b9f4 	.word	0x2000b9f4

080053ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80053f4:	4a14      	ldr	r2, [pc, #80]	@ (8005448 <_sbrk+0x5c>)
 80053f6:	4b15      	ldr	r3, [pc, #84]	@ (800544c <_sbrk+0x60>)
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005400:	4b13      	ldr	r3, [pc, #76]	@ (8005450 <_sbrk+0x64>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d102      	bne.n	800540e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005408:	4b11      	ldr	r3, [pc, #68]	@ (8005450 <_sbrk+0x64>)
 800540a:	4a12      	ldr	r2, [pc, #72]	@ (8005454 <_sbrk+0x68>)
 800540c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800540e:	4b10      	ldr	r3, [pc, #64]	@ (8005450 <_sbrk+0x64>)
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4413      	add	r3, r2
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	429a      	cmp	r2, r3
 800541a:	d207      	bcs.n	800542c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800541c:	f002 ff30 	bl	8008280 <__errno>
 8005420:	4603      	mov	r3, r0
 8005422:	220c      	movs	r2, #12
 8005424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005426:	f04f 33ff 	mov.w	r3, #4294967295
 800542a:	e009      	b.n	8005440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800542c:	4b08      	ldr	r3, [pc, #32]	@ (8005450 <_sbrk+0x64>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005432:	4b07      	ldr	r3, [pc, #28]	@ (8005450 <_sbrk+0x64>)
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4413      	add	r3, r2
 800543a:	4a05      	ldr	r2, [pc, #20]	@ (8005450 <_sbrk+0x64>)
 800543c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800543e:	68fb      	ldr	r3, [r7, #12]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	20020000 	.word	0x20020000
 800544c:	00000400 	.word	0x00000400
 8005450:	2000d7e8 	.word	0x2000d7e8
 8005454:	2000d938 	.word	0x2000d938

08005458 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800545c:	4b06      	ldr	r3, [pc, #24]	@ (8005478 <SystemInit+0x20>)
 800545e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005462:	4a05      	ldr	r2, [pc, #20]	@ (8005478 <SystemInit+0x20>)
 8005464:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005468:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800546c:	bf00      	nop
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	e000ed00 	.word	0xe000ed00

0800547c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800547c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80054b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005480:	f7ff ffea 	bl	8005458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005484:	480c      	ldr	r0, [pc, #48]	@ (80054b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005486:	490d      	ldr	r1, [pc, #52]	@ (80054bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005488:	4a0d      	ldr	r2, [pc, #52]	@ (80054c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800548a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800548c:	e002      	b.n	8005494 <LoopCopyDataInit>

0800548e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800548e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005492:	3304      	adds	r3, #4

08005494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005498:	d3f9      	bcc.n	800548e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800549a:	4a0a      	ldr	r2, [pc, #40]	@ (80054c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800549c:	4c0a      	ldr	r4, [pc, #40]	@ (80054c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800549e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80054a0:	e001      	b.n	80054a6 <LoopFillZerobss>

080054a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80054a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80054a4:	3204      	adds	r2, #4

080054a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80054a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80054a8:	d3fb      	bcc.n	80054a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80054aa:	f002 feef 	bl	800828c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80054ae:	f7ff fb25 	bl	8004afc <main>
  bx  lr    
 80054b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80054b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80054b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80054bc:	2000b980 	.word	0x2000b980
  ldr r2, =_sidata
 80054c0:	0803a108 	.word	0x0803a108
  ldr r2, =_sbss
 80054c4:	2000b980 	.word	0x2000b980
  ldr r4, =_ebss
 80054c8:	2000d938 	.word	0x2000d938

080054cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80054cc:	e7fe      	b.n	80054cc <ADC_IRQHandler>
	...

080054d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80054d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005510 <HAL_Init+0x40>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a0d      	ldr	r2, [pc, #52]	@ (8005510 <HAL_Init+0x40>)
 80054da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80054e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005510 <HAL_Init+0x40>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a0a      	ldr	r2, [pc, #40]	@ (8005510 <HAL_Init+0x40>)
 80054e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054ec:	4b08      	ldr	r3, [pc, #32]	@ (8005510 <HAL_Init+0x40>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a07      	ldr	r2, [pc, #28]	@ (8005510 <HAL_Init+0x40>)
 80054f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054f8:	2003      	movs	r0, #3
 80054fa:	f000 f94f 	bl	800579c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054fe:	2000      	movs	r0, #0
 8005500:	f000 f808 	bl	8005514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005504:	f7ff fe32 	bl	800516c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	40023c00 	.word	0x40023c00

08005514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800551c:	4b12      	ldr	r3, [pc, #72]	@ (8005568 <HAL_InitTick+0x54>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	4b12      	ldr	r3, [pc, #72]	@ (800556c <HAL_InitTick+0x58>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	4619      	mov	r1, r3
 8005526:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800552a:	fbb3 f3f1 	udiv	r3, r3, r1
 800552e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005532:	4618      	mov	r0, r3
 8005534:	f000 f967 	bl	8005806 <HAL_SYSTICK_Config>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e00e      	b.n	8005560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b0f      	cmp	r3, #15
 8005546:	d80a      	bhi.n	800555e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005548:	2200      	movs	r2, #0
 800554a:	6879      	ldr	r1, [r7, #4]
 800554c:	f04f 30ff 	mov.w	r0, #4294967295
 8005550:	f000 f92f 	bl	80057b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005554:	4a06      	ldr	r2, [pc, #24]	@ (8005570 <HAL_InitTick+0x5c>)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	e000      	b.n	8005560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
}
 8005560:	4618      	mov	r0, r3
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	2000b924 	.word	0x2000b924
 800556c:	2000b92c 	.word	0x2000b92c
 8005570:	2000b928 	.word	0x2000b928

08005574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005578:	4b06      	ldr	r3, [pc, #24]	@ (8005594 <HAL_IncTick+0x20>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	461a      	mov	r2, r3
 800557e:	4b06      	ldr	r3, [pc, #24]	@ (8005598 <HAL_IncTick+0x24>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4413      	add	r3, r2
 8005584:	4a04      	ldr	r2, [pc, #16]	@ (8005598 <HAL_IncTick+0x24>)
 8005586:	6013      	str	r3, [r2, #0]
}
 8005588:	bf00      	nop
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	2000b92c 	.word	0x2000b92c
 8005598:	2000d7ec 	.word	0x2000d7ec

0800559c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  return uwTick;
 80055a0:	4b03      	ldr	r3, [pc, #12]	@ (80055b0 <HAL_GetTick+0x14>)
 80055a2:	681b      	ldr	r3, [r3, #0]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	2000d7ec 	.word	0x2000d7ec

080055b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055bc:	f7ff ffee 	bl	800559c <HAL_GetTick>
 80055c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055cc:	d005      	beq.n	80055da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055ce:	4b0a      	ldr	r3, [pc, #40]	@ (80055f8 <HAL_Delay+0x44>)
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4413      	add	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80055da:	bf00      	nop
 80055dc:	f7ff ffde 	bl	800559c <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d8f7      	bhi.n	80055dc <HAL_Delay+0x28>
  {
  }
}
 80055ec:	bf00      	nop
 80055ee:	bf00      	nop
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	2000b92c 	.word	0x2000b92c

080055fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800560c:	4b0c      	ldr	r3, [pc, #48]	@ (8005640 <__NVIC_SetPriorityGrouping+0x44>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005618:	4013      	ands	r3, r2
 800561a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005624:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800562c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800562e:	4a04      	ldr	r2, [pc, #16]	@ (8005640 <__NVIC_SetPriorityGrouping+0x44>)
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	60d3      	str	r3, [r2, #12]
}
 8005634:	bf00      	nop
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	e000ed00 	.word	0xe000ed00

08005644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005648:	4b04      	ldr	r3, [pc, #16]	@ (800565c <__NVIC_GetPriorityGrouping+0x18>)
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	0a1b      	lsrs	r3, r3, #8
 800564e:	f003 0307 	and.w	r3, r3, #7
}
 8005652:	4618      	mov	r0, r3
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	e000ed00 	.word	0xe000ed00

08005660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	4603      	mov	r3, r0
 8005668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800566a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800566e:	2b00      	cmp	r3, #0
 8005670:	db0b      	blt.n	800568a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005672:	79fb      	ldrb	r3, [r7, #7]
 8005674:	f003 021f 	and.w	r2, r3, #31
 8005678:	4907      	ldr	r1, [pc, #28]	@ (8005698 <__NVIC_EnableIRQ+0x38>)
 800567a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800567e:	095b      	lsrs	r3, r3, #5
 8005680:	2001      	movs	r0, #1
 8005682:	fa00 f202 	lsl.w	r2, r0, r2
 8005686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	e000e100 	.word	0xe000e100

0800569c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	4603      	mov	r3, r0
 80056a4:	6039      	str	r1, [r7, #0]
 80056a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	db0a      	blt.n	80056c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	490c      	ldr	r1, [pc, #48]	@ (80056e8 <__NVIC_SetPriority+0x4c>)
 80056b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ba:	0112      	lsls	r2, r2, #4
 80056bc:	b2d2      	uxtb	r2, r2
 80056be:	440b      	add	r3, r1
 80056c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056c4:	e00a      	b.n	80056dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	4908      	ldr	r1, [pc, #32]	@ (80056ec <__NVIC_SetPriority+0x50>)
 80056cc:	79fb      	ldrb	r3, [r7, #7]
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	3b04      	subs	r3, #4
 80056d4:	0112      	lsls	r2, r2, #4
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	440b      	add	r3, r1
 80056da:	761a      	strb	r2, [r3, #24]
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	e000e100 	.word	0xe000e100
 80056ec:	e000ed00 	.word	0xe000ed00

080056f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b089      	sub	sp, #36	@ 0x24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f003 0307 	and.w	r3, r3, #7
 8005702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	f1c3 0307 	rsb	r3, r3, #7
 800570a:	2b04      	cmp	r3, #4
 800570c:	bf28      	it	cs
 800570e:	2304      	movcs	r3, #4
 8005710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	3304      	adds	r3, #4
 8005716:	2b06      	cmp	r3, #6
 8005718:	d902      	bls.n	8005720 <NVIC_EncodePriority+0x30>
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	3b03      	subs	r3, #3
 800571e:	e000      	b.n	8005722 <NVIC_EncodePriority+0x32>
 8005720:	2300      	movs	r3, #0
 8005722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005724:	f04f 32ff 	mov.w	r2, #4294967295
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	fa02 f303 	lsl.w	r3, r2, r3
 800572e:	43da      	mvns	r2, r3
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	401a      	ands	r2, r3
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005738:	f04f 31ff 	mov.w	r1, #4294967295
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	fa01 f303 	lsl.w	r3, r1, r3
 8005742:	43d9      	mvns	r1, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005748:	4313      	orrs	r3, r2
         );
}
 800574a:	4618      	mov	r0, r3
 800574c:	3724      	adds	r7, #36	@ 0x24
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
	...

08005758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3b01      	subs	r3, #1
 8005764:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005768:	d301      	bcc.n	800576e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800576a:	2301      	movs	r3, #1
 800576c:	e00f      	b.n	800578e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800576e:	4a0a      	ldr	r2, [pc, #40]	@ (8005798 <SysTick_Config+0x40>)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	3b01      	subs	r3, #1
 8005774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005776:	210f      	movs	r1, #15
 8005778:	f04f 30ff 	mov.w	r0, #4294967295
 800577c:	f7ff ff8e 	bl	800569c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005780:	4b05      	ldr	r3, [pc, #20]	@ (8005798 <SysTick_Config+0x40>)
 8005782:	2200      	movs	r2, #0
 8005784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005786:	4b04      	ldr	r3, [pc, #16]	@ (8005798 <SysTick_Config+0x40>)
 8005788:	2207      	movs	r2, #7
 800578a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	e000e010 	.word	0xe000e010

0800579c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff ff29 	bl	80055fc <__NVIC_SetPriorityGrouping>
}
 80057aa:	bf00      	nop
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b086      	sub	sp, #24
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	4603      	mov	r3, r0
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	607a      	str	r2, [r7, #4]
 80057be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80057c0:	2300      	movs	r3, #0
 80057c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057c4:	f7ff ff3e 	bl	8005644 <__NVIC_GetPriorityGrouping>
 80057c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	68b9      	ldr	r1, [r7, #8]
 80057ce:	6978      	ldr	r0, [r7, #20]
 80057d0:	f7ff ff8e 	bl	80056f0 <NVIC_EncodePriority>
 80057d4:	4602      	mov	r2, r0
 80057d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057da:	4611      	mov	r1, r2
 80057dc:	4618      	mov	r0, r3
 80057de:	f7ff ff5d 	bl	800569c <__NVIC_SetPriority>
}
 80057e2:	bf00      	nop
 80057e4:	3718      	adds	r7, #24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b082      	sub	sp, #8
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	4603      	mov	r3, r0
 80057f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7ff ff31 	bl	8005660 <__NVIC_EnableIRQ>
}
 80057fe:	bf00      	nop
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b082      	sub	sp, #8
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7ff ffa2 	bl	8005758 <SysTick_Config>
 8005814:	4603      	mov	r3, r0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b084      	sub	sp, #16
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800582a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800582c:	f7ff feb6 	bl	800559c <HAL_GetTick>
 8005830:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d008      	beq.n	8005850 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2280      	movs	r2, #128	@ 0x80
 8005842:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e052      	b.n	80058f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0216 	bic.w	r2, r2, #22
 800585e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695a      	ldr	r2, [r3, #20]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800586e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005874:	2b00      	cmp	r3, #0
 8005876:	d103      	bne.n	8005880 <HAL_DMA_Abort+0x62>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800587c:	2b00      	cmp	r3, #0
 800587e:	d007      	beq.n	8005890 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0208 	bic.w	r2, r2, #8
 800588e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 0201 	bic.w	r2, r2, #1
 800589e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058a0:	e013      	b.n	80058ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058a2:	f7ff fe7b 	bl	800559c <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b05      	cmp	r3, #5
 80058ae:	d90c      	bls.n	80058ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2220      	movs	r2, #32
 80058b4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2203      	movs	r2, #3
 80058ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e015      	b.n	80058f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1e4      	bne.n	80058a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058dc:	223f      	movs	r2, #63	@ 0x3f
 80058de:	409a      	lsls	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d004      	beq.n	800591c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2280      	movs	r2, #128	@ 0x80
 8005916:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e00c      	b.n	8005936 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2205      	movs	r2, #5
 8005920:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0201 	bic.w	r2, r2, #1
 8005932:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
	...

08005944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005944:	b480      	push	{r7}
 8005946:	b089      	sub	sp, #36	@ 0x24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800594e:	2300      	movs	r3, #0
 8005950:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005952:	2300      	movs	r3, #0
 8005954:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005956:	2300      	movs	r3, #0
 8005958:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800595a:	2300      	movs	r3, #0
 800595c:	61fb      	str	r3, [r7, #28]
 800595e:	e165      	b.n	8005c2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005960:	2201      	movs	r2, #1
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	fa02 f303 	lsl.w	r3, r2, r3
 8005968:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	4013      	ands	r3, r2
 8005972:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	429a      	cmp	r2, r3
 800597a:	f040 8154 	bne.w	8005c26 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	2b01      	cmp	r3, #1
 8005988:	d005      	beq.n	8005996 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005992:	2b02      	cmp	r3, #2
 8005994:	d130      	bne.n	80059f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	2203      	movs	r2, #3
 80059a2:	fa02 f303 	lsl.w	r3, r2, r3
 80059a6:	43db      	mvns	r3, r3
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	4013      	ands	r3, r2
 80059ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	4313      	orrs	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059cc:	2201      	movs	r2, #1
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	fa02 f303 	lsl.w	r3, r2, r3
 80059d4:	43db      	mvns	r3, r3
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	4013      	ands	r3, r2
 80059da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	091b      	lsrs	r3, r3, #4
 80059e2:	f003 0201 	and.w	r2, r3, #1
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f003 0303 	and.w	r3, r3, #3
 8005a00:	2b03      	cmp	r3, #3
 8005a02:	d017      	beq.n	8005a34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	2203      	movs	r2, #3
 8005a10:	fa02 f303 	lsl.w	r3, r2, r3
 8005a14:	43db      	mvns	r3, r3
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	fa02 f303 	lsl.w	r3, r2, r3
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f003 0303 	and.w	r3, r3, #3
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d123      	bne.n	8005a88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	08da      	lsrs	r2, r3, #3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3208      	adds	r2, #8
 8005a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	f003 0307 	and.w	r3, r3, #7
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	220f      	movs	r2, #15
 8005a58:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5c:	43db      	mvns	r3, r3
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	4013      	ands	r3, r2
 8005a62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	691a      	ldr	r2, [r3, #16]
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	fa02 f303 	lsl.w	r3, r2, r3
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	08da      	lsrs	r2, r3, #3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	3208      	adds	r2, #8
 8005a82:	69b9      	ldr	r1, [r7, #24]
 8005a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	2203      	movs	r2, #3
 8005a94:	fa02 f303 	lsl.w	r3, r2, r3
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f003 0203 	and.w	r2, r3, #3
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	005b      	lsls	r3, r3, #1
 8005aac:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 80ae 	beq.w	8005c26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005aca:	2300      	movs	r3, #0
 8005acc:	60fb      	str	r3, [r7, #12]
 8005ace:	4b5d      	ldr	r3, [pc, #372]	@ (8005c44 <HAL_GPIO_Init+0x300>)
 8005ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ad2:	4a5c      	ldr	r2, [pc, #368]	@ (8005c44 <HAL_GPIO_Init+0x300>)
 8005ad4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ad8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005ada:	4b5a      	ldr	r3, [pc, #360]	@ (8005c44 <HAL_GPIO_Init+0x300>)
 8005adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ade:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ae6:	4a58      	ldr	r2, [pc, #352]	@ (8005c48 <HAL_GPIO_Init+0x304>)
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	089b      	lsrs	r3, r3, #2
 8005aec:	3302      	adds	r3, #2
 8005aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	220f      	movs	r2, #15
 8005afe:	fa02 f303 	lsl.w	r3, r2, r3
 8005b02:	43db      	mvns	r3, r3
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	4013      	ands	r3, r2
 8005b08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a4f      	ldr	r2, [pc, #316]	@ (8005c4c <HAL_GPIO_Init+0x308>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d025      	beq.n	8005b5e <HAL_GPIO_Init+0x21a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a4e      	ldr	r2, [pc, #312]	@ (8005c50 <HAL_GPIO_Init+0x30c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d01f      	beq.n	8005b5a <HAL_GPIO_Init+0x216>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a4d      	ldr	r2, [pc, #308]	@ (8005c54 <HAL_GPIO_Init+0x310>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d019      	beq.n	8005b56 <HAL_GPIO_Init+0x212>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a4c      	ldr	r2, [pc, #304]	@ (8005c58 <HAL_GPIO_Init+0x314>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d013      	beq.n	8005b52 <HAL_GPIO_Init+0x20e>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a4b      	ldr	r2, [pc, #300]	@ (8005c5c <HAL_GPIO_Init+0x318>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d00d      	beq.n	8005b4e <HAL_GPIO_Init+0x20a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a4a      	ldr	r2, [pc, #296]	@ (8005c60 <HAL_GPIO_Init+0x31c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d007      	beq.n	8005b4a <HAL_GPIO_Init+0x206>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a49      	ldr	r2, [pc, #292]	@ (8005c64 <HAL_GPIO_Init+0x320>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d101      	bne.n	8005b46 <HAL_GPIO_Init+0x202>
 8005b42:	2306      	movs	r3, #6
 8005b44:	e00c      	b.n	8005b60 <HAL_GPIO_Init+0x21c>
 8005b46:	2307      	movs	r3, #7
 8005b48:	e00a      	b.n	8005b60 <HAL_GPIO_Init+0x21c>
 8005b4a:	2305      	movs	r3, #5
 8005b4c:	e008      	b.n	8005b60 <HAL_GPIO_Init+0x21c>
 8005b4e:	2304      	movs	r3, #4
 8005b50:	e006      	b.n	8005b60 <HAL_GPIO_Init+0x21c>
 8005b52:	2303      	movs	r3, #3
 8005b54:	e004      	b.n	8005b60 <HAL_GPIO_Init+0x21c>
 8005b56:	2302      	movs	r3, #2
 8005b58:	e002      	b.n	8005b60 <HAL_GPIO_Init+0x21c>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e000      	b.n	8005b60 <HAL_GPIO_Init+0x21c>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	69fa      	ldr	r2, [r7, #28]
 8005b62:	f002 0203 	and.w	r2, r2, #3
 8005b66:	0092      	lsls	r2, r2, #2
 8005b68:	4093      	lsls	r3, r2
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b70:	4935      	ldr	r1, [pc, #212]	@ (8005c48 <HAL_GPIO_Init+0x304>)
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	089b      	lsrs	r3, r3, #2
 8005b76:	3302      	adds	r3, #2
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b7e:	4b3a      	ldr	r3, [pc, #232]	@ (8005c68 <HAL_GPIO_Init+0x324>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	43db      	mvns	r3, r3
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ba2:	4a31      	ldr	r2, [pc, #196]	@ (8005c68 <HAL_GPIO_Init+0x324>)
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ba8:	4b2f      	ldr	r3, [pc, #188]	@ (8005c68 <HAL_GPIO_Init+0x324>)
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	43db      	mvns	r3, r3
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005bcc:	4a26      	ldr	r2, [pc, #152]	@ (8005c68 <HAL_GPIO_Init+0x324>)
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005bd2:	4b25      	ldr	r3, [pc, #148]	@ (8005c68 <HAL_GPIO_Init+0x324>)
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	43db      	mvns	r3, r3
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	4013      	ands	r3, r2
 8005be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005bf6:	4a1c      	ldr	r2, [pc, #112]	@ (8005c68 <HAL_GPIO_Init+0x324>)
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8005c68 <HAL_GPIO_Init+0x324>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	43db      	mvns	r3, r3
 8005c06:	69ba      	ldr	r2, [r7, #24]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c20:	4a11      	ldr	r2, [pc, #68]	@ (8005c68 <HAL_GPIO_Init+0x324>)
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	61fb      	str	r3, [r7, #28]
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	2b0f      	cmp	r3, #15
 8005c30:	f67f ae96 	bls.w	8005960 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop
 8005c38:	3724      	adds	r7, #36	@ 0x24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	40023800 	.word	0x40023800
 8005c48:	40013800 	.word	0x40013800
 8005c4c:	40020000 	.word	0x40020000
 8005c50:	40020400 	.word	0x40020400
 8005c54:	40020800 	.word	0x40020800
 8005c58:	40020c00 	.word	0x40020c00
 8005c5c:	40021000 	.word	0x40021000
 8005c60:	40021400 	.word	0x40021400
 8005c64:	40021800 	.word	0x40021800
 8005c68:	40013c00 	.word	0x40013c00

08005c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	460b      	mov	r3, r1
 8005c76:	807b      	strh	r3, [r7, #2]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c7c:	787b      	ldrb	r3, [r7, #1]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c82:	887a      	ldrh	r2, [r7, #2]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005c88:	e003      	b.n	8005c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005c8a:	887b      	ldrh	r3, [r7, #2]
 8005c8c:	041a      	lsls	r2, r3, #16
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	619a      	str	r2, [r3, #24]
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
	...

08005ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e0cc      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cb4:	4b68      	ldr	r3, [pc, #416]	@ (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 030f 	and.w	r3, r3, #15
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d90c      	bls.n	8005cdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cc2:	4b65      	ldr	r3, [pc, #404]	@ (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cca:	4b63      	ldr	r3, [pc, #396]	@ (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 030f 	and.w	r3, r3, #15
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d001      	beq.n	8005cdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e0b8      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d020      	beq.n	8005d2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d005      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cf4:	4b59      	ldr	r3, [pc, #356]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	4a58      	ldr	r2, [pc, #352]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005cfa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005cfe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d0c:	4b53      	ldr	r3, [pc, #332]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	4a52      	ldr	r2, [pc, #328]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005d16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d18:	4b50      	ldr	r3, [pc, #320]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	494d      	ldr	r1, [pc, #308]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d044      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d107      	bne.n	8005d4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d3e:	4b47      	ldr	r3, [pc, #284]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d119      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e07f      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d003      	beq.n	8005d5e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d5a:	2b03      	cmp	r3, #3
 8005d5c:	d107      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d5e:	4b3f      	ldr	r3, [pc, #252]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d109      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e06f      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d6e:	4b3b      	ldr	r3, [pc, #236]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e067      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d7e:	4b37      	ldr	r3, [pc, #220]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f023 0203 	bic.w	r2, r3, #3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	4934      	ldr	r1, [pc, #208]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d90:	f7ff fc04 	bl	800559c <HAL_GetTick>
 8005d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d96:	e00a      	b.n	8005dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d98:	f7ff fc00 	bl	800559c <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e04f      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dae:	4b2b      	ldr	r3, [pc, #172]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 020c 	and.w	r2, r3, #12
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d1eb      	bne.n	8005d98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc0:	4b25      	ldr	r3, [pc, #148]	@ (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d20c      	bcs.n	8005de8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dce:	4b22      	ldr	r3, [pc, #136]	@ (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd6:	4b20      	ldr	r3, [pc, #128]	@ (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d001      	beq.n	8005de8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e032      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0304 	and.w	r3, r3, #4
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d008      	beq.n	8005e06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005df4:	4b19      	ldr	r3, [pc, #100]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	4916      	ldr	r1, [pc, #88]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0308 	and.w	r3, r3, #8
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d009      	beq.n	8005e26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e12:	4b12      	ldr	r3, [pc, #72]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	490e      	ldr	r1, [pc, #56]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e26:	f000 f855 	bl	8005ed4 <HAL_RCC_GetSysClockFreq>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	091b      	lsrs	r3, r3, #4
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	490a      	ldr	r1, [pc, #40]	@ (8005e60 <HAL_RCC_ClockConfig+0x1c0>)
 8005e38:	5ccb      	ldrb	r3, [r1, r3]
 8005e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e3e:	4a09      	ldr	r2, [pc, #36]	@ (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005e42:	4b09      	ldr	r3, [pc, #36]	@ (8005e68 <HAL_RCC_ClockConfig+0x1c8>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7ff fb64 	bl	8005514 <HAL_InitTick>

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	40023c00 	.word	0x40023c00
 8005e5c:	40023800 	.word	0x40023800
 8005e60:	08039fac 	.word	0x08039fac
 8005e64:	2000b924 	.word	0x2000b924
 8005e68:	2000b928 	.word	0x2000b928

08005e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e70:	4b03      	ldr	r3, [pc, #12]	@ (8005e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e72:	681b      	ldr	r3, [r3, #0]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	2000b924 	.word	0x2000b924

08005e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e88:	f7ff fff0 	bl	8005e6c <HAL_RCC_GetHCLKFreq>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	4b05      	ldr	r3, [pc, #20]	@ (8005ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	0a9b      	lsrs	r3, r3, #10
 8005e94:	f003 0307 	and.w	r3, r3, #7
 8005e98:	4903      	ldr	r1, [pc, #12]	@ (8005ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e9a:	5ccb      	ldrb	r3, [r1, r3]
 8005e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	40023800 	.word	0x40023800
 8005ea8:	08039fbc 	.word	0x08039fbc

08005eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005eb0:	f7ff ffdc 	bl	8005e6c <HAL_RCC_GetHCLKFreq>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	4b05      	ldr	r3, [pc, #20]	@ (8005ecc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	0b5b      	lsrs	r3, r3, #13
 8005ebc:	f003 0307 	and.w	r3, r3, #7
 8005ec0:	4903      	ldr	r1, [pc, #12]	@ (8005ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ec2:	5ccb      	ldrb	r3, [r1, r3]
 8005ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	40023800 	.word	0x40023800
 8005ed0:	08039fbc 	.word	0x08039fbc

08005ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ed8:	b0ae      	sub	sp, #184	@ 0xb8
 8005eda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005efa:	4bcb      	ldr	r3, [pc, #812]	@ (8006228 <HAL_RCC_GetSysClockFreq+0x354>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f003 030c 	and.w	r3, r3, #12
 8005f02:	2b0c      	cmp	r3, #12
 8005f04:	f200 8206 	bhi.w	8006314 <HAL_RCC_GetSysClockFreq+0x440>
 8005f08:	a201      	add	r2, pc, #4	@ (adr r2, 8005f10 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0e:	bf00      	nop
 8005f10:	08005f45 	.word	0x08005f45
 8005f14:	08006315 	.word	0x08006315
 8005f18:	08006315 	.word	0x08006315
 8005f1c:	08006315 	.word	0x08006315
 8005f20:	08005f4d 	.word	0x08005f4d
 8005f24:	08006315 	.word	0x08006315
 8005f28:	08006315 	.word	0x08006315
 8005f2c:	08006315 	.word	0x08006315
 8005f30:	08005f55 	.word	0x08005f55
 8005f34:	08006315 	.word	0x08006315
 8005f38:	08006315 	.word	0x08006315
 8005f3c:	08006315 	.word	0x08006315
 8005f40:	08006145 	.word	0x08006145
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f44:	4bb9      	ldr	r3, [pc, #740]	@ (800622c <HAL_RCC_GetSysClockFreq+0x358>)
 8005f46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005f4a:	e1e7      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f4c:	4bb8      	ldr	r3, [pc, #736]	@ (8006230 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005f52:	e1e3      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f54:	4bb4      	ldr	r3, [pc, #720]	@ (8006228 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f60:	4bb1      	ldr	r3, [pc, #708]	@ (8006228 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d071      	beq.n	8006050 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f6c:	4bae      	ldr	r3, [pc, #696]	@ (8006228 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	099b      	lsrs	r3, r3, #6
 8005f72:	2200      	movs	r2, #0
 8005f74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f78:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005f7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f88:	2300      	movs	r3, #0
 8005f8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f92:	4622      	mov	r2, r4
 8005f94:	462b      	mov	r3, r5
 8005f96:	f04f 0000 	mov.w	r0, #0
 8005f9a:	f04f 0100 	mov.w	r1, #0
 8005f9e:	0159      	lsls	r1, r3, #5
 8005fa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fa4:	0150      	lsls	r0, r2, #5
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4621      	mov	r1, r4
 8005fac:	1a51      	subs	r1, r2, r1
 8005fae:	6439      	str	r1, [r7, #64]	@ 0x40
 8005fb0:	4629      	mov	r1, r5
 8005fb2:	eb63 0301 	sbc.w	r3, r3, r1
 8005fb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fb8:	f04f 0200 	mov.w	r2, #0
 8005fbc:	f04f 0300 	mov.w	r3, #0
 8005fc0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005fc4:	4649      	mov	r1, r9
 8005fc6:	018b      	lsls	r3, r1, #6
 8005fc8:	4641      	mov	r1, r8
 8005fca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fce:	4641      	mov	r1, r8
 8005fd0:	018a      	lsls	r2, r1, #6
 8005fd2:	4641      	mov	r1, r8
 8005fd4:	1a51      	subs	r1, r2, r1
 8005fd6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005fd8:	4649      	mov	r1, r9
 8005fda:	eb63 0301 	sbc.w	r3, r3, r1
 8005fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fe0:	f04f 0200 	mov.w	r2, #0
 8005fe4:	f04f 0300 	mov.w	r3, #0
 8005fe8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005fec:	4649      	mov	r1, r9
 8005fee:	00cb      	lsls	r3, r1, #3
 8005ff0:	4641      	mov	r1, r8
 8005ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ff6:	4641      	mov	r1, r8
 8005ff8:	00ca      	lsls	r2, r1, #3
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	4603      	mov	r3, r0
 8006000:	4622      	mov	r2, r4
 8006002:	189b      	adds	r3, r3, r2
 8006004:	633b      	str	r3, [r7, #48]	@ 0x30
 8006006:	462b      	mov	r3, r5
 8006008:	460a      	mov	r2, r1
 800600a:	eb42 0303 	adc.w	r3, r2, r3
 800600e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	f04f 0300 	mov.w	r3, #0
 8006018:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800601c:	4629      	mov	r1, r5
 800601e:	024b      	lsls	r3, r1, #9
 8006020:	4621      	mov	r1, r4
 8006022:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006026:	4621      	mov	r1, r4
 8006028:	024a      	lsls	r2, r1, #9
 800602a:	4610      	mov	r0, r2
 800602c:	4619      	mov	r1, r3
 800602e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006032:	2200      	movs	r2, #0
 8006034:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006038:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800603c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006040:	f7fa f94e 	bl	80002e0 <__aeabi_uldivmod>
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	4613      	mov	r3, r2
 800604a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800604e:	e067      	b.n	8006120 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006050:	4b75      	ldr	r3, [pc, #468]	@ (8006228 <HAL_RCC_GetSysClockFreq+0x354>)
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	099b      	lsrs	r3, r3, #6
 8006056:	2200      	movs	r2, #0
 8006058:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800605c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006060:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006068:	67bb      	str	r3, [r7, #120]	@ 0x78
 800606a:	2300      	movs	r3, #0
 800606c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800606e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006072:	4622      	mov	r2, r4
 8006074:	462b      	mov	r3, r5
 8006076:	f04f 0000 	mov.w	r0, #0
 800607a:	f04f 0100 	mov.w	r1, #0
 800607e:	0159      	lsls	r1, r3, #5
 8006080:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006084:	0150      	lsls	r0, r2, #5
 8006086:	4602      	mov	r2, r0
 8006088:	460b      	mov	r3, r1
 800608a:	4621      	mov	r1, r4
 800608c:	1a51      	subs	r1, r2, r1
 800608e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006090:	4629      	mov	r1, r5
 8006092:	eb63 0301 	sbc.w	r3, r3, r1
 8006096:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006098:	f04f 0200 	mov.w	r2, #0
 800609c:	f04f 0300 	mov.w	r3, #0
 80060a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80060a4:	4649      	mov	r1, r9
 80060a6:	018b      	lsls	r3, r1, #6
 80060a8:	4641      	mov	r1, r8
 80060aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060ae:	4641      	mov	r1, r8
 80060b0:	018a      	lsls	r2, r1, #6
 80060b2:	4641      	mov	r1, r8
 80060b4:	ebb2 0a01 	subs.w	sl, r2, r1
 80060b8:	4649      	mov	r1, r9
 80060ba:	eb63 0b01 	sbc.w	fp, r3, r1
 80060be:	f04f 0200 	mov.w	r2, #0
 80060c2:	f04f 0300 	mov.w	r3, #0
 80060c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060d2:	4692      	mov	sl, r2
 80060d4:	469b      	mov	fp, r3
 80060d6:	4623      	mov	r3, r4
 80060d8:	eb1a 0303 	adds.w	r3, sl, r3
 80060dc:	623b      	str	r3, [r7, #32]
 80060de:	462b      	mov	r3, r5
 80060e0:	eb4b 0303 	adc.w	r3, fp, r3
 80060e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80060e6:	f04f 0200 	mov.w	r2, #0
 80060ea:	f04f 0300 	mov.w	r3, #0
 80060ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80060f2:	4629      	mov	r1, r5
 80060f4:	028b      	lsls	r3, r1, #10
 80060f6:	4621      	mov	r1, r4
 80060f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060fc:	4621      	mov	r1, r4
 80060fe:	028a      	lsls	r2, r1, #10
 8006100:	4610      	mov	r0, r2
 8006102:	4619      	mov	r1, r3
 8006104:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006108:	2200      	movs	r2, #0
 800610a:	673b      	str	r3, [r7, #112]	@ 0x70
 800610c:	677a      	str	r2, [r7, #116]	@ 0x74
 800610e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006112:	f7fa f8e5 	bl	80002e0 <__aeabi_uldivmod>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	4613      	mov	r3, r2
 800611c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006120:	4b41      	ldr	r3, [pc, #260]	@ (8006228 <HAL_RCC_GetSysClockFreq+0x354>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	0c1b      	lsrs	r3, r3, #16
 8006126:	f003 0303 	and.w	r3, r3, #3
 800612a:	3301      	adds	r3, #1
 800612c:	005b      	lsls	r3, r3, #1
 800612e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006132:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006136:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800613a:	fbb2 f3f3 	udiv	r3, r2, r3
 800613e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006142:	e0eb      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006144:	4b38      	ldr	r3, [pc, #224]	@ (8006228 <HAL_RCC_GetSysClockFreq+0x354>)
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800614c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006150:	4b35      	ldr	r3, [pc, #212]	@ (8006228 <HAL_RCC_GetSysClockFreq+0x354>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d06b      	beq.n	8006234 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800615c:	4b32      	ldr	r3, [pc, #200]	@ (8006228 <HAL_RCC_GetSysClockFreq+0x354>)
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	099b      	lsrs	r3, r3, #6
 8006162:	2200      	movs	r2, #0
 8006164:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006166:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006168:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800616a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800616e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006170:	2300      	movs	r3, #0
 8006172:	667b      	str	r3, [r7, #100]	@ 0x64
 8006174:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006178:	4622      	mov	r2, r4
 800617a:	462b      	mov	r3, r5
 800617c:	f04f 0000 	mov.w	r0, #0
 8006180:	f04f 0100 	mov.w	r1, #0
 8006184:	0159      	lsls	r1, r3, #5
 8006186:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800618a:	0150      	lsls	r0, r2, #5
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	4621      	mov	r1, r4
 8006192:	1a51      	subs	r1, r2, r1
 8006194:	61b9      	str	r1, [r7, #24]
 8006196:	4629      	mov	r1, r5
 8006198:	eb63 0301 	sbc.w	r3, r3, r1
 800619c:	61fb      	str	r3, [r7, #28]
 800619e:	f04f 0200 	mov.w	r2, #0
 80061a2:	f04f 0300 	mov.w	r3, #0
 80061a6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80061aa:	4659      	mov	r1, fp
 80061ac:	018b      	lsls	r3, r1, #6
 80061ae:	4651      	mov	r1, sl
 80061b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061b4:	4651      	mov	r1, sl
 80061b6:	018a      	lsls	r2, r1, #6
 80061b8:	4651      	mov	r1, sl
 80061ba:	ebb2 0801 	subs.w	r8, r2, r1
 80061be:	4659      	mov	r1, fp
 80061c0:	eb63 0901 	sbc.w	r9, r3, r1
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	f04f 0300 	mov.w	r3, #0
 80061cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061d8:	4690      	mov	r8, r2
 80061da:	4699      	mov	r9, r3
 80061dc:	4623      	mov	r3, r4
 80061de:	eb18 0303 	adds.w	r3, r8, r3
 80061e2:	613b      	str	r3, [r7, #16]
 80061e4:	462b      	mov	r3, r5
 80061e6:	eb49 0303 	adc.w	r3, r9, r3
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	f04f 0300 	mov.w	r3, #0
 80061f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80061f8:	4629      	mov	r1, r5
 80061fa:	024b      	lsls	r3, r1, #9
 80061fc:	4621      	mov	r1, r4
 80061fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006202:	4621      	mov	r1, r4
 8006204:	024a      	lsls	r2, r1, #9
 8006206:	4610      	mov	r0, r2
 8006208:	4619      	mov	r1, r3
 800620a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800620e:	2200      	movs	r2, #0
 8006210:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006212:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006214:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006218:	f7fa f862 	bl	80002e0 <__aeabi_uldivmod>
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	4613      	mov	r3, r2
 8006222:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006226:	e065      	b.n	80062f4 <HAL_RCC_GetSysClockFreq+0x420>
 8006228:	40023800 	.word	0x40023800
 800622c:	00f42400 	.word	0x00f42400
 8006230:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006234:	4b3d      	ldr	r3, [pc, #244]	@ (800632c <HAL_RCC_GetSysClockFreq+0x458>)
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	099b      	lsrs	r3, r3, #6
 800623a:	2200      	movs	r2, #0
 800623c:	4618      	mov	r0, r3
 800623e:	4611      	mov	r1, r2
 8006240:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006244:	653b      	str	r3, [r7, #80]	@ 0x50
 8006246:	2300      	movs	r3, #0
 8006248:	657b      	str	r3, [r7, #84]	@ 0x54
 800624a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800624e:	4642      	mov	r2, r8
 8006250:	464b      	mov	r3, r9
 8006252:	f04f 0000 	mov.w	r0, #0
 8006256:	f04f 0100 	mov.w	r1, #0
 800625a:	0159      	lsls	r1, r3, #5
 800625c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006260:	0150      	lsls	r0, r2, #5
 8006262:	4602      	mov	r2, r0
 8006264:	460b      	mov	r3, r1
 8006266:	4641      	mov	r1, r8
 8006268:	1a51      	subs	r1, r2, r1
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	4649      	mov	r1, r9
 800626e:	eb63 0301 	sbc.w	r3, r3, r1
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	f04f 0200 	mov.w	r2, #0
 8006278:	f04f 0300 	mov.w	r3, #0
 800627c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006280:	4659      	mov	r1, fp
 8006282:	018b      	lsls	r3, r1, #6
 8006284:	4651      	mov	r1, sl
 8006286:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800628a:	4651      	mov	r1, sl
 800628c:	018a      	lsls	r2, r1, #6
 800628e:	4651      	mov	r1, sl
 8006290:	1a54      	subs	r4, r2, r1
 8006292:	4659      	mov	r1, fp
 8006294:	eb63 0501 	sbc.w	r5, r3, r1
 8006298:	f04f 0200 	mov.w	r2, #0
 800629c:	f04f 0300 	mov.w	r3, #0
 80062a0:	00eb      	lsls	r3, r5, #3
 80062a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062a6:	00e2      	lsls	r2, r4, #3
 80062a8:	4614      	mov	r4, r2
 80062aa:	461d      	mov	r5, r3
 80062ac:	4643      	mov	r3, r8
 80062ae:	18e3      	adds	r3, r4, r3
 80062b0:	603b      	str	r3, [r7, #0]
 80062b2:	464b      	mov	r3, r9
 80062b4:	eb45 0303 	adc.w	r3, r5, r3
 80062b8:	607b      	str	r3, [r7, #4]
 80062ba:	f04f 0200 	mov.w	r2, #0
 80062be:	f04f 0300 	mov.w	r3, #0
 80062c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062c6:	4629      	mov	r1, r5
 80062c8:	028b      	lsls	r3, r1, #10
 80062ca:	4621      	mov	r1, r4
 80062cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062d0:	4621      	mov	r1, r4
 80062d2:	028a      	lsls	r2, r1, #10
 80062d4:	4610      	mov	r0, r2
 80062d6:	4619      	mov	r1, r3
 80062d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062dc:	2200      	movs	r2, #0
 80062de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062e0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80062e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80062e6:	f7f9 fffb 	bl	80002e0 <__aeabi_uldivmod>
 80062ea:	4602      	mov	r2, r0
 80062ec:	460b      	mov	r3, r1
 80062ee:	4613      	mov	r3, r2
 80062f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80062f4:	4b0d      	ldr	r3, [pc, #52]	@ (800632c <HAL_RCC_GetSysClockFreq+0x458>)
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	0f1b      	lsrs	r3, r3, #28
 80062fa:	f003 0307 	and.w	r3, r3, #7
 80062fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8006302:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006306:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800630a:	fbb2 f3f3 	udiv	r3, r2, r3
 800630e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006312:	e003      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006314:	4b06      	ldr	r3, [pc, #24]	@ (8006330 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006316:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800631a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800631c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006320:	4618      	mov	r0, r3
 8006322:	37b8      	adds	r7, #184	@ 0xb8
 8006324:	46bd      	mov	sp, r7
 8006326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800632a:	bf00      	nop
 800632c:	40023800 	.word	0x40023800
 8006330:	00f42400 	.word	0x00f42400

08006334 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e28d      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 8083 	beq.w	800645a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006354:	4b94      	ldr	r3, [pc, #592]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f003 030c 	and.w	r3, r3, #12
 800635c:	2b04      	cmp	r3, #4
 800635e:	d019      	beq.n	8006394 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006360:	4b91      	ldr	r3, [pc, #580]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f003 030c 	and.w	r3, r3, #12
        || \
 8006368:	2b08      	cmp	r3, #8
 800636a:	d106      	bne.n	800637a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800636c:	4b8e      	ldr	r3, [pc, #568]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006374:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006378:	d00c      	beq.n	8006394 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800637a:	4b8b      	ldr	r3, [pc, #556]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006382:	2b0c      	cmp	r3, #12
 8006384:	d112      	bne.n	80063ac <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006386:	4b88      	ldr	r3, [pc, #544]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800638e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006392:	d10b      	bne.n	80063ac <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006394:	4b84      	ldr	r3, [pc, #528]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d05b      	beq.n	8006458 <HAL_RCC_OscConfig+0x124>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d157      	bne.n	8006458 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e25a      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063b4:	d106      	bne.n	80063c4 <HAL_RCC_OscConfig+0x90>
 80063b6:	4b7c      	ldr	r3, [pc, #496]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a7b      	ldr	r2, [pc, #492]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80063bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	e01d      	b.n	8006400 <HAL_RCC_OscConfig+0xcc>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063cc:	d10c      	bne.n	80063e8 <HAL_RCC_OscConfig+0xb4>
 80063ce:	4b76      	ldr	r3, [pc, #472]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a75      	ldr	r2, [pc, #468]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80063d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	4b73      	ldr	r3, [pc, #460]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a72      	ldr	r2, [pc, #456]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80063e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	e00b      	b.n	8006400 <HAL_RCC_OscConfig+0xcc>
 80063e8:	4b6f      	ldr	r3, [pc, #444]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a6e      	ldr	r2, [pc, #440]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80063ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	4b6c      	ldr	r3, [pc, #432]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a6b      	ldr	r2, [pc, #428]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80063fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d013      	beq.n	8006430 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006408:	f7ff f8c8 	bl	800559c <HAL_GetTick>
 800640c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800640e:	e008      	b.n	8006422 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006410:	f7ff f8c4 	bl	800559c <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b64      	cmp	r3, #100	@ 0x64
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e21f      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006422:	4b61      	ldr	r3, [pc, #388]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d0f0      	beq.n	8006410 <HAL_RCC_OscConfig+0xdc>
 800642e:	e014      	b.n	800645a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006430:	f7ff f8b4 	bl	800559c <HAL_GetTick>
 8006434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006438:	f7ff f8b0 	bl	800559c <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b64      	cmp	r3, #100	@ 0x64
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e20b      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800644a:	4b57      	ldr	r3, [pc, #348]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1f0      	bne.n	8006438 <HAL_RCC_OscConfig+0x104>
 8006456:	e000      	b.n	800645a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d06f      	beq.n	8006546 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006466:	4b50      	ldr	r3, [pc, #320]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 030c 	and.w	r3, r3, #12
 800646e:	2b00      	cmp	r3, #0
 8006470:	d017      	beq.n	80064a2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006472:	4b4d      	ldr	r3, [pc, #308]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 030c 	and.w	r3, r3, #12
        || \
 800647a:	2b08      	cmp	r3, #8
 800647c:	d105      	bne.n	800648a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800647e:	4b4a      	ldr	r3, [pc, #296]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00b      	beq.n	80064a2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800648a:	4b47      	ldr	r3, [pc, #284]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006492:	2b0c      	cmp	r3, #12
 8006494:	d11c      	bne.n	80064d0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006496:	4b44      	ldr	r3, [pc, #272]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d116      	bne.n	80064d0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064a2:	4b41      	ldr	r3, [pc, #260]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d005      	beq.n	80064ba <HAL_RCC_OscConfig+0x186>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d001      	beq.n	80064ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e1d3      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ba:	4b3b      	ldr	r3, [pc, #236]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	00db      	lsls	r3, r3, #3
 80064c8:	4937      	ldr	r1, [pc, #220]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ce:	e03a      	b.n	8006546 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d020      	beq.n	800651a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064d8:	4b34      	ldr	r3, [pc, #208]	@ (80065ac <HAL_RCC_OscConfig+0x278>)
 80064da:	2201      	movs	r2, #1
 80064dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064de:	f7ff f85d 	bl	800559c <HAL_GetTick>
 80064e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064e4:	e008      	b.n	80064f8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064e6:	f7ff f859 	bl	800559c <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e1b4      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064f8:	4b2b      	ldr	r3, [pc, #172]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0f0      	beq.n	80064e6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006504:	4b28      	ldr	r3, [pc, #160]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	00db      	lsls	r3, r3, #3
 8006512:	4925      	ldr	r1, [pc, #148]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 8006514:	4313      	orrs	r3, r2
 8006516:	600b      	str	r3, [r1, #0]
 8006518:	e015      	b.n	8006546 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800651a:	4b24      	ldr	r3, [pc, #144]	@ (80065ac <HAL_RCC_OscConfig+0x278>)
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006520:	f7ff f83c 	bl	800559c <HAL_GetTick>
 8006524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006528:	f7ff f838 	bl	800559c <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e193      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800653a:	4b1b      	ldr	r3, [pc, #108]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1f0      	bne.n	8006528 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0308 	and.w	r3, r3, #8
 800654e:	2b00      	cmp	r3, #0
 8006550:	d036      	beq.n	80065c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d016      	beq.n	8006588 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800655a:	4b15      	ldr	r3, [pc, #84]	@ (80065b0 <HAL_RCC_OscConfig+0x27c>)
 800655c:	2201      	movs	r2, #1
 800655e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006560:	f7ff f81c 	bl	800559c <HAL_GetTick>
 8006564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006566:	e008      	b.n	800657a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006568:	f7ff f818 	bl	800559c <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	2b02      	cmp	r3, #2
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e173      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800657a:	4b0b      	ldr	r3, [pc, #44]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 800657c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d0f0      	beq.n	8006568 <HAL_RCC_OscConfig+0x234>
 8006586:	e01b      	b.n	80065c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006588:	4b09      	ldr	r3, [pc, #36]	@ (80065b0 <HAL_RCC_OscConfig+0x27c>)
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800658e:	f7ff f805 	bl	800559c <HAL_GetTick>
 8006592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006594:	e00e      	b.n	80065b4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006596:	f7ff f801 	bl	800559c <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d907      	bls.n	80065b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e15c      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
 80065a8:	40023800 	.word	0x40023800
 80065ac:	42470000 	.word	0x42470000
 80065b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065b4:	4b8a      	ldr	r3, [pc, #552]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 80065b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1ea      	bne.n	8006596 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 8097 	beq.w	80066fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065ce:	2300      	movs	r3, #0
 80065d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065d2:	4b83      	ldr	r3, [pc, #524]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 80065d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10f      	bne.n	80065fe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065de:	2300      	movs	r3, #0
 80065e0:	60bb      	str	r3, [r7, #8]
 80065e2:	4b7f      	ldr	r3, [pc, #508]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 80065e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e6:	4a7e      	ldr	r2, [pc, #504]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 80065e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80065ee:	4b7c      	ldr	r3, [pc, #496]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 80065f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065f6:	60bb      	str	r3, [r7, #8]
 80065f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065fa:	2301      	movs	r3, #1
 80065fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065fe:	4b79      	ldr	r3, [pc, #484]	@ (80067e4 <HAL_RCC_OscConfig+0x4b0>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006606:	2b00      	cmp	r3, #0
 8006608:	d118      	bne.n	800663c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800660a:	4b76      	ldr	r3, [pc, #472]	@ (80067e4 <HAL_RCC_OscConfig+0x4b0>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a75      	ldr	r2, [pc, #468]	@ (80067e4 <HAL_RCC_OscConfig+0x4b0>)
 8006610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006616:	f7fe ffc1 	bl	800559c <HAL_GetTick>
 800661a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800661c:	e008      	b.n	8006630 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800661e:	f7fe ffbd 	bl	800559c <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d901      	bls.n	8006630 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e118      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006630:	4b6c      	ldr	r3, [pc, #432]	@ (80067e4 <HAL_RCC_OscConfig+0x4b0>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006638:	2b00      	cmp	r3, #0
 800663a:	d0f0      	beq.n	800661e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d106      	bne.n	8006652 <HAL_RCC_OscConfig+0x31e>
 8006644:	4b66      	ldr	r3, [pc, #408]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 8006646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006648:	4a65      	ldr	r2, [pc, #404]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 800664a:	f043 0301 	orr.w	r3, r3, #1
 800664e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006650:	e01c      	b.n	800668c <HAL_RCC_OscConfig+0x358>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	2b05      	cmp	r3, #5
 8006658:	d10c      	bne.n	8006674 <HAL_RCC_OscConfig+0x340>
 800665a:	4b61      	ldr	r3, [pc, #388]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 800665c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800665e:	4a60      	ldr	r2, [pc, #384]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 8006660:	f043 0304 	orr.w	r3, r3, #4
 8006664:	6713      	str	r3, [r2, #112]	@ 0x70
 8006666:	4b5e      	ldr	r3, [pc, #376]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 8006668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800666a:	4a5d      	ldr	r2, [pc, #372]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 800666c:	f043 0301 	orr.w	r3, r3, #1
 8006670:	6713      	str	r3, [r2, #112]	@ 0x70
 8006672:	e00b      	b.n	800668c <HAL_RCC_OscConfig+0x358>
 8006674:	4b5a      	ldr	r3, [pc, #360]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 8006676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006678:	4a59      	ldr	r2, [pc, #356]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 800667a:	f023 0301 	bic.w	r3, r3, #1
 800667e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006680:	4b57      	ldr	r3, [pc, #348]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 8006682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006684:	4a56      	ldr	r2, [pc, #344]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 8006686:	f023 0304 	bic.w	r3, r3, #4
 800668a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d015      	beq.n	80066c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006694:	f7fe ff82 	bl	800559c <HAL_GetTick>
 8006698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800669a:	e00a      	b.n	80066b2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800669c:	f7fe ff7e 	bl	800559c <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d901      	bls.n	80066b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e0d7      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066b2:	4b4b      	ldr	r3, [pc, #300]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 80066b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0ee      	beq.n	800669c <HAL_RCC_OscConfig+0x368>
 80066be:	e014      	b.n	80066ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066c0:	f7fe ff6c 	bl	800559c <HAL_GetTick>
 80066c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066c6:	e00a      	b.n	80066de <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066c8:	f7fe ff68 	bl	800559c <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d901      	bls.n	80066de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e0c1      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066de:	4b40      	ldr	r3, [pc, #256]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 80066e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1ee      	bne.n	80066c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066ea:	7dfb      	ldrb	r3, [r7, #23]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d105      	bne.n	80066fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066f0:	4b3b      	ldr	r3, [pc, #236]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 80066f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f4:	4a3a      	ldr	r2, [pc, #232]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 80066f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 80ad 	beq.w	8006860 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006706:	4b36      	ldr	r3, [pc, #216]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f003 030c 	and.w	r3, r3, #12
 800670e:	2b08      	cmp	r3, #8
 8006710:	d060      	beq.n	80067d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	2b02      	cmp	r3, #2
 8006718:	d145      	bne.n	80067a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800671a:	4b33      	ldr	r3, [pc, #204]	@ (80067e8 <HAL_RCC_OscConfig+0x4b4>)
 800671c:	2200      	movs	r2, #0
 800671e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006720:	f7fe ff3c 	bl	800559c <HAL_GetTick>
 8006724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006726:	e008      	b.n	800673a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006728:	f7fe ff38 	bl	800559c <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d901      	bls.n	800673a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e093      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800673a:	4b29      	ldr	r3, [pc, #164]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1f0      	bne.n	8006728 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	69da      	ldr	r2, [r3, #28]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	431a      	orrs	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006754:	019b      	lsls	r3, r3, #6
 8006756:	431a      	orrs	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675c:	085b      	lsrs	r3, r3, #1
 800675e:	3b01      	subs	r3, #1
 8006760:	041b      	lsls	r3, r3, #16
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006768:	061b      	lsls	r3, r3, #24
 800676a:	431a      	orrs	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006770:	071b      	lsls	r3, r3, #28
 8006772:	491b      	ldr	r1, [pc, #108]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 8006774:	4313      	orrs	r3, r2
 8006776:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006778:	4b1b      	ldr	r3, [pc, #108]	@ (80067e8 <HAL_RCC_OscConfig+0x4b4>)
 800677a:	2201      	movs	r2, #1
 800677c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800677e:	f7fe ff0d 	bl	800559c <HAL_GetTick>
 8006782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006784:	e008      	b.n	8006798 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006786:	f7fe ff09 	bl	800559c <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d901      	bls.n	8006798 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e064      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006798:	4b11      	ldr	r3, [pc, #68]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d0f0      	beq.n	8006786 <HAL_RCC_OscConfig+0x452>
 80067a4:	e05c      	b.n	8006860 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067a6:	4b10      	ldr	r3, [pc, #64]	@ (80067e8 <HAL_RCC_OscConfig+0x4b4>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ac:	f7fe fef6 	bl	800559c <HAL_GetTick>
 80067b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067b4:	f7fe fef2 	bl	800559c <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e04d      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067c6:	4b06      	ldr	r3, [pc, #24]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1f0      	bne.n	80067b4 <HAL_RCC_OscConfig+0x480>
 80067d2:	e045      	b.n	8006860 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d107      	bne.n	80067ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e040      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
 80067e0:	40023800 	.word	0x40023800
 80067e4:	40007000 	.word	0x40007000
 80067e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067ec:	4b1f      	ldr	r3, [pc, #124]	@ (800686c <HAL_RCC_OscConfig+0x538>)
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d030      	beq.n	800685c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006804:	429a      	cmp	r2, r3
 8006806:	d129      	bne.n	800685c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006812:	429a      	cmp	r2, r3
 8006814:	d122      	bne.n	800685c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800681c:	4013      	ands	r3, r2
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006822:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006824:	4293      	cmp	r3, r2
 8006826:	d119      	bne.n	800685c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006832:	085b      	lsrs	r3, r3, #1
 8006834:	3b01      	subs	r3, #1
 8006836:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006838:	429a      	cmp	r2, r3
 800683a:	d10f      	bne.n	800685c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006846:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006848:	429a      	cmp	r2, r3
 800684a:	d107      	bne.n	800685c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006856:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006858:	429a      	cmp	r2, r3
 800685a:	d001      	beq.n	8006860 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e000      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	40023800 	.word	0x40023800

08006870 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e07b      	b.n	800697a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006886:	2b00      	cmp	r3, #0
 8006888:	d108      	bne.n	800689c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006892:	d009      	beq.n	80068a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	61da      	str	r2, [r3, #28]
 800689a:	e005      	b.n	80068a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d106      	bne.n	80068c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7fe fc7a 	bl	80051bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80068f0:	431a      	orrs	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068fa:	431a      	orrs	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	431a      	orrs	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006918:	431a      	orrs	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006922:	431a      	orrs	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800692c:	ea42 0103 	orr.w	r1, r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006934:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	430a      	orrs	r2, r1
 800693e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	0c1b      	lsrs	r3, r3, #16
 8006946:	f003 0104 	and.w	r1, r3, #4
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694e:	f003 0210 	and.w	r2, r3, #16
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69da      	ldr	r2, [r3, #28]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006968:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b088      	sub	sp, #32
 8006986:	af00      	add	r7, sp, #0
 8006988:	60f8      	str	r0, [r7, #12]
 800698a:	60b9      	str	r1, [r7, #8]
 800698c:	603b      	str	r3, [r7, #0]
 800698e:	4613      	mov	r3, r2
 8006990:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006992:	f7fe fe03 	bl	800559c <HAL_GetTick>
 8006996:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006998:	88fb      	ldrh	r3, [r7, #6]
 800699a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d001      	beq.n	80069ac <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80069a8:	2302      	movs	r3, #2
 80069aa:	e12a      	b.n	8006c02 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <HAL_SPI_Transmit+0x36>
 80069b2:	88fb      	ldrh	r3, [r7, #6]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d101      	bne.n	80069bc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e122      	b.n	8006c02 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d101      	bne.n	80069ca <HAL_SPI_Transmit+0x48>
 80069c6:	2302      	movs	r3, #2
 80069c8:	e11b      	b.n	8006c02 <HAL_SPI_Transmit+0x280>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2203      	movs	r2, #3
 80069d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	88fa      	ldrh	r2, [r7, #6]
 80069ea:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	88fa      	ldrh	r2, [r7, #6]
 80069f0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a18:	d10f      	bne.n	8006a3a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a44:	2b40      	cmp	r3, #64	@ 0x40
 8006a46:	d007      	beq.n	8006a58 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a60:	d152      	bne.n	8006b08 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d002      	beq.n	8006a70 <HAL_SPI_Transmit+0xee>
 8006a6a:	8b7b      	ldrh	r3, [r7, #26]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d145      	bne.n	8006afc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a74:	881a      	ldrh	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a80:	1c9a      	adds	r2, r3, #2
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a94:	e032      	b.n	8006afc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f003 0302 	and.w	r3, r3, #2
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d112      	bne.n	8006aca <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa8:	881a      	ldrh	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab4:	1c9a      	adds	r2, r3, #2
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006ac8:	e018      	b.n	8006afc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aca:	f7fe fd67 	bl	800559c <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d803      	bhi.n	8006ae2 <HAL_SPI_Transmit+0x160>
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae0:	d102      	bne.n	8006ae8 <HAL_SPI_Transmit+0x166>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d109      	bne.n	8006afc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e082      	b.n	8006c02 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1c7      	bne.n	8006a96 <HAL_SPI_Transmit+0x114>
 8006b06:	e053      	b.n	8006bb0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <HAL_SPI_Transmit+0x194>
 8006b10:	8b7b      	ldrh	r3, [r7, #26]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d147      	bne.n	8006ba6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	330c      	adds	r3, #12
 8006b20:	7812      	ldrb	r2, [r2, #0]
 8006b22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b28:	1c5a      	adds	r2, r3, #1
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	3b01      	subs	r3, #1
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006b3c:	e033      	b.n	8006ba6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f003 0302 	and.w	r3, r3, #2
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d113      	bne.n	8006b74 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	330c      	adds	r3, #12
 8006b56:	7812      	ldrb	r2, [r2, #0]
 8006b58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006b72:	e018      	b.n	8006ba6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b74:	f7fe fd12 	bl	800559c <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d803      	bhi.n	8006b8c <HAL_SPI_Transmit+0x20a>
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8a:	d102      	bne.n	8006b92 <HAL_SPI_Transmit+0x210>
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d109      	bne.n	8006ba6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e02d      	b.n	8006c02 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1c6      	bne.n	8006b3e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bb0:	69fa      	ldr	r2, [r7, #28]
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 f9cf 	bl	8006f58 <SPI_EndRxTxTransaction>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d002      	beq.n	8006bc6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10a      	bne.n	8006be4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bce:	2300      	movs	r3, #0
 8006bd0:	617b      	str	r3, [r7, #20]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	617b      	str	r3, [r7, #20]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	617b      	str	r3, [r7, #20]
 8006be2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e000      	b.n	8006c02 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006c00:	2300      	movs	r3, #0
  }
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3720      	adds	r7, #32
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
	...

08006c0c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b088      	sub	sp, #32
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	099b      	lsrs	r3, r3, #6
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10f      	bne.n	8006c50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00a      	beq.n	8006c50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	099b      	lsrs	r3, r3, #6
 8006c3e:	f003 0301 	and.w	r3, r3, #1
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d004      	beq.n	8006c50 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	4798      	blx	r3
    return;
 8006c4e:	e0d7      	b.n	8006e00 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	085b      	lsrs	r3, r3, #1
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00a      	beq.n	8006c72 <HAL_SPI_IRQHandler+0x66>
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	09db      	lsrs	r3, r3, #7
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d004      	beq.n	8006c72 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	4798      	blx	r3
    return;
 8006c70:	e0c6      	b.n	8006e00 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	095b      	lsrs	r3, r3, #5
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10c      	bne.n	8006c98 <HAL_SPI_IRQHandler+0x8c>
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	099b      	lsrs	r3, r3, #6
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d106      	bne.n	8006c98 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	0a1b      	lsrs	r3, r3, #8
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 80b4 	beq.w	8006e00 <HAL_SPI_IRQHandler+0x1f4>
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	095b      	lsrs	r3, r3, #5
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 80ad 	beq.w	8006e00 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	099b      	lsrs	r3, r3, #6
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d023      	beq.n	8006cfa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b03      	cmp	r3, #3
 8006cbc:	d011      	beq.n	8006ce2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cc2:	f043 0204 	orr.w	r2, r3, #4
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cca:	2300      	movs	r3, #0
 8006ccc:	617b      	str	r3, [r7, #20]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	617b      	str	r3, [r7, #20]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	617b      	str	r3, [r7, #20]
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	e00b      	b.n	8006cfa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	613b      	str	r3, [r7, #16]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	613b      	str	r3, [r7, #16]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	613b      	str	r3, [r7, #16]
 8006cf6:	693b      	ldr	r3, [r7, #16]
        return;
 8006cf8:	e082      	b.n	8006e00 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	095b      	lsrs	r3, r3, #5
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d014      	beq.n	8006d30 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d0a:	f043 0201 	orr.w	r2, r3, #1
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006d12:	2300      	movs	r3, #0
 8006d14:	60fb      	str	r3, [r7, #12]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	0a1b      	lsrs	r3, r3, #8
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00c      	beq.n	8006d56 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d40:	f043 0208 	orr.w	r2, r3, #8
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006d48:	2300      	movs	r3, #0
 8006d4a:	60bb      	str	r3, [r7, #8]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	60bb      	str	r3, [r7, #8]
 8006d54:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d04f      	beq.n	8006dfe <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685a      	ldr	r2, [r3, #4]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006d6c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d104      	bne.n	8006d8a <HAL_SPI_IRQHandler+0x17e>
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d034      	beq.n	8006df4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 0203 	bic.w	r2, r2, #3
 8006d98:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d011      	beq.n	8006dc6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006da6:	4a18      	ldr	r2, [pc, #96]	@ (8006e08 <HAL_SPI_IRQHandler+0x1fc>)
 8006da8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7fe fda5 	bl	80058fe <HAL_DMA_Abort_IT>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d005      	beq.n	8006dc6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dbe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d016      	beq.n	8006dfc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dd2:	4a0d      	ldr	r2, [pc, #52]	@ (8006e08 <HAL_SPI_IRQHandler+0x1fc>)
 8006dd4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7fe fd8f 	bl	80058fe <HAL_DMA_Abort_IT>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00a      	beq.n	8006dfc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006df2:	e003      	b.n	8006dfc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f809 	bl	8006e0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006dfa:	e000      	b.n	8006dfe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006dfc:	bf00      	nop
    return;
 8006dfe:	bf00      	nop
  }
}
 8006e00:	3720      	adds	r7, #32
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	08006e21 	.word	0x08006e21

08006e0c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e2c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f7ff ffe6 	bl	8006e0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e40:	bf00      	nop
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	603b      	str	r3, [r7, #0]
 8006e54:	4613      	mov	r3, r2
 8006e56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e58:	f7fe fba0 	bl	800559c <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e60:	1a9b      	subs	r3, r3, r2
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	4413      	add	r3, r2
 8006e66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e68:	f7fe fb98 	bl	800559c <HAL_GetTick>
 8006e6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e6e:	4b39      	ldr	r3, [pc, #228]	@ (8006f54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	015b      	lsls	r3, r3, #5
 8006e74:	0d1b      	lsrs	r3, r3, #20
 8006e76:	69fa      	ldr	r2, [r7, #28]
 8006e78:	fb02 f303 	mul.w	r3, r2, r3
 8006e7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e7e:	e055      	b.n	8006f2c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e86:	d051      	beq.n	8006f2c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e88:	f7fe fb88 	bl	800559c <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	69fa      	ldr	r2, [r7, #28]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d902      	bls.n	8006e9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d13d      	bne.n	8006f1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	685a      	ldr	r2, [r3, #4]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006eac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006eb6:	d111      	bne.n	8006edc <SPI_WaitFlagStateUntilTimeout+0x94>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ec0:	d004      	beq.n	8006ecc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eca:	d107      	bne.n	8006edc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006eda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ee4:	d10f      	bne.n	8006f06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e018      	b.n	8006f4c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d102      	bne.n	8006f26 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	61fb      	str	r3, [r7, #28]
 8006f24:	e002      	b.n	8006f2c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	689a      	ldr	r2, [r3, #8]
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	4013      	ands	r3, r2
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	bf0c      	ite	eq
 8006f3c:	2301      	moveq	r3, #1
 8006f3e:	2300      	movne	r3, #0
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	461a      	mov	r2, r3
 8006f44:	79fb      	ldrb	r3, [r7, #7]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d19a      	bne.n	8006e80 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3720      	adds	r7, #32
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	2000b924 	.word	0x2000b924

08006f58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b088      	sub	sp, #32
 8006f5c:	af02      	add	r7, sp, #8
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	2102      	movs	r1, #2
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f7ff ff6a 	bl	8006e48 <SPI_WaitFlagStateUntilTimeout>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d007      	beq.n	8006f8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f7e:	f043 0220 	orr.w	r2, r3, #32
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e032      	b.n	8006ff0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ff8 <SPI_EndRxTxTransaction+0xa0>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8006ffc <SPI_EndRxTxTransaction+0xa4>)
 8006f90:	fba2 2303 	umull	r2, r3, r2, r3
 8006f94:	0d5b      	lsrs	r3, r3, #21
 8006f96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006f9a:	fb02 f303 	mul.w	r3, r2, r3
 8006f9e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fa8:	d112      	bne.n	8006fd0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	2180      	movs	r1, #128	@ 0x80
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f7ff ff47 	bl	8006e48 <SPI_WaitFlagStateUntilTimeout>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d016      	beq.n	8006fee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fc4:	f043 0220 	orr.w	r2, r3, #32
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e00f      	b.n	8006ff0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00a      	beq.n	8006fec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fe6:	2b80      	cmp	r3, #128	@ 0x80
 8006fe8:	d0f2      	beq.n	8006fd0 <SPI_EndRxTxTransaction+0x78>
 8006fea:	e000      	b.n	8006fee <SPI_EndRxTxTransaction+0x96>
        break;
 8006fec:	bf00      	nop
  }

  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	2000b924 	.word	0x2000b924
 8006ffc:	165e9f81 	.word	0x165e9f81

08007000 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e042      	b.n	8007098 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	d106      	bne.n	800702c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7fe f918 	bl	800525c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2224      	movs	r2, #36	@ 0x24
 8007030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68da      	ldr	r2, [r3, #12]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007042:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fdd3 	bl	8007bf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	691a      	ldr	r2, [r3, #16]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007058:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	695a      	ldr	r2, [r3, #20]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007068:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68da      	ldr	r2, [r3, #12]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007078:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2220      	movs	r2, #32
 8007084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2220      	movs	r2, #32
 800708c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b08a      	sub	sp, #40	@ 0x28
 80070a4:	af02      	add	r7, sp, #8
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	603b      	str	r3, [r7, #0]
 80070ac:	4613      	mov	r3, r2
 80070ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070b0:	2300      	movs	r3, #0
 80070b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b20      	cmp	r3, #32
 80070be:	d175      	bne.n	80071ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d002      	beq.n	80070cc <HAL_UART_Transmit+0x2c>
 80070c6:	88fb      	ldrh	r3, [r7, #6]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e06e      	b.n	80071ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2221      	movs	r2, #33	@ 0x21
 80070da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070de:	f7fe fa5d 	bl	800559c <HAL_GetTick>
 80070e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	88fa      	ldrh	r2, [r7, #6]
 80070e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	88fa      	ldrh	r2, [r7, #6]
 80070ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070f8:	d108      	bne.n	800710c <HAL_UART_Transmit+0x6c>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d104      	bne.n	800710c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007102:	2300      	movs	r3, #0
 8007104:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	61bb      	str	r3, [r7, #24]
 800710a:	e003      	b.n	8007114 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007110:	2300      	movs	r3, #0
 8007112:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007114:	e02e      	b.n	8007174 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2200      	movs	r2, #0
 800711e:	2180      	movs	r1, #128	@ 0x80
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 fb37 	bl	8007794 <UART_WaitOnFlagUntilTimeout>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d005      	beq.n	8007138 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2220      	movs	r2, #32
 8007130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e03a      	b.n	80071ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10b      	bne.n	8007156 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	881b      	ldrh	r3, [r3, #0]
 8007142:	461a      	mov	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800714c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	3302      	adds	r3, #2
 8007152:	61bb      	str	r3, [r7, #24]
 8007154:	e007      	b.n	8007166 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	781a      	ldrb	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	3301      	adds	r3, #1
 8007164:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800716a:	b29b      	uxth	r3, r3
 800716c:	3b01      	subs	r3, #1
 800716e:	b29a      	uxth	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007178:	b29b      	uxth	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1cb      	bne.n	8007116 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2200      	movs	r2, #0
 8007186:	2140      	movs	r1, #64	@ 0x40
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 fb03 	bl	8007794 <UART_WaitOnFlagUntilTimeout>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d005      	beq.n	80071a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2220      	movs	r2, #32
 8007198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e006      	b.n	80071ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	e000      	b.n	80071ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80071ac:	2302      	movs	r3, #2
  }
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3720      	adds	r7, #32
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b084      	sub	sp, #16
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	60f8      	str	r0, [r7, #12]
 80071be:	60b9      	str	r1, [r7, #8]
 80071c0:	4613      	mov	r3, r2
 80071c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b20      	cmp	r3, #32
 80071ce:	d112      	bne.n	80071f6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <HAL_UART_Receive_IT+0x26>
 80071d6:	88fb      	ldrh	r3, [r7, #6]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e00b      	b.n	80071f8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80071e6:	88fb      	ldrh	r3, [r7, #6]
 80071e8:	461a      	mov	r2, r3
 80071ea:	68b9      	ldr	r1, [r7, #8]
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 fb2a 	bl	8007846 <UART_Start_Receive_IT>
 80071f2:	4603      	mov	r3, r0
 80071f4:	e000      	b.n	80071f8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80071f6:	2302      	movs	r3, #2
  }
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b0ba      	sub	sp, #232	@ 0xe8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007226:	2300      	movs	r3, #0
 8007228:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800722c:	2300      	movs	r3, #0
 800722e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007236:	f003 030f 	and.w	r3, r3, #15
 800723a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800723e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10f      	bne.n	8007266 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800724a:	f003 0320 	and.w	r3, r3, #32
 800724e:	2b00      	cmp	r3, #0
 8007250:	d009      	beq.n	8007266 <HAL_UART_IRQHandler+0x66>
 8007252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fc07 	bl	8007a72 <UART_Receive_IT>
      return;
 8007264:	e273      	b.n	800774e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007266:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800726a:	2b00      	cmp	r3, #0
 800726c:	f000 80de 	beq.w	800742c <HAL_UART_IRQHandler+0x22c>
 8007270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007274:	f003 0301 	and.w	r3, r3, #1
 8007278:	2b00      	cmp	r3, #0
 800727a:	d106      	bne.n	800728a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800727c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007280:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 80d1 	beq.w	800742c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800728a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00b      	beq.n	80072ae <HAL_UART_IRQHandler+0xae>
 8007296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800729a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d005      	beq.n	80072ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072a6:	f043 0201 	orr.w	r2, r3, #1
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072b2:	f003 0304 	and.w	r3, r3, #4
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00b      	beq.n	80072d2 <HAL_UART_IRQHandler+0xd2>
 80072ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d005      	beq.n	80072d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ca:	f043 0202 	orr.w	r2, r3, #2
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00b      	beq.n	80072f6 <HAL_UART_IRQHandler+0xf6>
 80072de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d005      	beq.n	80072f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ee:	f043 0204 	orr.w	r2, r3, #4
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80072f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072fa:	f003 0308 	and.w	r3, r3, #8
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d011      	beq.n	8007326 <HAL_UART_IRQHandler+0x126>
 8007302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007306:	f003 0320 	and.w	r3, r3, #32
 800730a:	2b00      	cmp	r3, #0
 800730c:	d105      	bne.n	800731a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800730e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	2b00      	cmp	r3, #0
 8007318:	d005      	beq.n	8007326 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800731e:	f043 0208 	orr.w	r2, r3, #8
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 820a 	beq.w	8007744 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007334:	f003 0320 	and.w	r3, r3, #32
 8007338:	2b00      	cmp	r3, #0
 800733a:	d008      	beq.n	800734e <HAL_UART_IRQHandler+0x14e>
 800733c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007340:	f003 0320 	and.w	r3, r3, #32
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fb92 	bl	8007a72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007358:	2b40      	cmp	r3, #64	@ 0x40
 800735a:	bf0c      	ite	eq
 800735c:	2301      	moveq	r3, #1
 800735e:	2300      	movne	r3, #0
 8007360:	b2db      	uxtb	r3, r3
 8007362:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800736a:	f003 0308 	and.w	r3, r3, #8
 800736e:	2b00      	cmp	r3, #0
 8007370:	d103      	bne.n	800737a <HAL_UART_IRQHandler+0x17a>
 8007372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007376:	2b00      	cmp	r3, #0
 8007378:	d04f      	beq.n	800741a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fa9d 	bl	80078ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800738a:	2b40      	cmp	r3, #64	@ 0x40
 800738c:	d141      	bne.n	8007412 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3314      	adds	r3, #20
 8007394:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007398:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800739c:	e853 3f00 	ldrex	r3, [r3]
 80073a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80073a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3314      	adds	r3, #20
 80073b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80073ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80073be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80073c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80073ca:	e841 2300 	strex	r3, r2, [r1]
 80073ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80073d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1d9      	bne.n	800738e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d013      	beq.n	800740a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073e6:	4a8a      	ldr	r2, [pc, #552]	@ (8007610 <HAL_UART_IRQHandler+0x410>)
 80073e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fe fa85 	bl	80058fe <HAL_DMA_Abort_IT>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d016      	beq.n	8007428 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007404:	4610      	mov	r0, r2
 8007406:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007408:	e00e      	b.n	8007428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f9ac 	bl	8007768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007410:	e00a      	b.n	8007428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f9a8 	bl	8007768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007418:	e006      	b.n	8007428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f9a4 	bl	8007768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007426:	e18d      	b.n	8007744 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007428:	bf00      	nop
    return;
 800742a:	e18b      	b.n	8007744 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007430:	2b01      	cmp	r3, #1
 8007432:	f040 8167 	bne.w	8007704 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800743a:	f003 0310 	and.w	r3, r3, #16
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 8160 	beq.w	8007704 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007448:	f003 0310 	and.w	r3, r3, #16
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 8159 	beq.w	8007704 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007452:	2300      	movs	r3, #0
 8007454:	60bb      	str	r3, [r7, #8]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	60bb      	str	r3, [r7, #8]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	60bb      	str	r3, [r7, #8]
 8007466:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007472:	2b40      	cmp	r3, #64	@ 0x40
 8007474:	f040 80ce 	bne.w	8007614 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007484:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007488:	2b00      	cmp	r3, #0
 800748a:	f000 80a9 	beq.w	80075e0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007492:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007496:	429a      	cmp	r2, r3
 8007498:	f080 80a2 	bcs.w	80075e0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80074a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074ae:	f000 8088 	beq.w	80075c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	330c      	adds	r3, #12
 80074b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80074c0:	e853 3f00 	ldrex	r3, [r3]
 80074c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80074c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80074cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	330c      	adds	r3, #12
 80074da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80074de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80074e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80074ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80074ee:	e841 2300 	strex	r3, r2, [r1]
 80074f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80074f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1d9      	bne.n	80074b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	3314      	adds	r3, #20
 8007504:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007506:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007508:	e853 3f00 	ldrex	r3, [r3]
 800750c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800750e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007510:	f023 0301 	bic.w	r3, r3, #1
 8007514:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3314      	adds	r3, #20
 800751e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007522:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007526:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007528:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800752a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800752e:	e841 2300 	strex	r3, r2, [r1]
 8007532:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007534:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1e1      	bne.n	80074fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	3314      	adds	r3, #20
 8007540:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007542:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007544:	e853 3f00 	ldrex	r3, [r3]
 8007548:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800754a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800754c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007550:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	3314      	adds	r3, #20
 800755a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800755e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007560:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007562:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007564:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007566:	e841 2300 	strex	r3, r2, [r1]
 800756a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800756c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1e3      	bne.n	800753a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2220      	movs	r2, #32
 8007576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	330c      	adds	r3, #12
 8007586:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800758a:	e853 3f00 	ldrex	r3, [r3]
 800758e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007590:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007592:	f023 0310 	bic.w	r3, r3, #16
 8007596:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	330c      	adds	r3, #12
 80075a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80075a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80075a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80075ac:	e841 2300 	strex	r3, r2, [r1]
 80075b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80075b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1e3      	bne.n	8007580 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075bc:	4618      	mov	r0, r3
 80075be:	f7fe f92e 	bl	800581e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2202      	movs	r2, #2
 80075c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 f8cf 	bl	800777c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80075de:	e0b3      	b.n	8007748 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80075e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075e8:	429a      	cmp	r2, r3
 80075ea:	f040 80ad 	bne.w	8007748 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075f2:	69db      	ldr	r3, [r3, #28]
 80075f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075f8:	f040 80a6 	bne.w	8007748 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007606:	4619      	mov	r1, r3
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f8b7 	bl	800777c <HAL_UARTEx_RxEventCallback>
      return;
 800760e:	e09b      	b.n	8007748 <HAL_UART_IRQHandler+0x548>
 8007610:	08007981 	.word	0x08007981
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800761c:	b29b      	uxth	r3, r3
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007628:	b29b      	uxth	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 808e 	beq.w	800774c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007630:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 8089 	beq.w	800774c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	330c      	adds	r3, #12
 8007640:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007644:	e853 3f00 	ldrex	r3, [r3]
 8007648:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800764a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800764c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007650:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	330c      	adds	r3, #12
 800765a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800765e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007660:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007662:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007664:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007666:	e841 2300 	strex	r3, r2, [r1]
 800766a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800766c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1e3      	bne.n	800763a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3314      	adds	r3, #20
 8007678:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767c:	e853 3f00 	ldrex	r3, [r3]
 8007680:	623b      	str	r3, [r7, #32]
   return(result);
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	f023 0301 	bic.w	r3, r3, #1
 8007688:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	3314      	adds	r3, #20
 8007692:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007696:	633a      	str	r2, [r7, #48]	@ 0x30
 8007698:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800769c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800769e:	e841 2300 	strex	r3, r2, [r1]
 80076a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1e3      	bne.n	8007672 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2220      	movs	r2, #32
 80076ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	330c      	adds	r3, #12
 80076be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	e853 3f00 	ldrex	r3, [r3]
 80076c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f023 0310 	bic.w	r3, r3, #16
 80076ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	330c      	adds	r3, #12
 80076d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80076dc:	61fa      	str	r2, [r7, #28]
 80076de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e0:	69b9      	ldr	r1, [r7, #24]
 80076e2:	69fa      	ldr	r2, [r7, #28]
 80076e4:	e841 2300 	strex	r3, r2, [r1]
 80076e8:	617b      	str	r3, [r7, #20]
   return(result);
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e3      	bne.n	80076b8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80076fa:	4619      	mov	r1, r3
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f83d 	bl	800777c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007702:	e023      	b.n	800774c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800770c:	2b00      	cmp	r3, #0
 800770e:	d009      	beq.n	8007724 <HAL_UART_IRQHandler+0x524>
 8007710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f940 	bl	80079a2 <UART_Transmit_IT>
    return;
 8007722:	e014      	b.n	800774e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00e      	beq.n	800774e <HAL_UART_IRQHandler+0x54e>
 8007730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007738:	2b00      	cmp	r3, #0
 800773a:	d008      	beq.n	800774e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f980 	bl	8007a42 <UART_EndTransmit_IT>
    return;
 8007742:	e004      	b.n	800774e <HAL_UART_IRQHandler+0x54e>
    return;
 8007744:	bf00      	nop
 8007746:	e002      	b.n	800774e <HAL_UART_IRQHandler+0x54e>
      return;
 8007748:	bf00      	nop
 800774a:	e000      	b.n	800774e <HAL_UART_IRQHandler+0x54e>
      return;
 800774c:	bf00      	nop
  }
}
 800774e:	37e8      	adds	r7, #232	@ 0xe8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	460b      	mov	r3, r1
 8007786:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	603b      	str	r3, [r7, #0]
 80077a0:	4613      	mov	r3, r2
 80077a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077a4:	e03b      	b.n	800781e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ac:	d037      	beq.n	800781e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077ae:	f7fd fef5 	bl	800559c <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	6a3a      	ldr	r2, [r7, #32]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d302      	bcc.n	80077c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80077be:	6a3b      	ldr	r3, [r7, #32]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e03a      	b.n	800783e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	f003 0304 	and.w	r3, r3, #4
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d023      	beq.n	800781e <UART_WaitOnFlagUntilTimeout+0x8a>
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	2b80      	cmp	r3, #128	@ 0x80
 80077da:	d020      	beq.n	800781e <UART_WaitOnFlagUntilTimeout+0x8a>
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b40      	cmp	r3, #64	@ 0x40
 80077e0:	d01d      	beq.n	800781e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0308 	and.w	r3, r3, #8
 80077ec:	2b08      	cmp	r3, #8
 80077ee:	d116      	bne.n	800781e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80077f0:	2300      	movs	r3, #0
 80077f2:	617b      	str	r3, [r7, #20]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	617b      	str	r3, [r7, #20]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	617b      	str	r3, [r7, #20]
 8007804:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f000 f857 	bl	80078ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2208      	movs	r2, #8
 8007810:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e00f      	b.n	800783e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	4013      	ands	r3, r2
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	429a      	cmp	r2, r3
 800782c:	bf0c      	ite	eq
 800782e:	2301      	moveq	r3, #1
 8007830:	2300      	movne	r3, #0
 8007832:	b2db      	uxtb	r3, r3
 8007834:	461a      	mov	r2, r3
 8007836:	79fb      	ldrb	r3, [r7, #7]
 8007838:	429a      	cmp	r2, r3
 800783a:	d0b4      	beq.n	80077a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3718      	adds	r7, #24
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007846:	b480      	push	{r7}
 8007848:	b085      	sub	sp, #20
 800784a:	af00      	add	r7, sp, #0
 800784c:	60f8      	str	r0, [r7, #12]
 800784e:	60b9      	str	r1, [r7, #8]
 8007850:	4613      	mov	r3, r2
 8007852:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	88fa      	ldrh	r2, [r7, #6]
 800785e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	88fa      	ldrh	r2, [r7, #6]
 8007864:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2222      	movs	r2, #34	@ 0x22
 8007870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d007      	beq.n	800788c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68da      	ldr	r2, [r3, #12]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800788a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	695a      	ldr	r2, [r3, #20]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f042 0201 	orr.w	r2, r2, #1
 800789a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68da      	ldr	r2, [r3, #12]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f042 0220 	orr.w	r2, r2, #32
 80078aa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b095      	sub	sp, #84	@ 0x54
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	330c      	adds	r3, #12
 80078c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	330c      	adds	r3, #12
 80078e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80078e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80078e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80078e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078ea:	e841 2300 	strex	r3, r2, [r1]
 80078ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1e5      	bne.n	80078c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3314      	adds	r3, #20
 80078fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	e853 3f00 	ldrex	r3, [r3]
 8007904:	61fb      	str	r3, [r7, #28]
   return(result);
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	f023 0301 	bic.w	r3, r3, #1
 800790c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	3314      	adds	r3, #20
 8007914:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007916:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007918:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800791c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800791e:	e841 2300 	strex	r3, r2, [r1]
 8007922:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1e5      	bne.n	80078f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800792e:	2b01      	cmp	r3, #1
 8007930:	d119      	bne.n	8007966 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	330c      	adds	r3, #12
 8007938:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	e853 3f00 	ldrex	r3, [r3]
 8007940:	60bb      	str	r3, [r7, #8]
   return(result);
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	f023 0310 	bic.w	r3, r3, #16
 8007948:	647b      	str	r3, [r7, #68]	@ 0x44
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	330c      	adds	r3, #12
 8007950:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007952:	61ba      	str	r2, [r7, #24]
 8007954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007956:	6979      	ldr	r1, [r7, #20]
 8007958:	69ba      	ldr	r2, [r7, #24]
 800795a:	e841 2300 	strex	r3, r2, [r1]
 800795e:	613b      	str	r3, [r7, #16]
   return(result);
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1e5      	bne.n	8007932 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2220      	movs	r2, #32
 800796a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007974:	bf00      	nop
 8007976:	3754      	adds	r7, #84	@ 0x54
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f7ff fee7 	bl	8007768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800799a:	bf00      	nop
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b085      	sub	sp, #20
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b21      	cmp	r3, #33	@ 0x21
 80079b4:	d13e      	bne.n	8007a34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079be:	d114      	bne.n	80079ea <UART_Transmit_IT+0x48>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d110      	bne.n	80079ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a1b      	ldr	r3, [r3, #32]
 80079cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	1c9a      	adds	r2, r3, #2
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	621a      	str	r2, [r3, #32]
 80079e8:	e008      	b.n	80079fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	1c59      	adds	r1, r3, #1
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	6211      	str	r1, [r2, #32]
 80079f4:	781a      	ldrb	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	3b01      	subs	r3, #1
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	4619      	mov	r1, r3
 8007a0a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10f      	bne.n	8007a30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68da      	ldr	r2, [r3, #12]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68da      	ldr	r2, [r3, #12]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	e000      	b.n	8007a36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a34:	2302      	movs	r3, #2
  }
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b082      	sub	sp, #8
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7ff fe76 	bl	8007754 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b08c      	sub	sp, #48	@ 0x30
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b22      	cmp	r3, #34	@ 0x22
 8007a8c:	f040 80aa 	bne.w	8007be4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a98:	d115      	bne.n	8007ac6 <UART_Receive_IT+0x54>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d111      	bne.n	8007ac6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007abe:	1c9a      	adds	r2, r3, #2
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	629a      	str	r2, [r3, #40]	@ 0x28
 8007ac4:	e024      	b.n	8007b10 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ad4:	d007      	beq.n	8007ae6 <UART_Receive_IT+0x74>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10a      	bne.n	8007af4 <UART_Receive_IT+0x82>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d106      	bne.n	8007af4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007af0:	701a      	strb	r2, [r3, #0]
 8007af2:	e008      	b.n	8007b06 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	3b01      	subs	r3, #1
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d15d      	bne.n	8007be0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68da      	ldr	r2, [r3, #12]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0220 	bic.w	r2, r2, #32
 8007b32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68da      	ldr	r2, [r3, #12]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007b42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	695a      	ldr	r2, [r3, #20]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 0201 	bic.w	r2, r2, #1
 8007b52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2220      	movs	r2, #32
 8007b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d135      	bne.n	8007bd6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	330c      	adds	r3, #12
 8007b76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	e853 3f00 	ldrex	r3, [r3]
 8007b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f023 0310 	bic.w	r3, r3, #16
 8007b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	330c      	adds	r3, #12
 8007b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b90:	623a      	str	r2, [r7, #32]
 8007b92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b94:	69f9      	ldr	r1, [r7, #28]
 8007b96:	6a3a      	ldr	r2, [r7, #32]
 8007b98:	e841 2300 	strex	r3, r2, [r1]
 8007b9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1e5      	bne.n	8007b70 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0310 	and.w	r3, r3, #16
 8007bae:	2b10      	cmp	r3, #16
 8007bb0:	d10a      	bne.n	8007bc8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	60fb      	str	r3, [r7, #12]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	60fb      	str	r3, [r7, #12]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	60fb      	str	r3, [r7, #12]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007bcc:	4619      	mov	r1, r3
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7ff fdd4 	bl	800777c <HAL_UARTEx_RxEventCallback>
 8007bd4:	e002      	b.n	8007bdc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f7fd fa80 	bl	80050dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	e002      	b.n	8007be6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	e000      	b.n	8007be6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007be4:	2302      	movs	r3, #2
  }
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3730      	adds	r7, #48	@ 0x30
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
	...

08007bf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bf4:	b0c0      	sub	sp, #256	@ 0x100
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c0c:	68d9      	ldr	r1, [r3, #12]
 8007c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	ea40 0301 	orr.w	r3, r0, r1
 8007c18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c1e:	689a      	ldr	r2, [r3, #8]
 8007c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	431a      	orrs	r2, r3
 8007c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007c48:	f021 010c 	bic.w	r1, r1, #12
 8007c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007c56:	430b      	orrs	r3, r1
 8007c58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c6a:	6999      	ldr	r1, [r3, #24]
 8007c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	ea40 0301 	orr.w	r3, r0, r1
 8007c76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	4b8f      	ldr	r3, [pc, #572]	@ (8007ebc <UART_SetConfig+0x2cc>)
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d005      	beq.n	8007c90 <UART_SetConfig+0xa0>
 8007c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	4b8d      	ldr	r3, [pc, #564]	@ (8007ec0 <UART_SetConfig+0x2d0>)
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d104      	bne.n	8007c9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c90:	f7fe f90c 	bl	8005eac <HAL_RCC_GetPCLK2Freq>
 8007c94:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007c98:	e003      	b.n	8007ca2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c9a:	f7fe f8f3 	bl	8005e84 <HAL_RCC_GetPCLK1Freq>
 8007c9e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ca6:	69db      	ldr	r3, [r3, #28]
 8007ca8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cac:	f040 810c 	bne.w	8007ec8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007cba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007cbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007cc2:	4622      	mov	r2, r4
 8007cc4:	462b      	mov	r3, r5
 8007cc6:	1891      	adds	r1, r2, r2
 8007cc8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007cca:	415b      	adcs	r3, r3
 8007ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007cd2:	4621      	mov	r1, r4
 8007cd4:	eb12 0801 	adds.w	r8, r2, r1
 8007cd8:	4629      	mov	r1, r5
 8007cda:	eb43 0901 	adc.w	r9, r3, r1
 8007cde:	f04f 0200 	mov.w	r2, #0
 8007ce2:	f04f 0300 	mov.w	r3, #0
 8007ce6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007cea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007cee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007cf2:	4690      	mov	r8, r2
 8007cf4:	4699      	mov	r9, r3
 8007cf6:	4623      	mov	r3, r4
 8007cf8:	eb18 0303 	adds.w	r3, r8, r3
 8007cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d00:	462b      	mov	r3, r5
 8007d02:	eb49 0303 	adc.w	r3, r9, r3
 8007d06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007d1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007d1e:	460b      	mov	r3, r1
 8007d20:	18db      	adds	r3, r3, r3
 8007d22:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d24:	4613      	mov	r3, r2
 8007d26:	eb42 0303 	adc.w	r3, r2, r3
 8007d2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007d30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007d34:	f7f8 fad4 	bl	80002e0 <__aeabi_uldivmod>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	4b61      	ldr	r3, [pc, #388]	@ (8007ec4 <UART_SetConfig+0x2d4>)
 8007d3e:	fba3 2302 	umull	r2, r3, r3, r2
 8007d42:	095b      	lsrs	r3, r3, #5
 8007d44:	011c      	lsls	r4, r3, #4
 8007d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007d54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007d58:	4642      	mov	r2, r8
 8007d5a:	464b      	mov	r3, r9
 8007d5c:	1891      	adds	r1, r2, r2
 8007d5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007d60:	415b      	adcs	r3, r3
 8007d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007d68:	4641      	mov	r1, r8
 8007d6a:	eb12 0a01 	adds.w	sl, r2, r1
 8007d6e:	4649      	mov	r1, r9
 8007d70:	eb43 0b01 	adc.w	fp, r3, r1
 8007d74:	f04f 0200 	mov.w	r2, #0
 8007d78:	f04f 0300 	mov.w	r3, #0
 8007d7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d88:	4692      	mov	sl, r2
 8007d8a:	469b      	mov	fp, r3
 8007d8c:	4643      	mov	r3, r8
 8007d8e:	eb1a 0303 	adds.w	r3, sl, r3
 8007d92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d96:	464b      	mov	r3, r9
 8007d98:	eb4b 0303 	adc.w	r3, fp, r3
 8007d9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007dac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007db0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007db4:	460b      	mov	r3, r1
 8007db6:	18db      	adds	r3, r3, r3
 8007db8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dba:	4613      	mov	r3, r2
 8007dbc:	eb42 0303 	adc.w	r3, r2, r3
 8007dc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007dc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007dca:	f7f8 fa89 	bl	80002e0 <__aeabi_uldivmod>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4611      	mov	r1, r2
 8007dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8007ec4 <UART_SetConfig+0x2d4>)
 8007dd6:	fba3 2301 	umull	r2, r3, r3, r1
 8007dda:	095b      	lsrs	r3, r3, #5
 8007ddc:	2264      	movs	r2, #100	@ 0x64
 8007dde:	fb02 f303 	mul.w	r3, r2, r3
 8007de2:	1acb      	subs	r3, r1, r3
 8007de4:	00db      	lsls	r3, r3, #3
 8007de6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007dea:	4b36      	ldr	r3, [pc, #216]	@ (8007ec4 <UART_SetConfig+0x2d4>)
 8007dec:	fba3 2302 	umull	r2, r3, r3, r2
 8007df0:	095b      	lsrs	r3, r3, #5
 8007df2:	005b      	lsls	r3, r3, #1
 8007df4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007df8:	441c      	add	r4, r3
 8007dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e04:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007e08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007e0c:	4642      	mov	r2, r8
 8007e0e:	464b      	mov	r3, r9
 8007e10:	1891      	adds	r1, r2, r2
 8007e12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007e14:	415b      	adcs	r3, r3
 8007e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007e1c:	4641      	mov	r1, r8
 8007e1e:	1851      	adds	r1, r2, r1
 8007e20:	6339      	str	r1, [r7, #48]	@ 0x30
 8007e22:	4649      	mov	r1, r9
 8007e24:	414b      	adcs	r3, r1
 8007e26:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e28:	f04f 0200 	mov.w	r2, #0
 8007e2c:	f04f 0300 	mov.w	r3, #0
 8007e30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007e34:	4659      	mov	r1, fp
 8007e36:	00cb      	lsls	r3, r1, #3
 8007e38:	4651      	mov	r1, sl
 8007e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e3e:	4651      	mov	r1, sl
 8007e40:	00ca      	lsls	r2, r1, #3
 8007e42:	4610      	mov	r0, r2
 8007e44:	4619      	mov	r1, r3
 8007e46:	4603      	mov	r3, r0
 8007e48:	4642      	mov	r2, r8
 8007e4a:	189b      	adds	r3, r3, r2
 8007e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e50:	464b      	mov	r3, r9
 8007e52:	460a      	mov	r2, r1
 8007e54:	eb42 0303 	adc.w	r3, r2, r3
 8007e58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007e68:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007e6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007e70:	460b      	mov	r3, r1
 8007e72:	18db      	adds	r3, r3, r3
 8007e74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e76:	4613      	mov	r3, r2
 8007e78:	eb42 0303 	adc.w	r3, r2, r3
 8007e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007e82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007e86:	f7f8 fa2b 	bl	80002e0 <__aeabi_uldivmod>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ec4 <UART_SetConfig+0x2d4>)
 8007e90:	fba3 1302 	umull	r1, r3, r3, r2
 8007e94:	095b      	lsrs	r3, r3, #5
 8007e96:	2164      	movs	r1, #100	@ 0x64
 8007e98:	fb01 f303 	mul.w	r3, r1, r3
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	00db      	lsls	r3, r3, #3
 8007ea0:	3332      	adds	r3, #50	@ 0x32
 8007ea2:	4a08      	ldr	r2, [pc, #32]	@ (8007ec4 <UART_SetConfig+0x2d4>)
 8007ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea8:	095b      	lsrs	r3, r3, #5
 8007eaa:	f003 0207 	and.w	r2, r3, #7
 8007eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4422      	add	r2, r4
 8007eb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007eb8:	e106      	b.n	80080c8 <UART_SetConfig+0x4d8>
 8007eba:	bf00      	nop
 8007ebc:	40011000 	.word	0x40011000
 8007ec0:	40011400 	.word	0x40011400
 8007ec4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007ed2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007ed6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007eda:	4642      	mov	r2, r8
 8007edc:	464b      	mov	r3, r9
 8007ede:	1891      	adds	r1, r2, r2
 8007ee0:	6239      	str	r1, [r7, #32]
 8007ee2:	415b      	adcs	r3, r3
 8007ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ee6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007eea:	4641      	mov	r1, r8
 8007eec:	1854      	adds	r4, r2, r1
 8007eee:	4649      	mov	r1, r9
 8007ef0:	eb43 0501 	adc.w	r5, r3, r1
 8007ef4:	f04f 0200 	mov.w	r2, #0
 8007ef8:	f04f 0300 	mov.w	r3, #0
 8007efc:	00eb      	lsls	r3, r5, #3
 8007efe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f02:	00e2      	lsls	r2, r4, #3
 8007f04:	4614      	mov	r4, r2
 8007f06:	461d      	mov	r5, r3
 8007f08:	4643      	mov	r3, r8
 8007f0a:	18e3      	adds	r3, r4, r3
 8007f0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f10:	464b      	mov	r3, r9
 8007f12:	eb45 0303 	adc.w	r3, r5, r3
 8007f16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f2a:	f04f 0200 	mov.w	r2, #0
 8007f2e:	f04f 0300 	mov.w	r3, #0
 8007f32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007f36:	4629      	mov	r1, r5
 8007f38:	008b      	lsls	r3, r1, #2
 8007f3a:	4621      	mov	r1, r4
 8007f3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f40:	4621      	mov	r1, r4
 8007f42:	008a      	lsls	r2, r1, #2
 8007f44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007f48:	f7f8 f9ca 	bl	80002e0 <__aeabi_uldivmod>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4b60      	ldr	r3, [pc, #384]	@ (80080d4 <UART_SetConfig+0x4e4>)
 8007f52:	fba3 2302 	umull	r2, r3, r3, r2
 8007f56:	095b      	lsrs	r3, r3, #5
 8007f58:	011c      	lsls	r4, r3, #4
 8007f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007f68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007f6c:	4642      	mov	r2, r8
 8007f6e:	464b      	mov	r3, r9
 8007f70:	1891      	adds	r1, r2, r2
 8007f72:	61b9      	str	r1, [r7, #24]
 8007f74:	415b      	adcs	r3, r3
 8007f76:	61fb      	str	r3, [r7, #28]
 8007f78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f7c:	4641      	mov	r1, r8
 8007f7e:	1851      	adds	r1, r2, r1
 8007f80:	6139      	str	r1, [r7, #16]
 8007f82:	4649      	mov	r1, r9
 8007f84:	414b      	adcs	r3, r1
 8007f86:	617b      	str	r3, [r7, #20]
 8007f88:	f04f 0200 	mov.w	r2, #0
 8007f8c:	f04f 0300 	mov.w	r3, #0
 8007f90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f94:	4659      	mov	r1, fp
 8007f96:	00cb      	lsls	r3, r1, #3
 8007f98:	4651      	mov	r1, sl
 8007f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f9e:	4651      	mov	r1, sl
 8007fa0:	00ca      	lsls	r2, r1, #3
 8007fa2:	4610      	mov	r0, r2
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	4642      	mov	r2, r8
 8007faa:	189b      	adds	r3, r3, r2
 8007fac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007fb0:	464b      	mov	r3, r9
 8007fb2:	460a      	mov	r2, r1
 8007fb4:	eb42 0303 	adc.w	r3, r2, r3
 8007fb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007fc6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007fc8:	f04f 0200 	mov.w	r2, #0
 8007fcc:	f04f 0300 	mov.w	r3, #0
 8007fd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007fd4:	4649      	mov	r1, r9
 8007fd6:	008b      	lsls	r3, r1, #2
 8007fd8:	4641      	mov	r1, r8
 8007fda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fde:	4641      	mov	r1, r8
 8007fe0:	008a      	lsls	r2, r1, #2
 8007fe2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007fe6:	f7f8 f97b 	bl	80002e0 <__aeabi_uldivmod>
 8007fea:	4602      	mov	r2, r0
 8007fec:	460b      	mov	r3, r1
 8007fee:	4611      	mov	r1, r2
 8007ff0:	4b38      	ldr	r3, [pc, #224]	@ (80080d4 <UART_SetConfig+0x4e4>)
 8007ff2:	fba3 2301 	umull	r2, r3, r3, r1
 8007ff6:	095b      	lsrs	r3, r3, #5
 8007ff8:	2264      	movs	r2, #100	@ 0x64
 8007ffa:	fb02 f303 	mul.w	r3, r2, r3
 8007ffe:	1acb      	subs	r3, r1, r3
 8008000:	011b      	lsls	r3, r3, #4
 8008002:	3332      	adds	r3, #50	@ 0x32
 8008004:	4a33      	ldr	r2, [pc, #204]	@ (80080d4 <UART_SetConfig+0x4e4>)
 8008006:	fba2 2303 	umull	r2, r3, r2, r3
 800800a:	095b      	lsrs	r3, r3, #5
 800800c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008010:	441c      	add	r4, r3
 8008012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008016:	2200      	movs	r2, #0
 8008018:	673b      	str	r3, [r7, #112]	@ 0x70
 800801a:	677a      	str	r2, [r7, #116]	@ 0x74
 800801c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008020:	4642      	mov	r2, r8
 8008022:	464b      	mov	r3, r9
 8008024:	1891      	adds	r1, r2, r2
 8008026:	60b9      	str	r1, [r7, #8]
 8008028:	415b      	adcs	r3, r3
 800802a:	60fb      	str	r3, [r7, #12]
 800802c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008030:	4641      	mov	r1, r8
 8008032:	1851      	adds	r1, r2, r1
 8008034:	6039      	str	r1, [r7, #0]
 8008036:	4649      	mov	r1, r9
 8008038:	414b      	adcs	r3, r1
 800803a:	607b      	str	r3, [r7, #4]
 800803c:	f04f 0200 	mov.w	r2, #0
 8008040:	f04f 0300 	mov.w	r3, #0
 8008044:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008048:	4659      	mov	r1, fp
 800804a:	00cb      	lsls	r3, r1, #3
 800804c:	4651      	mov	r1, sl
 800804e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008052:	4651      	mov	r1, sl
 8008054:	00ca      	lsls	r2, r1, #3
 8008056:	4610      	mov	r0, r2
 8008058:	4619      	mov	r1, r3
 800805a:	4603      	mov	r3, r0
 800805c:	4642      	mov	r2, r8
 800805e:	189b      	adds	r3, r3, r2
 8008060:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008062:	464b      	mov	r3, r9
 8008064:	460a      	mov	r2, r1
 8008066:	eb42 0303 	adc.w	r3, r2, r3
 800806a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800806c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	663b      	str	r3, [r7, #96]	@ 0x60
 8008076:	667a      	str	r2, [r7, #100]	@ 0x64
 8008078:	f04f 0200 	mov.w	r2, #0
 800807c:	f04f 0300 	mov.w	r3, #0
 8008080:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008084:	4649      	mov	r1, r9
 8008086:	008b      	lsls	r3, r1, #2
 8008088:	4641      	mov	r1, r8
 800808a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800808e:	4641      	mov	r1, r8
 8008090:	008a      	lsls	r2, r1, #2
 8008092:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008096:	f7f8 f923 	bl	80002e0 <__aeabi_uldivmod>
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	4b0d      	ldr	r3, [pc, #52]	@ (80080d4 <UART_SetConfig+0x4e4>)
 80080a0:	fba3 1302 	umull	r1, r3, r3, r2
 80080a4:	095b      	lsrs	r3, r3, #5
 80080a6:	2164      	movs	r1, #100	@ 0x64
 80080a8:	fb01 f303 	mul.w	r3, r1, r3
 80080ac:	1ad3      	subs	r3, r2, r3
 80080ae:	011b      	lsls	r3, r3, #4
 80080b0:	3332      	adds	r3, #50	@ 0x32
 80080b2:	4a08      	ldr	r2, [pc, #32]	@ (80080d4 <UART_SetConfig+0x4e4>)
 80080b4:	fba2 2303 	umull	r2, r3, r2, r3
 80080b8:	095b      	lsrs	r3, r3, #5
 80080ba:	f003 020f 	and.w	r2, r3, #15
 80080be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4422      	add	r2, r4
 80080c6:	609a      	str	r2, [r3, #8]
}
 80080c8:	bf00      	nop
 80080ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80080ce:	46bd      	mov	sp, r7
 80080d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080d4:	51eb851f 	.word	0x51eb851f

080080d8 <atoi>:
 80080d8:	220a      	movs	r2, #10
 80080da:	2100      	movs	r1, #0
 80080dc:	f000 b87a 	b.w	80081d4 <strtol>

080080e0 <_strtol_l.isra.0>:
 80080e0:	2b24      	cmp	r3, #36	@ 0x24
 80080e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080e6:	4686      	mov	lr, r0
 80080e8:	4690      	mov	r8, r2
 80080ea:	d801      	bhi.n	80080f0 <_strtol_l.isra.0+0x10>
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d106      	bne.n	80080fe <_strtol_l.isra.0+0x1e>
 80080f0:	f000 f8c6 	bl	8008280 <__errno>
 80080f4:	2316      	movs	r3, #22
 80080f6:	6003      	str	r3, [r0, #0]
 80080f8:	2000      	movs	r0, #0
 80080fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080fe:	4834      	ldr	r0, [pc, #208]	@ (80081d0 <_strtol_l.isra.0+0xf0>)
 8008100:	460d      	mov	r5, r1
 8008102:	462a      	mov	r2, r5
 8008104:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008108:	5d06      	ldrb	r6, [r0, r4]
 800810a:	f016 0608 	ands.w	r6, r6, #8
 800810e:	d1f8      	bne.n	8008102 <_strtol_l.isra.0+0x22>
 8008110:	2c2d      	cmp	r4, #45	@ 0x2d
 8008112:	d110      	bne.n	8008136 <_strtol_l.isra.0+0x56>
 8008114:	782c      	ldrb	r4, [r5, #0]
 8008116:	2601      	movs	r6, #1
 8008118:	1c95      	adds	r5, r2, #2
 800811a:	f033 0210 	bics.w	r2, r3, #16
 800811e:	d115      	bne.n	800814c <_strtol_l.isra.0+0x6c>
 8008120:	2c30      	cmp	r4, #48	@ 0x30
 8008122:	d10d      	bne.n	8008140 <_strtol_l.isra.0+0x60>
 8008124:	782a      	ldrb	r2, [r5, #0]
 8008126:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800812a:	2a58      	cmp	r2, #88	@ 0x58
 800812c:	d108      	bne.n	8008140 <_strtol_l.isra.0+0x60>
 800812e:	786c      	ldrb	r4, [r5, #1]
 8008130:	3502      	adds	r5, #2
 8008132:	2310      	movs	r3, #16
 8008134:	e00a      	b.n	800814c <_strtol_l.isra.0+0x6c>
 8008136:	2c2b      	cmp	r4, #43	@ 0x2b
 8008138:	bf04      	itt	eq
 800813a:	782c      	ldrbeq	r4, [r5, #0]
 800813c:	1c95      	addeq	r5, r2, #2
 800813e:	e7ec      	b.n	800811a <_strtol_l.isra.0+0x3a>
 8008140:	2b00      	cmp	r3, #0
 8008142:	d1f6      	bne.n	8008132 <_strtol_l.isra.0+0x52>
 8008144:	2c30      	cmp	r4, #48	@ 0x30
 8008146:	bf14      	ite	ne
 8008148:	230a      	movne	r3, #10
 800814a:	2308      	moveq	r3, #8
 800814c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008150:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008154:	2200      	movs	r2, #0
 8008156:	fbbc f9f3 	udiv	r9, ip, r3
 800815a:	4610      	mov	r0, r2
 800815c:	fb03 ca19 	mls	sl, r3, r9, ip
 8008160:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008164:	2f09      	cmp	r7, #9
 8008166:	d80f      	bhi.n	8008188 <_strtol_l.isra.0+0xa8>
 8008168:	463c      	mov	r4, r7
 800816a:	42a3      	cmp	r3, r4
 800816c:	dd1b      	ble.n	80081a6 <_strtol_l.isra.0+0xc6>
 800816e:	1c57      	adds	r7, r2, #1
 8008170:	d007      	beq.n	8008182 <_strtol_l.isra.0+0xa2>
 8008172:	4581      	cmp	r9, r0
 8008174:	d314      	bcc.n	80081a0 <_strtol_l.isra.0+0xc0>
 8008176:	d101      	bne.n	800817c <_strtol_l.isra.0+0x9c>
 8008178:	45a2      	cmp	sl, r4
 800817a:	db11      	blt.n	80081a0 <_strtol_l.isra.0+0xc0>
 800817c:	fb00 4003 	mla	r0, r0, r3, r4
 8008180:	2201      	movs	r2, #1
 8008182:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008186:	e7eb      	b.n	8008160 <_strtol_l.isra.0+0x80>
 8008188:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800818c:	2f19      	cmp	r7, #25
 800818e:	d801      	bhi.n	8008194 <_strtol_l.isra.0+0xb4>
 8008190:	3c37      	subs	r4, #55	@ 0x37
 8008192:	e7ea      	b.n	800816a <_strtol_l.isra.0+0x8a>
 8008194:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008198:	2f19      	cmp	r7, #25
 800819a:	d804      	bhi.n	80081a6 <_strtol_l.isra.0+0xc6>
 800819c:	3c57      	subs	r4, #87	@ 0x57
 800819e:	e7e4      	b.n	800816a <_strtol_l.isra.0+0x8a>
 80081a0:	f04f 32ff 	mov.w	r2, #4294967295
 80081a4:	e7ed      	b.n	8008182 <_strtol_l.isra.0+0xa2>
 80081a6:	1c53      	adds	r3, r2, #1
 80081a8:	d108      	bne.n	80081bc <_strtol_l.isra.0+0xdc>
 80081aa:	2322      	movs	r3, #34	@ 0x22
 80081ac:	f8ce 3000 	str.w	r3, [lr]
 80081b0:	4660      	mov	r0, ip
 80081b2:	f1b8 0f00 	cmp.w	r8, #0
 80081b6:	d0a0      	beq.n	80080fa <_strtol_l.isra.0+0x1a>
 80081b8:	1e69      	subs	r1, r5, #1
 80081ba:	e006      	b.n	80081ca <_strtol_l.isra.0+0xea>
 80081bc:	b106      	cbz	r6, 80081c0 <_strtol_l.isra.0+0xe0>
 80081be:	4240      	negs	r0, r0
 80081c0:	f1b8 0f00 	cmp.w	r8, #0
 80081c4:	d099      	beq.n	80080fa <_strtol_l.isra.0+0x1a>
 80081c6:	2a00      	cmp	r2, #0
 80081c8:	d1f6      	bne.n	80081b8 <_strtol_l.isra.0+0xd8>
 80081ca:	f8c8 1000 	str.w	r1, [r8]
 80081ce:	e794      	b.n	80080fa <_strtol_l.isra.0+0x1a>
 80081d0:	08039fc5 	.word	0x08039fc5

080081d4 <strtol>:
 80081d4:	4613      	mov	r3, r2
 80081d6:	460a      	mov	r2, r1
 80081d8:	4601      	mov	r1, r0
 80081da:	4802      	ldr	r0, [pc, #8]	@ (80081e4 <strtol+0x10>)
 80081dc:	6800      	ldr	r0, [r0, #0]
 80081de:	f7ff bf7f 	b.w	80080e0 <_strtol_l.isra.0>
 80081e2:	bf00      	nop
 80081e4:	2000b930 	.word	0x2000b930

080081e8 <sniprintf>:
 80081e8:	b40c      	push	{r2, r3}
 80081ea:	b530      	push	{r4, r5, lr}
 80081ec:	4b18      	ldr	r3, [pc, #96]	@ (8008250 <sniprintf+0x68>)
 80081ee:	1e0c      	subs	r4, r1, #0
 80081f0:	681d      	ldr	r5, [r3, #0]
 80081f2:	b09d      	sub	sp, #116	@ 0x74
 80081f4:	da08      	bge.n	8008208 <sniprintf+0x20>
 80081f6:	238b      	movs	r3, #139	@ 0x8b
 80081f8:	602b      	str	r3, [r5, #0]
 80081fa:	f04f 30ff 	mov.w	r0, #4294967295
 80081fe:	b01d      	add	sp, #116	@ 0x74
 8008200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008204:	b002      	add	sp, #8
 8008206:	4770      	bx	lr
 8008208:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800820c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008210:	f04f 0300 	mov.w	r3, #0
 8008214:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008216:	bf14      	ite	ne
 8008218:	f104 33ff 	addne.w	r3, r4, #4294967295
 800821c:	4623      	moveq	r3, r4
 800821e:	9304      	str	r3, [sp, #16]
 8008220:	9307      	str	r3, [sp, #28]
 8008222:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008226:	9002      	str	r0, [sp, #8]
 8008228:	9006      	str	r0, [sp, #24]
 800822a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800822e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008230:	ab21      	add	r3, sp, #132	@ 0x84
 8008232:	a902      	add	r1, sp, #8
 8008234:	4628      	mov	r0, r5
 8008236:	9301      	str	r3, [sp, #4]
 8008238:	f000 f9a2 	bl	8008580 <_svfiprintf_r>
 800823c:	1c43      	adds	r3, r0, #1
 800823e:	bfbc      	itt	lt
 8008240:	238b      	movlt	r3, #139	@ 0x8b
 8008242:	602b      	strlt	r3, [r5, #0]
 8008244:	2c00      	cmp	r4, #0
 8008246:	d0da      	beq.n	80081fe <sniprintf+0x16>
 8008248:	9b02      	ldr	r3, [sp, #8]
 800824a:	2200      	movs	r2, #0
 800824c:	701a      	strb	r2, [r3, #0]
 800824e:	e7d6      	b.n	80081fe <sniprintf+0x16>
 8008250:	2000b930 	.word	0x2000b930

08008254 <memset>:
 8008254:	4402      	add	r2, r0
 8008256:	4603      	mov	r3, r0
 8008258:	4293      	cmp	r3, r2
 800825a:	d100      	bne.n	800825e <memset+0xa>
 800825c:	4770      	bx	lr
 800825e:	f803 1b01 	strb.w	r1, [r3], #1
 8008262:	e7f9      	b.n	8008258 <memset+0x4>

08008264 <strchr>:
 8008264:	b2c9      	uxtb	r1, r1
 8008266:	4603      	mov	r3, r0
 8008268:	4618      	mov	r0, r3
 800826a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800826e:	b112      	cbz	r2, 8008276 <strchr+0x12>
 8008270:	428a      	cmp	r2, r1
 8008272:	d1f9      	bne.n	8008268 <strchr+0x4>
 8008274:	4770      	bx	lr
 8008276:	2900      	cmp	r1, #0
 8008278:	bf18      	it	ne
 800827a:	2000      	movne	r0, #0
 800827c:	4770      	bx	lr
	...

08008280 <__errno>:
 8008280:	4b01      	ldr	r3, [pc, #4]	@ (8008288 <__errno+0x8>)
 8008282:	6818      	ldr	r0, [r3, #0]
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	2000b930 	.word	0x2000b930

0800828c <__libc_init_array>:
 800828c:	b570      	push	{r4, r5, r6, lr}
 800828e:	4d0d      	ldr	r5, [pc, #52]	@ (80082c4 <__libc_init_array+0x38>)
 8008290:	4c0d      	ldr	r4, [pc, #52]	@ (80082c8 <__libc_init_array+0x3c>)
 8008292:	1b64      	subs	r4, r4, r5
 8008294:	10a4      	asrs	r4, r4, #2
 8008296:	2600      	movs	r6, #0
 8008298:	42a6      	cmp	r6, r4
 800829a:	d109      	bne.n	80082b0 <__libc_init_array+0x24>
 800829c:	4d0b      	ldr	r5, [pc, #44]	@ (80082cc <__libc_init_array+0x40>)
 800829e:	4c0c      	ldr	r4, [pc, #48]	@ (80082d0 <__libc_init_array+0x44>)
 80082a0:	f000 fc64 	bl	8008b6c <_init>
 80082a4:	1b64      	subs	r4, r4, r5
 80082a6:	10a4      	asrs	r4, r4, #2
 80082a8:	2600      	movs	r6, #0
 80082aa:	42a6      	cmp	r6, r4
 80082ac:	d105      	bne.n	80082ba <__libc_init_array+0x2e>
 80082ae:	bd70      	pop	{r4, r5, r6, pc}
 80082b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80082b4:	4798      	blx	r3
 80082b6:	3601      	adds	r6, #1
 80082b8:	e7ee      	b.n	8008298 <__libc_init_array+0xc>
 80082ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80082be:	4798      	blx	r3
 80082c0:	3601      	adds	r6, #1
 80082c2:	e7f2      	b.n	80082aa <__libc_init_array+0x1e>
 80082c4:	0803a100 	.word	0x0803a100
 80082c8:	0803a100 	.word	0x0803a100
 80082cc:	0803a100 	.word	0x0803a100
 80082d0:	0803a104 	.word	0x0803a104

080082d4 <__retarget_lock_acquire_recursive>:
 80082d4:	4770      	bx	lr

080082d6 <__retarget_lock_release_recursive>:
 80082d6:	4770      	bx	lr

080082d8 <_free_r>:
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	4605      	mov	r5, r0
 80082dc:	2900      	cmp	r1, #0
 80082de:	d041      	beq.n	8008364 <_free_r+0x8c>
 80082e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082e4:	1f0c      	subs	r4, r1, #4
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	bfb8      	it	lt
 80082ea:	18e4      	addlt	r4, r4, r3
 80082ec:	f000 f8e0 	bl	80084b0 <__malloc_lock>
 80082f0:	4a1d      	ldr	r2, [pc, #116]	@ (8008368 <_free_r+0x90>)
 80082f2:	6813      	ldr	r3, [r2, #0]
 80082f4:	b933      	cbnz	r3, 8008304 <_free_r+0x2c>
 80082f6:	6063      	str	r3, [r4, #4]
 80082f8:	6014      	str	r4, [r2, #0]
 80082fa:	4628      	mov	r0, r5
 80082fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008300:	f000 b8dc 	b.w	80084bc <__malloc_unlock>
 8008304:	42a3      	cmp	r3, r4
 8008306:	d908      	bls.n	800831a <_free_r+0x42>
 8008308:	6820      	ldr	r0, [r4, #0]
 800830a:	1821      	adds	r1, r4, r0
 800830c:	428b      	cmp	r3, r1
 800830e:	bf01      	itttt	eq
 8008310:	6819      	ldreq	r1, [r3, #0]
 8008312:	685b      	ldreq	r3, [r3, #4]
 8008314:	1809      	addeq	r1, r1, r0
 8008316:	6021      	streq	r1, [r4, #0]
 8008318:	e7ed      	b.n	80082f6 <_free_r+0x1e>
 800831a:	461a      	mov	r2, r3
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	b10b      	cbz	r3, 8008324 <_free_r+0x4c>
 8008320:	42a3      	cmp	r3, r4
 8008322:	d9fa      	bls.n	800831a <_free_r+0x42>
 8008324:	6811      	ldr	r1, [r2, #0]
 8008326:	1850      	adds	r0, r2, r1
 8008328:	42a0      	cmp	r0, r4
 800832a:	d10b      	bne.n	8008344 <_free_r+0x6c>
 800832c:	6820      	ldr	r0, [r4, #0]
 800832e:	4401      	add	r1, r0
 8008330:	1850      	adds	r0, r2, r1
 8008332:	4283      	cmp	r3, r0
 8008334:	6011      	str	r1, [r2, #0]
 8008336:	d1e0      	bne.n	80082fa <_free_r+0x22>
 8008338:	6818      	ldr	r0, [r3, #0]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	6053      	str	r3, [r2, #4]
 800833e:	4408      	add	r0, r1
 8008340:	6010      	str	r0, [r2, #0]
 8008342:	e7da      	b.n	80082fa <_free_r+0x22>
 8008344:	d902      	bls.n	800834c <_free_r+0x74>
 8008346:	230c      	movs	r3, #12
 8008348:	602b      	str	r3, [r5, #0]
 800834a:	e7d6      	b.n	80082fa <_free_r+0x22>
 800834c:	6820      	ldr	r0, [r4, #0]
 800834e:	1821      	adds	r1, r4, r0
 8008350:	428b      	cmp	r3, r1
 8008352:	bf04      	itt	eq
 8008354:	6819      	ldreq	r1, [r3, #0]
 8008356:	685b      	ldreq	r3, [r3, #4]
 8008358:	6063      	str	r3, [r4, #4]
 800835a:	bf04      	itt	eq
 800835c:	1809      	addeq	r1, r1, r0
 800835e:	6021      	streq	r1, [r4, #0]
 8008360:	6054      	str	r4, [r2, #4]
 8008362:	e7ca      	b.n	80082fa <_free_r+0x22>
 8008364:	bd38      	pop	{r3, r4, r5, pc}
 8008366:	bf00      	nop
 8008368:	2000d934 	.word	0x2000d934

0800836c <sbrk_aligned>:
 800836c:	b570      	push	{r4, r5, r6, lr}
 800836e:	4e0f      	ldr	r6, [pc, #60]	@ (80083ac <sbrk_aligned+0x40>)
 8008370:	460c      	mov	r4, r1
 8008372:	6831      	ldr	r1, [r6, #0]
 8008374:	4605      	mov	r5, r0
 8008376:	b911      	cbnz	r1, 800837e <sbrk_aligned+0x12>
 8008378:	f000 fba4 	bl	8008ac4 <_sbrk_r>
 800837c:	6030      	str	r0, [r6, #0]
 800837e:	4621      	mov	r1, r4
 8008380:	4628      	mov	r0, r5
 8008382:	f000 fb9f 	bl	8008ac4 <_sbrk_r>
 8008386:	1c43      	adds	r3, r0, #1
 8008388:	d103      	bne.n	8008392 <sbrk_aligned+0x26>
 800838a:	f04f 34ff 	mov.w	r4, #4294967295
 800838e:	4620      	mov	r0, r4
 8008390:	bd70      	pop	{r4, r5, r6, pc}
 8008392:	1cc4      	adds	r4, r0, #3
 8008394:	f024 0403 	bic.w	r4, r4, #3
 8008398:	42a0      	cmp	r0, r4
 800839a:	d0f8      	beq.n	800838e <sbrk_aligned+0x22>
 800839c:	1a21      	subs	r1, r4, r0
 800839e:	4628      	mov	r0, r5
 80083a0:	f000 fb90 	bl	8008ac4 <_sbrk_r>
 80083a4:	3001      	adds	r0, #1
 80083a6:	d1f2      	bne.n	800838e <sbrk_aligned+0x22>
 80083a8:	e7ef      	b.n	800838a <sbrk_aligned+0x1e>
 80083aa:	bf00      	nop
 80083ac:	2000d930 	.word	0x2000d930

080083b0 <_malloc_r>:
 80083b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083b4:	1ccd      	adds	r5, r1, #3
 80083b6:	f025 0503 	bic.w	r5, r5, #3
 80083ba:	3508      	adds	r5, #8
 80083bc:	2d0c      	cmp	r5, #12
 80083be:	bf38      	it	cc
 80083c0:	250c      	movcc	r5, #12
 80083c2:	2d00      	cmp	r5, #0
 80083c4:	4606      	mov	r6, r0
 80083c6:	db01      	blt.n	80083cc <_malloc_r+0x1c>
 80083c8:	42a9      	cmp	r1, r5
 80083ca:	d904      	bls.n	80083d6 <_malloc_r+0x26>
 80083cc:	230c      	movs	r3, #12
 80083ce:	6033      	str	r3, [r6, #0]
 80083d0:	2000      	movs	r0, #0
 80083d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084ac <_malloc_r+0xfc>
 80083da:	f000 f869 	bl	80084b0 <__malloc_lock>
 80083de:	f8d8 3000 	ldr.w	r3, [r8]
 80083e2:	461c      	mov	r4, r3
 80083e4:	bb44      	cbnz	r4, 8008438 <_malloc_r+0x88>
 80083e6:	4629      	mov	r1, r5
 80083e8:	4630      	mov	r0, r6
 80083ea:	f7ff ffbf 	bl	800836c <sbrk_aligned>
 80083ee:	1c43      	adds	r3, r0, #1
 80083f0:	4604      	mov	r4, r0
 80083f2:	d158      	bne.n	80084a6 <_malloc_r+0xf6>
 80083f4:	f8d8 4000 	ldr.w	r4, [r8]
 80083f8:	4627      	mov	r7, r4
 80083fa:	2f00      	cmp	r7, #0
 80083fc:	d143      	bne.n	8008486 <_malloc_r+0xd6>
 80083fe:	2c00      	cmp	r4, #0
 8008400:	d04b      	beq.n	800849a <_malloc_r+0xea>
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	4639      	mov	r1, r7
 8008406:	4630      	mov	r0, r6
 8008408:	eb04 0903 	add.w	r9, r4, r3
 800840c:	f000 fb5a 	bl	8008ac4 <_sbrk_r>
 8008410:	4581      	cmp	r9, r0
 8008412:	d142      	bne.n	800849a <_malloc_r+0xea>
 8008414:	6821      	ldr	r1, [r4, #0]
 8008416:	1a6d      	subs	r5, r5, r1
 8008418:	4629      	mov	r1, r5
 800841a:	4630      	mov	r0, r6
 800841c:	f7ff ffa6 	bl	800836c <sbrk_aligned>
 8008420:	3001      	adds	r0, #1
 8008422:	d03a      	beq.n	800849a <_malloc_r+0xea>
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	442b      	add	r3, r5
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	f8d8 3000 	ldr.w	r3, [r8]
 800842e:	685a      	ldr	r2, [r3, #4]
 8008430:	bb62      	cbnz	r2, 800848c <_malloc_r+0xdc>
 8008432:	f8c8 7000 	str.w	r7, [r8]
 8008436:	e00f      	b.n	8008458 <_malloc_r+0xa8>
 8008438:	6822      	ldr	r2, [r4, #0]
 800843a:	1b52      	subs	r2, r2, r5
 800843c:	d420      	bmi.n	8008480 <_malloc_r+0xd0>
 800843e:	2a0b      	cmp	r2, #11
 8008440:	d917      	bls.n	8008472 <_malloc_r+0xc2>
 8008442:	1961      	adds	r1, r4, r5
 8008444:	42a3      	cmp	r3, r4
 8008446:	6025      	str	r5, [r4, #0]
 8008448:	bf18      	it	ne
 800844a:	6059      	strne	r1, [r3, #4]
 800844c:	6863      	ldr	r3, [r4, #4]
 800844e:	bf08      	it	eq
 8008450:	f8c8 1000 	streq.w	r1, [r8]
 8008454:	5162      	str	r2, [r4, r5]
 8008456:	604b      	str	r3, [r1, #4]
 8008458:	4630      	mov	r0, r6
 800845a:	f000 f82f 	bl	80084bc <__malloc_unlock>
 800845e:	f104 000b 	add.w	r0, r4, #11
 8008462:	1d23      	adds	r3, r4, #4
 8008464:	f020 0007 	bic.w	r0, r0, #7
 8008468:	1ac2      	subs	r2, r0, r3
 800846a:	bf1c      	itt	ne
 800846c:	1a1b      	subne	r3, r3, r0
 800846e:	50a3      	strne	r3, [r4, r2]
 8008470:	e7af      	b.n	80083d2 <_malloc_r+0x22>
 8008472:	6862      	ldr	r2, [r4, #4]
 8008474:	42a3      	cmp	r3, r4
 8008476:	bf0c      	ite	eq
 8008478:	f8c8 2000 	streq.w	r2, [r8]
 800847c:	605a      	strne	r2, [r3, #4]
 800847e:	e7eb      	b.n	8008458 <_malloc_r+0xa8>
 8008480:	4623      	mov	r3, r4
 8008482:	6864      	ldr	r4, [r4, #4]
 8008484:	e7ae      	b.n	80083e4 <_malloc_r+0x34>
 8008486:	463c      	mov	r4, r7
 8008488:	687f      	ldr	r7, [r7, #4]
 800848a:	e7b6      	b.n	80083fa <_malloc_r+0x4a>
 800848c:	461a      	mov	r2, r3
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	42a3      	cmp	r3, r4
 8008492:	d1fb      	bne.n	800848c <_malloc_r+0xdc>
 8008494:	2300      	movs	r3, #0
 8008496:	6053      	str	r3, [r2, #4]
 8008498:	e7de      	b.n	8008458 <_malloc_r+0xa8>
 800849a:	230c      	movs	r3, #12
 800849c:	6033      	str	r3, [r6, #0]
 800849e:	4630      	mov	r0, r6
 80084a0:	f000 f80c 	bl	80084bc <__malloc_unlock>
 80084a4:	e794      	b.n	80083d0 <_malloc_r+0x20>
 80084a6:	6005      	str	r5, [r0, #0]
 80084a8:	e7d6      	b.n	8008458 <_malloc_r+0xa8>
 80084aa:	bf00      	nop
 80084ac:	2000d934 	.word	0x2000d934

080084b0 <__malloc_lock>:
 80084b0:	4801      	ldr	r0, [pc, #4]	@ (80084b8 <__malloc_lock+0x8>)
 80084b2:	f7ff bf0f 	b.w	80082d4 <__retarget_lock_acquire_recursive>
 80084b6:	bf00      	nop
 80084b8:	2000d92c 	.word	0x2000d92c

080084bc <__malloc_unlock>:
 80084bc:	4801      	ldr	r0, [pc, #4]	@ (80084c4 <__malloc_unlock+0x8>)
 80084be:	f7ff bf0a 	b.w	80082d6 <__retarget_lock_release_recursive>
 80084c2:	bf00      	nop
 80084c4:	2000d92c 	.word	0x2000d92c

080084c8 <__ssputs_r>:
 80084c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084cc:	688e      	ldr	r6, [r1, #8]
 80084ce:	461f      	mov	r7, r3
 80084d0:	42be      	cmp	r6, r7
 80084d2:	680b      	ldr	r3, [r1, #0]
 80084d4:	4682      	mov	sl, r0
 80084d6:	460c      	mov	r4, r1
 80084d8:	4690      	mov	r8, r2
 80084da:	d82d      	bhi.n	8008538 <__ssputs_r+0x70>
 80084dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80084e4:	d026      	beq.n	8008534 <__ssputs_r+0x6c>
 80084e6:	6965      	ldr	r5, [r4, #20]
 80084e8:	6909      	ldr	r1, [r1, #16]
 80084ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084ee:	eba3 0901 	sub.w	r9, r3, r1
 80084f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084f6:	1c7b      	adds	r3, r7, #1
 80084f8:	444b      	add	r3, r9
 80084fa:	106d      	asrs	r5, r5, #1
 80084fc:	429d      	cmp	r5, r3
 80084fe:	bf38      	it	cc
 8008500:	461d      	movcc	r5, r3
 8008502:	0553      	lsls	r3, r2, #21
 8008504:	d527      	bpl.n	8008556 <__ssputs_r+0x8e>
 8008506:	4629      	mov	r1, r5
 8008508:	f7ff ff52 	bl	80083b0 <_malloc_r>
 800850c:	4606      	mov	r6, r0
 800850e:	b360      	cbz	r0, 800856a <__ssputs_r+0xa2>
 8008510:	6921      	ldr	r1, [r4, #16]
 8008512:	464a      	mov	r2, r9
 8008514:	f000 fae6 	bl	8008ae4 <memcpy>
 8008518:	89a3      	ldrh	r3, [r4, #12]
 800851a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800851e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008522:	81a3      	strh	r3, [r4, #12]
 8008524:	6126      	str	r6, [r4, #16]
 8008526:	6165      	str	r5, [r4, #20]
 8008528:	444e      	add	r6, r9
 800852a:	eba5 0509 	sub.w	r5, r5, r9
 800852e:	6026      	str	r6, [r4, #0]
 8008530:	60a5      	str	r5, [r4, #8]
 8008532:	463e      	mov	r6, r7
 8008534:	42be      	cmp	r6, r7
 8008536:	d900      	bls.n	800853a <__ssputs_r+0x72>
 8008538:	463e      	mov	r6, r7
 800853a:	6820      	ldr	r0, [r4, #0]
 800853c:	4632      	mov	r2, r6
 800853e:	4641      	mov	r1, r8
 8008540:	f000 faa6 	bl	8008a90 <memmove>
 8008544:	68a3      	ldr	r3, [r4, #8]
 8008546:	1b9b      	subs	r3, r3, r6
 8008548:	60a3      	str	r3, [r4, #8]
 800854a:	6823      	ldr	r3, [r4, #0]
 800854c:	4433      	add	r3, r6
 800854e:	6023      	str	r3, [r4, #0]
 8008550:	2000      	movs	r0, #0
 8008552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008556:	462a      	mov	r2, r5
 8008558:	f000 fad2 	bl	8008b00 <_realloc_r>
 800855c:	4606      	mov	r6, r0
 800855e:	2800      	cmp	r0, #0
 8008560:	d1e0      	bne.n	8008524 <__ssputs_r+0x5c>
 8008562:	6921      	ldr	r1, [r4, #16]
 8008564:	4650      	mov	r0, sl
 8008566:	f7ff feb7 	bl	80082d8 <_free_r>
 800856a:	230c      	movs	r3, #12
 800856c:	f8ca 3000 	str.w	r3, [sl]
 8008570:	89a3      	ldrh	r3, [r4, #12]
 8008572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008576:	81a3      	strh	r3, [r4, #12]
 8008578:	f04f 30ff 	mov.w	r0, #4294967295
 800857c:	e7e9      	b.n	8008552 <__ssputs_r+0x8a>
	...

08008580 <_svfiprintf_r>:
 8008580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008584:	4698      	mov	r8, r3
 8008586:	898b      	ldrh	r3, [r1, #12]
 8008588:	061b      	lsls	r3, r3, #24
 800858a:	b09d      	sub	sp, #116	@ 0x74
 800858c:	4607      	mov	r7, r0
 800858e:	460d      	mov	r5, r1
 8008590:	4614      	mov	r4, r2
 8008592:	d510      	bpl.n	80085b6 <_svfiprintf_r+0x36>
 8008594:	690b      	ldr	r3, [r1, #16]
 8008596:	b973      	cbnz	r3, 80085b6 <_svfiprintf_r+0x36>
 8008598:	2140      	movs	r1, #64	@ 0x40
 800859a:	f7ff ff09 	bl	80083b0 <_malloc_r>
 800859e:	6028      	str	r0, [r5, #0]
 80085a0:	6128      	str	r0, [r5, #16]
 80085a2:	b930      	cbnz	r0, 80085b2 <_svfiprintf_r+0x32>
 80085a4:	230c      	movs	r3, #12
 80085a6:	603b      	str	r3, [r7, #0]
 80085a8:	f04f 30ff 	mov.w	r0, #4294967295
 80085ac:	b01d      	add	sp, #116	@ 0x74
 80085ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b2:	2340      	movs	r3, #64	@ 0x40
 80085b4:	616b      	str	r3, [r5, #20]
 80085b6:	2300      	movs	r3, #0
 80085b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80085ba:	2320      	movs	r3, #32
 80085bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80085c4:	2330      	movs	r3, #48	@ 0x30
 80085c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008764 <_svfiprintf_r+0x1e4>
 80085ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085ce:	f04f 0901 	mov.w	r9, #1
 80085d2:	4623      	mov	r3, r4
 80085d4:	469a      	mov	sl, r3
 80085d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085da:	b10a      	cbz	r2, 80085e0 <_svfiprintf_r+0x60>
 80085dc:	2a25      	cmp	r2, #37	@ 0x25
 80085de:	d1f9      	bne.n	80085d4 <_svfiprintf_r+0x54>
 80085e0:	ebba 0b04 	subs.w	fp, sl, r4
 80085e4:	d00b      	beq.n	80085fe <_svfiprintf_r+0x7e>
 80085e6:	465b      	mov	r3, fp
 80085e8:	4622      	mov	r2, r4
 80085ea:	4629      	mov	r1, r5
 80085ec:	4638      	mov	r0, r7
 80085ee:	f7ff ff6b 	bl	80084c8 <__ssputs_r>
 80085f2:	3001      	adds	r0, #1
 80085f4:	f000 80a7 	beq.w	8008746 <_svfiprintf_r+0x1c6>
 80085f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085fa:	445a      	add	r2, fp
 80085fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80085fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008602:	2b00      	cmp	r3, #0
 8008604:	f000 809f 	beq.w	8008746 <_svfiprintf_r+0x1c6>
 8008608:	2300      	movs	r3, #0
 800860a:	f04f 32ff 	mov.w	r2, #4294967295
 800860e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008612:	f10a 0a01 	add.w	sl, sl, #1
 8008616:	9304      	str	r3, [sp, #16]
 8008618:	9307      	str	r3, [sp, #28]
 800861a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800861e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008620:	4654      	mov	r4, sl
 8008622:	2205      	movs	r2, #5
 8008624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008628:	484e      	ldr	r0, [pc, #312]	@ (8008764 <_svfiprintf_r+0x1e4>)
 800862a:	f7f7 fe09 	bl	8000240 <memchr>
 800862e:	9a04      	ldr	r2, [sp, #16]
 8008630:	b9d8      	cbnz	r0, 800866a <_svfiprintf_r+0xea>
 8008632:	06d0      	lsls	r0, r2, #27
 8008634:	bf44      	itt	mi
 8008636:	2320      	movmi	r3, #32
 8008638:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800863c:	0711      	lsls	r1, r2, #28
 800863e:	bf44      	itt	mi
 8008640:	232b      	movmi	r3, #43	@ 0x2b
 8008642:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008646:	f89a 3000 	ldrb.w	r3, [sl]
 800864a:	2b2a      	cmp	r3, #42	@ 0x2a
 800864c:	d015      	beq.n	800867a <_svfiprintf_r+0xfa>
 800864e:	9a07      	ldr	r2, [sp, #28]
 8008650:	4654      	mov	r4, sl
 8008652:	2000      	movs	r0, #0
 8008654:	f04f 0c0a 	mov.w	ip, #10
 8008658:	4621      	mov	r1, r4
 800865a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800865e:	3b30      	subs	r3, #48	@ 0x30
 8008660:	2b09      	cmp	r3, #9
 8008662:	d94b      	bls.n	80086fc <_svfiprintf_r+0x17c>
 8008664:	b1b0      	cbz	r0, 8008694 <_svfiprintf_r+0x114>
 8008666:	9207      	str	r2, [sp, #28]
 8008668:	e014      	b.n	8008694 <_svfiprintf_r+0x114>
 800866a:	eba0 0308 	sub.w	r3, r0, r8
 800866e:	fa09 f303 	lsl.w	r3, r9, r3
 8008672:	4313      	orrs	r3, r2
 8008674:	9304      	str	r3, [sp, #16]
 8008676:	46a2      	mov	sl, r4
 8008678:	e7d2      	b.n	8008620 <_svfiprintf_r+0xa0>
 800867a:	9b03      	ldr	r3, [sp, #12]
 800867c:	1d19      	adds	r1, r3, #4
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	9103      	str	r1, [sp, #12]
 8008682:	2b00      	cmp	r3, #0
 8008684:	bfbb      	ittet	lt
 8008686:	425b      	neglt	r3, r3
 8008688:	f042 0202 	orrlt.w	r2, r2, #2
 800868c:	9307      	strge	r3, [sp, #28]
 800868e:	9307      	strlt	r3, [sp, #28]
 8008690:	bfb8      	it	lt
 8008692:	9204      	strlt	r2, [sp, #16]
 8008694:	7823      	ldrb	r3, [r4, #0]
 8008696:	2b2e      	cmp	r3, #46	@ 0x2e
 8008698:	d10a      	bne.n	80086b0 <_svfiprintf_r+0x130>
 800869a:	7863      	ldrb	r3, [r4, #1]
 800869c:	2b2a      	cmp	r3, #42	@ 0x2a
 800869e:	d132      	bne.n	8008706 <_svfiprintf_r+0x186>
 80086a0:	9b03      	ldr	r3, [sp, #12]
 80086a2:	1d1a      	adds	r2, r3, #4
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	9203      	str	r2, [sp, #12]
 80086a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086ac:	3402      	adds	r4, #2
 80086ae:	9305      	str	r3, [sp, #20]
 80086b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008774 <_svfiprintf_r+0x1f4>
 80086b4:	7821      	ldrb	r1, [r4, #0]
 80086b6:	2203      	movs	r2, #3
 80086b8:	4650      	mov	r0, sl
 80086ba:	f7f7 fdc1 	bl	8000240 <memchr>
 80086be:	b138      	cbz	r0, 80086d0 <_svfiprintf_r+0x150>
 80086c0:	9b04      	ldr	r3, [sp, #16]
 80086c2:	eba0 000a 	sub.w	r0, r0, sl
 80086c6:	2240      	movs	r2, #64	@ 0x40
 80086c8:	4082      	lsls	r2, r0
 80086ca:	4313      	orrs	r3, r2
 80086cc:	3401      	adds	r4, #1
 80086ce:	9304      	str	r3, [sp, #16]
 80086d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086d4:	4824      	ldr	r0, [pc, #144]	@ (8008768 <_svfiprintf_r+0x1e8>)
 80086d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086da:	2206      	movs	r2, #6
 80086dc:	f7f7 fdb0 	bl	8000240 <memchr>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	d036      	beq.n	8008752 <_svfiprintf_r+0x1d2>
 80086e4:	4b21      	ldr	r3, [pc, #132]	@ (800876c <_svfiprintf_r+0x1ec>)
 80086e6:	bb1b      	cbnz	r3, 8008730 <_svfiprintf_r+0x1b0>
 80086e8:	9b03      	ldr	r3, [sp, #12]
 80086ea:	3307      	adds	r3, #7
 80086ec:	f023 0307 	bic.w	r3, r3, #7
 80086f0:	3308      	adds	r3, #8
 80086f2:	9303      	str	r3, [sp, #12]
 80086f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086f6:	4433      	add	r3, r6
 80086f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80086fa:	e76a      	b.n	80085d2 <_svfiprintf_r+0x52>
 80086fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008700:	460c      	mov	r4, r1
 8008702:	2001      	movs	r0, #1
 8008704:	e7a8      	b.n	8008658 <_svfiprintf_r+0xd8>
 8008706:	2300      	movs	r3, #0
 8008708:	3401      	adds	r4, #1
 800870a:	9305      	str	r3, [sp, #20]
 800870c:	4619      	mov	r1, r3
 800870e:	f04f 0c0a 	mov.w	ip, #10
 8008712:	4620      	mov	r0, r4
 8008714:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008718:	3a30      	subs	r2, #48	@ 0x30
 800871a:	2a09      	cmp	r2, #9
 800871c:	d903      	bls.n	8008726 <_svfiprintf_r+0x1a6>
 800871e:	2b00      	cmp	r3, #0
 8008720:	d0c6      	beq.n	80086b0 <_svfiprintf_r+0x130>
 8008722:	9105      	str	r1, [sp, #20]
 8008724:	e7c4      	b.n	80086b0 <_svfiprintf_r+0x130>
 8008726:	fb0c 2101 	mla	r1, ip, r1, r2
 800872a:	4604      	mov	r4, r0
 800872c:	2301      	movs	r3, #1
 800872e:	e7f0      	b.n	8008712 <_svfiprintf_r+0x192>
 8008730:	ab03      	add	r3, sp, #12
 8008732:	9300      	str	r3, [sp, #0]
 8008734:	462a      	mov	r2, r5
 8008736:	4b0e      	ldr	r3, [pc, #56]	@ (8008770 <_svfiprintf_r+0x1f0>)
 8008738:	a904      	add	r1, sp, #16
 800873a:	4638      	mov	r0, r7
 800873c:	f3af 8000 	nop.w
 8008740:	1c42      	adds	r2, r0, #1
 8008742:	4606      	mov	r6, r0
 8008744:	d1d6      	bne.n	80086f4 <_svfiprintf_r+0x174>
 8008746:	89ab      	ldrh	r3, [r5, #12]
 8008748:	065b      	lsls	r3, r3, #25
 800874a:	f53f af2d 	bmi.w	80085a8 <_svfiprintf_r+0x28>
 800874e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008750:	e72c      	b.n	80085ac <_svfiprintf_r+0x2c>
 8008752:	ab03      	add	r3, sp, #12
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	462a      	mov	r2, r5
 8008758:	4b05      	ldr	r3, [pc, #20]	@ (8008770 <_svfiprintf_r+0x1f0>)
 800875a:	a904      	add	r1, sp, #16
 800875c:	4638      	mov	r0, r7
 800875e:	f000 f879 	bl	8008854 <_printf_i>
 8008762:	e7ed      	b.n	8008740 <_svfiprintf_r+0x1c0>
 8008764:	0803a0c5 	.word	0x0803a0c5
 8008768:	0803a0cf 	.word	0x0803a0cf
 800876c:	00000000 	.word	0x00000000
 8008770:	080084c9 	.word	0x080084c9
 8008774:	0803a0cb 	.word	0x0803a0cb

08008778 <_printf_common>:
 8008778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800877c:	4616      	mov	r6, r2
 800877e:	4698      	mov	r8, r3
 8008780:	688a      	ldr	r2, [r1, #8]
 8008782:	690b      	ldr	r3, [r1, #16]
 8008784:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008788:	4293      	cmp	r3, r2
 800878a:	bfb8      	it	lt
 800878c:	4613      	movlt	r3, r2
 800878e:	6033      	str	r3, [r6, #0]
 8008790:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008794:	4607      	mov	r7, r0
 8008796:	460c      	mov	r4, r1
 8008798:	b10a      	cbz	r2, 800879e <_printf_common+0x26>
 800879a:	3301      	adds	r3, #1
 800879c:	6033      	str	r3, [r6, #0]
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	0699      	lsls	r1, r3, #26
 80087a2:	bf42      	ittt	mi
 80087a4:	6833      	ldrmi	r3, [r6, #0]
 80087a6:	3302      	addmi	r3, #2
 80087a8:	6033      	strmi	r3, [r6, #0]
 80087aa:	6825      	ldr	r5, [r4, #0]
 80087ac:	f015 0506 	ands.w	r5, r5, #6
 80087b0:	d106      	bne.n	80087c0 <_printf_common+0x48>
 80087b2:	f104 0a19 	add.w	sl, r4, #25
 80087b6:	68e3      	ldr	r3, [r4, #12]
 80087b8:	6832      	ldr	r2, [r6, #0]
 80087ba:	1a9b      	subs	r3, r3, r2
 80087bc:	42ab      	cmp	r3, r5
 80087be:	dc26      	bgt.n	800880e <_printf_common+0x96>
 80087c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087c4:	6822      	ldr	r2, [r4, #0]
 80087c6:	3b00      	subs	r3, #0
 80087c8:	bf18      	it	ne
 80087ca:	2301      	movne	r3, #1
 80087cc:	0692      	lsls	r2, r2, #26
 80087ce:	d42b      	bmi.n	8008828 <_printf_common+0xb0>
 80087d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087d4:	4641      	mov	r1, r8
 80087d6:	4638      	mov	r0, r7
 80087d8:	47c8      	blx	r9
 80087da:	3001      	adds	r0, #1
 80087dc:	d01e      	beq.n	800881c <_printf_common+0xa4>
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	6922      	ldr	r2, [r4, #16]
 80087e2:	f003 0306 	and.w	r3, r3, #6
 80087e6:	2b04      	cmp	r3, #4
 80087e8:	bf02      	ittt	eq
 80087ea:	68e5      	ldreq	r5, [r4, #12]
 80087ec:	6833      	ldreq	r3, [r6, #0]
 80087ee:	1aed      	subeq	r5, r5, r3
 80087f0:	68a3      	ldr	r3, [r4, #8]
 80087f2:	bf0c      	ite	eq
 80087f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087f8:	2500      	movne	r5, #0
 80087fa:	4293      	cmp	r3, r2
 80087fc:	bfc4      	itt	gt
 80087fe:	1a9b      	subgt	r3, r3, r2
 8008800:	18ed      	addgt	r5, r5, r3
 8008802:	2600      	movs	r6, #0
 8008804:	341a      	adds	r4, #26
 8008806:	42b5      	cmp	r5, r6
 8008808:	d11a      	bne.n	8008840 <_printf_common+0xc8>
 800880a:	2000      	movs	r0, #0
 800880c:	e008      	b.n	8008820 <_printf_common+0xa8>
 800880e:	2301      	movs	r3, #1
 8008810:	4652      	mov	r2, sl
 8008812:	4641      	mov	r1, r8
 8008814:	4638      	mov	r0, r7
 8008816:	47c8      	blx	r9
 8008818:	3001      	adds	r0, #1
 800881a:	d103      	bne.n	8008824 <_printf_common+0xac>
 800881c:	f04f 30ff 	mov.w	r0, #4294967295
 8008820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008824:	3501      	adds	r5, #1
 8008826:	e7c6      	b.n	80087b6 <_printf_common+0x3e>
 8008828:	18e1      	adds	r1, r4, r3
 800882a:	1c5a      	adds	r2, r3, #1
 800882c:	2030      	movs	r0, #48	@ 0x30
 800882e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008832:	4422      	add	r2, r4
 8008834:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008838:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800883c:	3302      	adds	r3, #2
 800883e:	e7c7      	b.n	80087d0 <_printf_common+0x58>
 8008840:	2301      	movs	r3, #1
 8008842:	4622      	mov	r2, r4
 8008844:	4641      	mov	r1, r8
 8008846:	4638      	mov	r0, r7
 8008848:	47c8      	blx	r9
 800884a:	3001      	adds	r0, #1
 800884c:	d0e6      	beq.n	800881c <_printf_common+0xa4>
 800884e:	3601      	adds	r6, #1
 8008850:	e7d9      	b.n	8008806 <_printf_common+0x8e>
	...

08008854 <_printf_i>:
 8008854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008858:	7e0f      	ldrb	r7, [r1, #24]
 800885a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800885c:	2f78      	cmp	r7, #120	@ 0x78
 800885e:	4691      	mov	r9, r2
 8008860:	4680      	mov	r8, r0
 8008862:	460c      	mov	r4, r1
 8008864:	469a      	mov	sl, r3
 8008866:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800886a:	d807      	bhi.n	800887c <_printf_i+0x28>
 800886c:	2f62      	cmp	r7, #98	@ 0x62
 800886e:	d80a      	bhi.n	8008886 <_printf_i+0x32>
 8008870:	2f00      	cmp	r7, #0
 8008872:	f000 80d1 	beq.w	8008a18 <_printf_i+0x1c4>
 8008876:	2f58      	cmp	r7, #88	@ 0x58
 8008878:	f000 80b8 	beq.w	80089ec <_printf_i+0x198>
 800887c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008880:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008884:	e03a      	b.n	80088fc <_printf_i+0xa8>
 8008886:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800888a:	2b15      	cmp	r3, #21
 800888c:	d8f6      	bhi.n	800887c <_printf_i+0x28>
 800888e:	a101      	add	r1, pc, #4	@ (adr r1, 8008894 <_printf_i+0x40>)
 8008890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008894:	080088ed 	.word	0x080088ed
 8008898:	08008901 	.word	0x08008901
 800889c:	0800887d 	.word	0x0800887d
 80088a0:	0800887d 	.word	0x0800887d
 80088a4:	0800887d 	.word	0x0800887d
 80088a8:	0800887d 	.word	0x0800887d
 80088ac:	08008901 	.word	0x08008901
 80088b0:	0800887d 	.word	0x0800887d
 80088b4:	0800887d 	.word	0x0800887d
 80088b8:	0800887d 	.word	0x0800887d
 80088bc:	0800887d 	.word	0x0800887d
 80088c0:	080089ff 	.word	0x080089ff
 80088c4:	0800892b 	.word	0x0800892b
 80088c8:	080089b9 	.word	0x080089b9
 80088cc:	0800887d 	.word	0x0800887d
 80088d0:	0800887d 	.word	0x0800887d
 80088d4:	08008a21 	.word	0x08008a21
 80088d8:	0800887d 	.word	0x0800887d
 80088dc:	0800892b 	.word	0x0800892b
 80088e0:	0800887d 	.word	0x0800887d
 80088e4:	0800887d 	.word	0x0800887d
 80088e8:	080089c1 	.word	0x080089c1
 80088ec:	6833      	ldr	r3, [r6, #0]
 80088ee:	1d1a      	adds	r2, r3, #4
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6032      	str	r2, [r6, #0]
 80088f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088fc:	2301      	movs	r3, #1
 80088fe:	e09c      	b.n	8008a3a <_printf_i+0x1e6>
 8008900:	6833      	ldr	r3, [r6, #0]
 8008902:	6820      	ldr	r0, [r4, #0]
 8008904:	1d19      	adds	r1, r3, #4
 8008906:	6031      	str	r1, [r6, #0]
 8008908:	0606      	lsls	r6, r0, #24
 800890a:	d501      	bpl.n	8008910 <_printf_i+0xbc>
 800890c:	681d      	ldr	r5, [r3, #0]
 800890e:	e003      	b.n	8008918 <_printf_i+0xc4>
 8008910:	0645      	lsls	r5, r0, #25
 8008912:	d5fb      	bpl.n	800890c <_printf_i+0xb8>
 8008914:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008918:	2d00      	cmp	r5, #0
 800891a:	da03      	bge.n	8008924 <_printf_i+0xd0>
 800891c:	232d      	movs	r3, #45	@ 0x2d
 800891e:	426d      	negs	r5, r5
 8008920:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008924:	4858      	ldr	r0, [pc, #352]	@ (8008a88 <_printf_i+0x234>)
 8008926:	230a      	movs	r3, #10
 8008928:	e011      	b.n	800894e <_printf_i+0xfa>
 800892a:	6821      	ldr	r1, [r4, #0]
 800892c:	6833      	ldr	r3, [r6, #0]
 800892e:	0608      	lsls	r0, r1, #24
 8008930:	f853 5b04 	ldr.w	r5, [r3], #4
 8008934:	d402      	bmi.n	800893c <_printf_i+0xe8>
 8008936:	0649      	lsls	r1, r1, #25
 8008938:	bf48      	it	mi
 800893a:	b2ad      	uxthmi	r5, r5
 800893c:	2f6f      	cmp	r7, #111	@ 0x6f
 800893e:	4852      	ldr	r0, [pc, #328]	@ (8008a88 <_printf_i+0x234>)
 8008940:	6033      	str	r3, [r6, #0]
 8008942:	bf14      	ite	ne
 8008944:	230a      	movne	r3, #10
 8008946:	2308      	moveq	r3, #8
 8008948:	2100      	movs	r1, #0
 800894a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800894e:	6866      	ldr	r6, [r4, #4]
 8008950:	60a6      	str	r6, [r4, #8]
 8008952:	2e00      	cmp	r6, #0
 8008954:	db05      	blt.n	8008962 <_printf_i+0x10e>
 8008956:	6821      	ldr	r1, [r4, #0]
 8008958:	432e      	orrs	r6, r5
 800895a:	f021 0104 	bic.w	r1, r1, #4
 800895e:	6021      	str	r1, [r4, #0]
 8008960:	d04b      	beq.n	80089fa <_printf_i+0x1a6>
 8008962:	4616      	mov	r6, r2
 8008964:	fbb5 f1f3 	udiv	r1, r5, r3
 8008968:	fb03 5711 	mls	r7, r3, r1, r5
 800896c:	5dc7      	ldrb	r7, [r0, r7]
 800896e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008972:	462f      	mov	r7, r5
 8008974:	42bb      	cmp	r3, r7
 8008976:	460d      	mov	r5, r1
 8008978:	d9f4      	bls.n	8008964 <_printf_i+0x110>
 800897a:	2b08      	cmp	r3, #8
 800897c:	d10b      	bne.n	8008996 <_printf_i+0x142>
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	07df      	lsls	r7, r3, #31
 8008982:	d508      	bpl.n	8008996 <_printf_i+0x142>
 8008984:	6923      	ldr	r3, [r4, #16]
 8008986:	6861      	ldr	r1, [r4, #4]
 8008988:	4299      	cmp	r1, r3
 800898a:	bfde      	ittt	le
 800898c:	2330      	movle	r3, #48	@ 0x30
 800898e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008992:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008996:	1b92      	subs	r2, r2, r6
 8008998:	6122      	str	r2, [r4, #16]
 800899a:	f8cd a000 	str.w	sl, [sp]
 800899e:	464b      	mov	r3, r9
 80089a0:	aa03      	add	r2, sp, #12
 80089a2:	4621      	mov	r1, r4
 80089a4:	4640      	mov	r0, r8
 80089a6:	f7ff fee7 	bl	8008778 <_printf_common>
 80089aa:	3001      	adds	r0, #1
 80089ac:	d14a      	bne.n	8008a44 <_printf_i+0x1f0>
 80089ae:	f04f 30ff 	mov.w	r0, #4294967295
 80089b2:	b004      	add	sp, #16
 80089b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	f043 0320 	orr.w	r3, r3, #32
 80089be:	6023      	str	r3, [r4, #0]
 80089c0:	4832      	ldr	r0, [pc, #200]	@ (8008a8c <_printf_i+0x238>)
 80089c2:	2778      	movs	r7, #120	@ 0x78
 80089c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089c8:	6823      	ldr	r3, [r4, #0]
 80089ca:	6831      	ldr	r1, [r6, #0]
 80089cc:	061f      	lsls	r7, r3, #24
 80089ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80089d2:	d402      	bmi.n	80089da <_printf_i+0x186>
 80089d4:	065f      	lsls	r7, r3, #25
 80089d6:	bf48      	it	mi
 80089d8:	b2ad      	uxthmi	r5, r5
 80089da:	6031      	str	r1, [r6, #0]
 80089dc:	07d9      	lsls	r1, r3, #31
 80089de:	bf44      	itt	mi
 80089e0:	f043 0320 	orrmi.w	r3, r3, #32
 80089e4:	6023      	strmi	r3, [r4, #0]
 80089e6:	b11d      	cbz	r5, 80089f0 <_printf_i+0x19c>
 80089e8:	2310      	movs	r3, #16
 80089ea:	e7ad      	b.n	8008948 <_printf_i+0xf4>
 80089ec:	4826      	ldr	r0, [pc, #152]	@ (8008a88 <_printf_i+0x234>)
 80089ee:	e7e9      	b.n	80089c4 <_printf_i+0x170>
 80089f0:	6823      	ldr	r3, [r4, #0]
 80089f2:	f023 0320 	bic.w	r3, r3, #32
 80089f6:	6023      	str	r3, [r4, #0]
 80089f8:	e7f6      	b.n	80089e8 <_printf_i+0x194>
 80089fa:	4616      	mov	r6, r2
 80089fc:	e7bd      	b.n	800897a <_printf_i+0x126>
 80089fe:	6833      	ldr	r3, [r6, #0]
 8008a00:	6825      	ldr	r5, [r4, #0]
 8008a02:	6961      	ldr	r1, [r4, #20]
 8008a04:	1d18      	adds	r0, r3, #4
 8008a06:	6030      	str	r0, [r6, #0]
 8008a08:	062e      	lsls	r6, r5, #24
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	d501      	bpl.n	8008a12 <_printf_i+0x1be>
 8008a0e:	6019      	str	r1, [r3, #0]
 8008a10:	e002      	b.n	8008a18 <_printf_i+0x1c4>
 8008a12:	0668      	lsls	r0, r5, #25
 8008a14:	d5fb      	bpl.n	8008a0e <_printf_i+0x1ba>
 8008a16:	8019      	strh	r1, [r3, #0]
 8008a18:	2300      	movs	r3, #0
 8008a1a:	6123      	str	r3, [r4, #16]
 8008a1c:	4616      	mov	r6, r2
 8008a1e:	e7bc      	b.n	800899a <_printf_i+0x146>
 8008a20:	6833      	ldr	r3, [r6, #0]
 8008a22:	1d1a      	adds	r2, r3, #4
 8008a24:	6032      	str	r2, [r6, #0]
 8008a26:	681e      	ldr	r6, [r3, #0]
 8008a28:	6862      	ldr	r2, [r4, #4]
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	f7f7 fc07 	bl	8000240 <memchr>
 8008a32:	b108      	cbz	r0, 8008a38 <_printf_i+0x1e4>
 8008a34:	1b80      	subs	r0, r0, r6
 8008a36:	6060      	str	r0, [r4, #4]
 8008a38:	6863      	ldr	r3, [r4, #4]
 8008a3a:	6123      	str	r3, [r4, #16]
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a42:	e7aa      	b.n	800899a <_printf_i+0x146>
 8008a44:	6923      	ldr	r3, [r4, #16]
 8008a46:	4632      	mov	r2, r6
 8008a48:	4649      	mov	r1, r9
 8008a4a:	4640      	mov	r0, r8
 8008a4c:	47d0      	blx	sl
 8008a4e:	3001      	adds	r0, #1
 8008a50:	d0ad      	beq.n	80089ae <_printf_i+0x15a>
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	079b      	lsls	r3, r3, #30
 8008a56:	d413      	bmi.n	8008a80 <_printf_i+0x22c>
 8008a58:	68e0      	ldr	r0, [r4, #12]
 8008a5a:	9b03      	ldr	r3, [sp, #12]
 8008a5c:	4298      	cmp	r0, r3
 8008a5e:	bfb8      	it	lt
 8008a60:	4618      	movlt	r0, r3
 8008a62:	e7a6      	b.n	80089b2 <_printf_i+0x15e>
 8008a64:	2301      	movs	r3, #1
 8008a66:	4632      	mov	r2, r6
 8008a68:	4649      	mov	r1, r9
 8008a6a:	4640      	mov	r0, r8
 8008a6c:	47d0      	blx	sl
 8008a6e:	3001      	adds	r0, #1
 8008a70:	d09d      	beq.n	80089ae <_printf_i+0x15a>
 8008a72:	3501      	adds	r5, #1
 8008a74:	68e3      	ldr	r3, [r4, #12]
 8008a76:	9903      	ldr	r1, [sp, #12]
 8008a78:	1a5b      	subs	r3, r3, r1
 8008a7a:	42ab      	cmp	r3, r5
 8008a7c:	dcf2      	bgt.n	8008a64 <_printf_i+0x210>
 8008a7e:	e7eb      	b.n	8008a58 <_printf_i+0x204>
 8008a80:	2500      	movs	r5, #0
 8008a82:	f104 0619 	add.w	r6, r4, #25
 8008a86:	e7f5      	b.n	8008a74 <_printf_i+0x220>
 8008a88:	0803a0d6 	.word	0x0803a0d6
 8008a8c:	0803a0e7 	.word	0x0803a0e7

08008a90 <memmove>:
 8008a90:	4288      	cmp	r0, r1
 8008a92:	b510      	push	{r4, lr}
 8008a94:	eb01 0402 	add.w	r4, r1, r2
 8008a98:	d902      	bls.n	8008aa0 <memmove+0x10>
 8008a9a:	4284      	cmp	r4, r0
 8008a9c:	4623      	mov	r3, r4
 8008a9e:	d807      	bhi.n	8008ab0 <memmove+0x20>
 8008aa0:	1e43      	subs	r3, r0, #1
 8008aa2:	42a1      	cmp	r1, r4
 8008aa4:	d008      	beq.n	8008ab8 <memmove+0x28>
 8008aa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008aaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008aae:	e7f8      	b.n	8008aa2 <memmove+0x12>
 8008ab0:	4402      	add	r2, r0
 8008ab2:	4601      	mov	r1, r0
 8008ab4:	428a      	cmp	r2, r1
 8008ab6:	d100      	bne.n	8008aba <memmove+0x2a>
 8008ab8:	bd10      	pop	{r4, pc}
 8008aba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008abe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ac2:	e7f7      	b.n	8008ab4 <memmove+0x24>

08008ac4 <_sbrk_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	4d06      	ldr	r5, [pc, #24]	@ (8008ae0 <_sbrk_r+0x1c>)
 8008ac8:	2300      	movs	r3, #0
 8008aca:	4604      	mov	r4, r0
 8008acc:	4608      	mov	r0, r1
 8008ace:	602b      	str	r3, [r5, #0]
 8008ad0:	f7fc fc8c 	bl	80053ec <_sbrk>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	d102      	bne.n	8008ade <_sbrk_r+0x1a>
 8008ad8:	682b      	ldr	r3, [r5, #0]
 8008ada:	b103      	cbz	r3, 8008ade <_sbrk_r+0x1a>
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	bd38      	pop	{r3, r4, r5, pc}
 8008ae0:	2000d928 	.word	0x2000d928

08008ae4 <memcpy>:
 8008ae4:	440a      	add	r2, r1
 8008ae6:	4291      	cmp	r1, r2
 8008ae8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008aec:	d100      	bne.n	8008af0 <memcpy+0xc>
 8008aee:	4770      	bx	lr
 8008af0:	b510      	push	{r4, lr}
 8008af2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008af6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008afa:	4291      	cmp	r1, r2
 8008afc:	d1f9      	bne.n	8008af2 <memcpy+0xe>
 8008afe:	bd10      	pop	{r4, pc}

08008b00 <_realloc_r>:
 8008b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b04:	4607      	mov	r7, r0
 8008b06:	4614      	mov	r4, r2
 8008b08:	460d      	mov	r5, r1
 8008b0a:	b921      	cbnz	r1, 8008b16 <_realloc_r+0x16>
 8008b0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b10:	4611      	mov	r1, r2
 8008b12:	f7ff bc4d 	b.w	80083b0 <_malloc_r>
 8008b16:	b92a      	cbnz	r2, 8008b24 <_realloc_r+0x24>
 8008b18:	f7ff fbde 	bl	80082d8 <_free_r>
 8008b1c:	4625      	mov	r5, r4
 8008b1e:	4628      	mov	r0, r5
 8008b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b24:	f000 f81a 	bl	8008b5c <_malloc_usable_size_r>
 8008b28:	4284      	cmp	r4, r0
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	d802      	bhi.n	8008b34 <_realloc_r+0x34>
 8008b2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b32:	d8f4      	bhi.n	8008b1e <_realloc_r+0x1e>
 8008b34:	4621      	mov	r1, r4
 8008b36:	4638      	mov	r0, r7
 8008b38:	f7ff fc3a 	bl	80083b0 <_malloc_r>
 8008b3c:	4680      	mov	r8, r0
 8008b3e:	b908      	cbnz	r0, 8008b44 <_realloc_r+0x44>
 8008b40:	4645      	mov	r5, r8
 8008b42:	e7ec      	b.n	8008b1e <_realloc_r+0x1e>
 8008b44:	42b4      	cmp	r4, r6
 8008b46:	4622      	mov	r2, r4
 8008b48:	4629      	mov	r1, r5
 8008b4a:	bf28      	it	cs
 8008b4c:	4632      	movcs	r2, r6
 8008b4e:	f7ff ffc9 	bl	8008ae4 <memcpy>
 8008b52:	4629      	mov	r1, r5
 8008b54:	4638      	mov	r0, r7
 8008b56:	f7ff fbbf 	bl	80082d8 <_free_r>
 8008b5a:	e7f1      	b.n	8008b40 <_realloc_r+0x40>

08008b5c <_malloc_usable_size_r>:
 8008b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b60:	1f18      	subs	r0, r3, #4
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	bfbc      	itt	lt
 8008b66:	580b      	ldrlt	r3, [r1, r0]
 8008b68:	18c0      	addlt	r0, r0, r3
 8008b6a:	4770      	bx	lr

08008b6c <_init>:
 8008b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6e:	bf00      	nop
 8008b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b72:	bc08      	pop	{r3}
 8008b74:	469e      	mov	lr, r3
 8008b76:	4770      	bx	lr

08008b78 <_fini>:
 8008b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7a:	bf00      	nop
 8008b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b7e:	bc08      	pop	{r3}
 8008b80:	469e      	mov	lr, r3
 8008b82:	4770      	bx	lr
